<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Adobe RoboHelp 8" />
<title>Foundation Overview</title>
<link rel="StyleSheet" href="../../Bookshelf.css" type="text/css" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function ehlp_showtip(current,e,text)
{
  if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == 'Netscape'))
  {
    document.tooltip.document.write("<layer bgColor='yellow' style='border:1px solid black;font-size:12px;'>"+ text + "<\/layer>");
    document.tooltip.document.close();
    document.tooltip.left=e.pageX+5;
    document.tooltip.top=e.pageY+5;
    document.tooltip.visibility="show";
  }
}
function ehlp_hidetip()
{
  document.tooltip.visibility="hidden";
}
//]]>
</script>
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
        origWidth = innerWidth;
        origHeight = innerHeight;
        onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
/*<![CDATA[*/
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
-->
/*]]>*/
</style>

<script type="text/javascript" language="javascript1.2" src="../../whmsg.js">
</script>
<script type="text/javascript" language="javascript" src="../../whver.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../../whproxy.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../../whutils.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../../whlang.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../../whtopic.js">
</script>
</head>
<body>
<script type="text/javascript" language="javascript1.2">
//<![CDATA[
<!--
if (window.gbWhTopic)
{
        var strUrl = document.location.href;
        var bc = 0;
        var n = strUrl.toLowerCase().indexOf("bc-");
        if(n != -1)
        {
                document.location.href = strUrl.substring(0, n);
                bc = strUrl.substring(n+3);
        }

        if (window.addTocInfo)
        {
        addTocInfo("DEVELOPER REFERENCE\nFoundation\nFoundation Overview");
addButton("show",BTN_TEXT,"Show Table of Contents","","","","",0,0,"","","");

        }
        if (window.writeBtnStyle)
                writeBtnStyle();

        if (window.writeIntopicBar)
                writeIntopicBar(1);

        
        

        if (window.setRelStartPage)
        {
        setRelStartPage("../../Bookshelf.htm");

                autoSync(0);
                sendSyncInfo();
                sendAveInfoOut();
        }
}
else
        if (window.gbIE4)
                document.location.reload();

//-->
//]]>
</script><script type="text/javascript" language="JavaScript1.2" src="../../ehlpdhtm.js">
</script><script type="text/javascript" language="javascript">
//<![CDATA[
document.write("<p  style=\"text-align:right;color:#0000ff;font-family:Arial;font-size:7pt;font-weight: normal;font-style: normal;text-decoration: none;\">");
AddMasterBreadcrumbs("../../Bookshelf.htm", "color:#0000ff;font-family:Arial;font-size:7pt;font-weight: normal;font-style: normal;text-decoration: none;", "&gt;", "Home", "../../Welcome_to_GroundWork_Monitor/index.htm");
document.write("<a style=\"color:#0000ff;font-family:Arial;font-size:7pt;font-weight: normal;font-style: normal;text-decoration: none;\" href=\"../developer_aboutdeveloperreference.htm\">DEVELOPER REFERENCE<\/a> &gt; <a style=\"color:#0000ff;font-family:Arial;font-size:7pt;font-weight: normal;font-style: normal;text-decoration: none;\" href=\"developer_foundationoverview.htm\">Foundation<\/a> &gt; Foundation Overview<\/p>");
//]]>
</script>
<p>&#160;</p>
<h1><a name="MiniTOCBookMark1" id="MiniTOCBookMark1"></a><img src="../../Shared_Images/square.gif" alt="square.gif" style="border: none;" width="15" height="15" border="0" /> Developer Reference</h1>
<h3 align="right"><a href="../developer_aboutdeveloperreference.htm" title="Topic Home" onmouseover="if ((parseInt(navigator.appVersion) == 4) &amp;&amp; (navigator.appName == 'Netscape')) ehlp_showtip(this,event,'Topic Home');" onmouseout="if ((parseInt(navigator.appVersion) == 4) &amp;&amp; (navigator.appName == 'Netscape')) ehlp_hidetip();"><img src="../../Shared_Images/homeicon.gif" alt="homeicon.gif" style="border: none;" width="33" height="27" border="0" /></a> <img src="../../Shared_Images/printicon.gif" onclick="window.print()" alt="Print Page" title="Print Page" style="border: none;" width="31" height="27" border="0" /> <a href="mailto:support@groundworkopensource.com?subject=Foundation Overview" title="Send Comments"><img src="../../Shared_Images/commentsicon.gif" alt="Send Comments" title="Send Comments" style="border: none;" width="33" height="27" border="0" /></a></h3>
<h2><a name="MiniTOCBookMark2" id="MiniTOCBookMark2"></a>Foundation Overview</h2>
<p align="left">Table&#160;of&#160;Contents:&#160;<a class="dropspot" href="javascript:TextPopup(this)" id="MTHotSpot27094" name="MTHotSpot27094"><span class="MTText">Show</span><span class="MTText" style="display: none;">Hide</span></a></p>
<script type="text/javascript" language="JavaScript1.2">
//<![CDATA[
TextPopupInit('MTHotSpot27094', 'MTPOPUP27094');
//]]>
</script>
<div align="left" class="droptext" id="MTPOPUP27094" style="display: none;">
<ul style="text-align:left; list-style-type: circle;">
<li><a href="#MiniTOCBookMark3">What is Foundation?</a>
<ul style="list-style-type: circle;">
<li><a href="#MiniTOCBookMark4">What It Does</a></li>
<li><a href="#MiniTOCBookMark5">Deployment of Foundation</a></li>
<li><a href="#MiniTOCBookMark6">Related Applications</a></li>
<li><a href="#MiniTOCBookMark7">Storing Nagios Data in Foundation</a></li>
</ul>
</li>
<li><a href="#MiniTOCBookMark8">Foundation Architecture and Data Flow</a>
<ul style="list-style-type: circle;">
<li><a href="#MiniTOCBookMark9">Architecture</a></li>
<li><a href="#MiniTOCBookMark10">Data Flow</a></li>
</ul>
</li>
<li><a href="#MiniTOCBookMark11">Component Details</a>
<ul style="list-style-type: circle;">
<li><a href="#MiniTOCBookMark12">Feeder</a></li>
<li><a href="#MiniTOCBookMark13">Foundation Listener</a></li>
<li><a href="#MiniTOCBookMark14">Adapters</a></li>
</ul>
</li>
<li><a href="#MiniTOCBookMark15">Data Integration Approaches</a>
<ul style="list-style-type: circle;">
<li><a href="#MiniTOCBookMark16">Before you Start</a></li>
<li><a href="#MiniTOCBookMark17">Supported Adapters</a></li>
<li><a href="#MiniTOCBookMark18">Single Transaction messages</a></li>
<li><a href="#MiniTOCBookMark19">User definable transaction messages</a></li>
<li><a href="#MiniTOCBookMark20">The Feeder and Generic Adapters</a></li>
<li><a href="#MiniTOCBookMark21">Custom Properties</a></li>
<li><a href="#MiniTOCBookMark22">Recommendations</a></li>
</ul>
</li>
</ul>
</div>
<p>This section is intended as a developer's guide for integrating monitoring data into the Foundation Data Store.</p>
<h3><a name="MiniTOCBookMark3" id="MiniTOCBookMark3"></a>What is Foundation?</h3>
<p>Foundation is an IT management data abstraction layer and development platform. The Foundation data model allows the integration of any state, event, and performance data, independent of the Monitoring Application that produces it. This offers the possibility to store data for additional systems, including open source and commercial monitoring systems, databases, and even hardware, such as detectors or sensors. It also allows the integration of Application Monitoring data known as MBeans.</p>
<p>The intent of Foundation is to provide a data model that integrates the components of an IT infrastructure requiring monitoring. Flexible methods of integrating data into the data store are provided allowing different tools and applications and databases to feed data into Foundation. Foundation will normalize the data so it can be retrieved in a consistent manner. Foundation then provides various APIs to allow the normalized data to be retrieved. The Foundation package includes Nagios, as the main monitoring system, integrated with Foundation and a set of applications which use the Foundation APIs to present real-time views and reports.</p>
<p>The Web Service interface is a new addition to the existing Foundation Framework. The previous API components have been re-packaged to use the Web Service Interface and have not been replaced. Select the Display Diagram icon above to view the different Foundation components and their interaction.</p>
<h4><a name="MiniTOCBookMark4" id="MiniTOCBookMark4"></a>What It Does</h4>
<p>APIs for Perl, PHP, and Web Service are part of the toolkit. The <b>Perl API</b> is a module called CollageQuery that allows a Perl program to retrieve data from Collage. The GroundWork <b>PHP API</b> provides an object library to access the Foundation database sources and the information within these sources. The library is split up into connection and query type classes. Adding a <b>Web Service</b> layer enables more applications to use and integrate with the existing Foundation Framework. We'll review adding a Web Service layer which enables more applications to use and integrate with the existing Foundation Framework. And, the Foundation 1.5 consolidation feature allows you to reduce the number of LogMessages by creating just one entry for messages that are alike, incrementing the Message counter, and adjusting the date fields. The actual implementation of the APIs is part of the GroundWork Monitor installation.</p>
<p>Programmers can use PHP, Perl, or Web Service API or third party products to:</p>
<ul style="list-style: url('../../Shared_Images/bullet01.gif');">
<li class="p-Bullet1">
<p class="Bullet1">Build custom displays of real-time monitoring information</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Build custom reports from historical monitoring information</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Monitor additional devices or systems by feeding monitoring information into the system</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Consolidate information from disparate systems into a single view</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Integrate heterogeneous systems by using GroundWork Foundation as an intermediary system</p>
</li>
</ul>
<h4><a name="MiniTOCBookMark5" id="MiniTOCBookMark5"></a>Deployment of Foundation</h4>
<p>Foundation is packaged and deployed as a web application (.war) into the Jetty Servlet container. Jetty is an open-source, standards-based, full-featured lightweight servlet container implemented entirely in Java. In addition to the Foundation application the GroundWork implementation includes the following web applications:</p>
<ul style="list-style: url('../../Shared_Images/bullet01.gif');">
<li class="p-Bullet1">
<p class="Bullet1">GroundWork Report Server and Eclipse BIRT Viewer that allow to run and manage Eclipse BIRT Reports created with Eclipse BIRT Report Designer.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">GroundWork JMS. A full featured persistence and topic server based on the Open Source project JORAM.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><span style="font-style: italic;"><i>GroundWork Monitor</i></span> includes <span style="font-style: italic;"><i>Event Console</i></span> implemented as a Web application.</p>
</li>
</ul>
<h4><a name="MiniTOCBookMark6" id="MiniTOCBookMark6"></a>Related Applications</h4>
<p>The Monarch tool is a web application that is used to configure the Nagios system. It stores the Nagios configuration data in its own database. At this point in time, the Monarch database is separate from the Foundation database. On a monarch commit the new configuration is synchronized with Foundation.</p>
<h4><a name="MiniTOCBookMark7" id="MiniTOCBookMark7"></a>Storing Nagios Data in Foundation</h4>
<p>Since the <span style="font-style: italic;"><i>Nagios</i></span> monitoring system is integrated in this package, any information gathered by a <span style="font-style: italic;"><i>Nagios</i></span> plugin can be integrated into the system. <span style="font-style: italic;"><i>Nagios Feeders</i></span> or the <span style="font-style: italic;"><i>Event Broker</i></span>&#160;take the information from the <span style="font-style: italic;"><i>Nagios</i></span> system and inserts it into the <span style="font-style: italic;"><i>Foundation</i></span> database. The data objects contained in <span style="font-style: italic;"><i>Foundation</i></span> map closely to the <span style="font-style: italic;"><i>Nagios</i></span> objects and include the following:</p>
<p class="Caption">Table: Data Objects</p>
<table cellspacing="0" width="700">
<col style="width: 30%;" />
<col style="width: 70%;" />
<tr style="vertical-align: top;">
<td style="border: Solid 2px #ffffff; width: 30%; padding-right: 10px; padding-left: 10px;" bgcolor="#1B3A83">
<p class="NormalTableBold">Host Groups</p>
</td>
<td style="border-top: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 70%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">This includes Hosts as members.</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 30%; padding-right: 10px; padding-left: 10px;" bgcolor="#1B3A83">
<p class="NormalTableBold">Hosts</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 70%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">This typically represents a monitoring entity that in Nagios usually maps to physical devices. A Host entry contains one or more Service Checks.</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 30%; padding-right: 10px; padding-left: 10px;" bgcolor="#1B3A83">
<p class="NormalTableBold">Services</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 70%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">This typically represents a Nagios Service Check for a specific Host. A Host-Service combination is unique in the monitoring instance.</p>
</td>
</tr>
</table>
<p>The following type of information can be retrieved:</p>
<p class="Caption">Table: Data Objects</p>
<table cellspacing="0" width="700">
<col style="width: 30%;" />
<col style="width: 70%;" />
<tr style="vertical-align: top;">
<td style="border: Solid 2px #ffffff; width: 30%; padding-right: 10px; padding-left: 10px;" bgcolor="#1B3A83">
<p class="NormalTableBold">Host Status</p>
</td>
<td style="border-top: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 70%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">This represents the current status and attributes of Host objects.</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 30%; padding-right: 10px; padding-left: 10px;" bgcolor="#1B3A83">
<p class="NormalTableBold">Service Status</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 70%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">This represents the current status and attributes of Service objects.</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 30%; padding-right: 10px; padding-left: 10px;" bgcolor="#1B3A83">
<p class="NormalTableBold">Events</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 70%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">These are typically timestamped messages that are generated by a monitoring system or managed device. The following Nagios Events are stored in the LogMessage table.</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 30%; padding-right: 10px; padding-left: 10px;" bgcolor="#1B3A83">
<p class="NormalTableBold">Host Alerts</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 70%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">Events generated when a Host changes state.</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 30%; padding-right: 10px; padding-left: 10px;" bgcolor="#1B3A83">
<p class="NormalTableBold">Host Notifications</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 70%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">Events generated when a notification occurs based on a Host Alert event.</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 30%; padding-right: 10px; padding-left: 10px;" bgcolor="#1B3A83">
<p class="NormalTableBold">Service Alerts</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 70%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">Events generated when a service changes state.</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 30%; padding-right: 10px; padding-left: 10px;" bgcolor="#1B3A83">
<p class="NormalTableBold">Service Notifications</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 70%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">Events generated when a notification occurs based on a Service Alert event.</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 30%; padding-right: 10px; padding-left: 10px;" bgcolor="#1B3A83">
<p class="NormalTableBold">Nagios Acknowledge</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 70%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">Existing Host or Service Alerts are updated when a user acknowledges messages.</p>
</td>
</tr>
</table>
<p>APIs built on top of the Foundation framework allow this information to be retrieved. The APIs allow programs to query by object and data type. Separate APIs are available for Java, PHP, and Perl programs. In addition to the provided samples, the Foundation status views (Overview and Troubleview) are built using the PHP Foundation API.</p>
<h3><a name="MiniTOCBookMark8" id="MiniTOCBookMark8"></a>Foundation Architecture and Data Flow</h3>
<h4><a name="MiniTOCBookMark9" id="MiniTOCBookMark9"></a>Architecture</h4>
<p>The Foundation framework consists of five main components. Select the <span style="font-style: italic;"><i>diagram</i></span> icon above to view the Foundation Components:</p>
<ol>
<li class="p-Numbering">
<p class="Numbering"><b style="font-weight: bold;">Feeders</b> These are scripts or programs which generate a data set that is sent to the Foundation Listener. The protocol is a simple XML stream.</p>
</li>
<li class="p-Numbering">
<p class="Numbering"><b style="font-weight: bold;">Foundation Listener</b> This is a port or Java Message Service (JMS) Listener which receives the XML streams from various Feeders and dispatches them to data normalizers, called Adapters.</p>
</li>
<li class="p-Numbering">
<p class="Numbering"><b style="font-weight: bold;">Foundation Adapters</b> These Adapters are programs within the Foundation framework that apply rules and data normalization to incoming data. Each Adapter is application specific (e.g. NagiosEvent, SNMP or Syslog) and is easily added and managed with the framework.</p>
</li>
<li class="p-Numbering">
<p class="Numbering"><b style="font-weight: bold;">Foundation Persistence Service</b> This is a Relational Persistence layer which runs on the top of a database or a database cluster.</p>
</li>
<li class="p-Numbering">
<p class="Numbering"><b style="font-weight: bold;">Foundation API</b> This is documented API's for PHP and Perl, used to retrieve data from the data store.</p>
</li>
</ol>
<p class="Caption">Figure: Foundation Components</p>
<p class="Figure"><img src="../Assets/developer_reference_foundation_components.gif" alt="developer_reference_foundation_components.gif" style="border: none;" width="650" height="427" border="0" /></p>
<h4><a name="MiniTOCBookMark10" id="MiniTOCBookMark10"></a>Data Flow</h4>
<p>The data flow of messages is unidirectional, since the Foundation Framework doesn't reply to the incoming XML streams.</p>
<p class="Caption">Figure: Foundation Data Flow</p>
<p class="Figure"><img src="../Assets/developer_reference_foundation_dataflow.gif" alt="developer_reference_foundation_dataflow.gif" style="border: none;" width="550" height="40" border="0" /></p>
<h3><a name="MiniTOCBookMark11" id="MiniTOCBookMark11"></a>Component Details</h3>
<h4><a name="MiniTOCBookMark12" id="MiniTOCBookMark12"></a>Feeder</h4>
<p>In order to integrate data into the Foundation framework, the data generated by the source application (e.g. Nagios or Java Management Extensions (JMX) Service) needs to be read and sent as an XML stream to one of the listeners. This functionality is provided by <i>Feeders</i>. A Feeder can be written in any language; for example, Nagios Feeders are written in Perl. The XML output protocol is simple:</p>
<p class="CodeGroup">&lt;FeederName AttributeName='AttributeValue' AttributeName='AttributeValue' ... /&gt;</p>
<p>The FeederName matches with the Adapter name, and the Attributes are just a list of name value pairs. For example, the Nagios Event Feeder XML has the following format:</p>
<p class="CodeGroup">&lt;NAGIOSLOG MonitorServer='localhost' Severity='HIGH' TextMessage='Failed to check Host' /&gt;</p>
<p>The Feeder could include the logic for normalizing the data, but this is discouraged. The best approach is to have a simple and generic Feeder that reads and forwards the data to the Listener. Normalization functions are best performed by Adapters.</p>
<p>The simple format of an XML element represents as well one transaction across the system. For a large load this is expensive and affects the overall message throughput since transaction carry some overhead. &#160;&#160;The recent version of Foundation includes support for more complex messages where multiple messages can be bundled into one transaction. More details about the different adapters can be found in the "Data Integration approaches section".</p>
<h4><a name="MiniTOCBookMark13" id="MiniTOCBookMark13"></a>Foundation Listener</h4>
<p>The Listener is a simple service, either listening on port 4913 or on a JMS topic. The incoming XML message is analyzed and forwarded to the appropriate Adapter as defined in the XML element (e.g., the Adapter that matches FeederName).</p>
<h4><a name="MiniTOCBookMark14" id="MiniTOCBookMark14"></a>Adapters</h4>
<p>Adapters are data normalizers that apply normalization or simplification rules to the incoming XML message. For example, an Adapter could calculate the average temperature for a data feed of 10 sensors in a server room, and insert the calculated value into the data store.</p>
<p>An Adapter can be used to validate incoming data for completeness. It can and should be used to reject incomplete or faulty data before it gets rejected by the persistence layer, which would affect system performance.</p>
<p>Adapters are written in Java and compiled into a jar library package. The package includes a Spring assembly file which is read by the Foundation Framework at initialization time. See the tutorial later in this document for more details about the syntax of the assembly file, and how to deploy an Adapter.</p>
<h3><a name="MiniTOCBookMark15" id="MiniTOCBookMark15"></a>Data Integration Approaches</h3>
<h4><a name="MiniTOCBookMark16" id="MiniTOCBookMark16"></a>Before you Start</h4>
<p>Before you start integrating data into the Foundation data store, you need to decide the following:</p>
<ol>
<li class="p-Numbering">
<p class="Numbering">How to collect data from the source application and how to write the Feeder.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Where the data normalization takes place (Feeder or Adapter).</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Whether the default fields in the data model are enough to store your data, or whether you need to add application specific properties.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">What ApplicationType to use for your data. The ApplicationType is a parameter that allows you to access your data using a simple filter. In GroundWork Monitor, this filter is built in to the Console application view, and will show up automatically when data is present with the application type in question.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Does it make sense to bundle messages into a single transaction. Bundling would allow a higher message throughput and submit all or nothing of depended data. It adds more complexity to the feeder creating feeds. Foundation added support for this type of messages by defining an XML Schema (link to file) and a new Adapter called SystemAdapter. The recent version of Foundation uses this approach for processing Nagios Status and Event messages.</p>
</li>
</ol>
<h4><a name="MiniTOCBookMark17" id="MiniTOCBookMark17"></a>Supported Adapters</h4>
<p>Foundation comes with a set of Adapters for different type of data feeds. The adapters can be classified into two different types:</p>
<h4><a name="MiniTOCBookMark18" id="MiniTOCBookMark18"></a>Single Transaction messages</h4>
<p>The adapters of this type accept XML feed of the format <span class="CodeInline">&lt;ELEMENT atribute=value,.. /&gt;</span>. Each XML element represents a transaction. Foundation supports the following adapters.</p>
<table cellspacing="0" width="700">
<col style="width: 33.333%;" />
<col style="width: 33.333%;" />
<col style="width: 33.333%;" />
<tr style="vertical-align: top;">
<td style="border: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#1B3A83">
<p class="NormalTableBoldCenter">Adapter Type</p>
</td>
<td style="border-top: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#1B3A83">
<p class="NormalTableBoldCenter">XML</p>
</td>
<td style="border-top: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#1B3A83">
<p class="NormalTableBoldCenter">Comments</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">NAGIOS Events</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">&lt;NAGIOS_LOG attribute,.. /&gt;</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">Events from Nagios</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">Nagios Status</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">&lt;SERVICE_STATUS attributes,./&gt;</p>
<p class="NormalTable">&lt;HOST_STATUS attribute,../&gt;</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">Host and Service status updates</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">SNMP Trap events</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">&lt;SNMPTRAP attribute,.. /&gt;</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">SNMP trap events coming from the SNMPTT daemon</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">SNMP Trap events</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">&lt;SNMPTRAP attribute,.. /&gt;</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">SNMP trap events coming from the SNMPTT daemon</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">Syslog events</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">&lt;SYSLOG attribute,.. /&gt;</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">Syslog messages from the gw_syslog plugin</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">Generic Events</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">&lt;GENERIC_LOG attribute,../&gt;</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">Generic adapter that maps attributes directly to dynamic properties without checking.</p>
</td>
</tr>
<tr style="vertical-align: top;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">System messages</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">&lt;COLLAGE_LOG attribute,../&gt;</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; width: 33.333%; padding-right: 10px; padding-left: 10px;" bgcolor="#C0C0C0">
<p class="NormalTable">Reporting System messages to Console</p>
</td>
</tr>
</table>
<h4><a name="MiniTOCBookMark19" id="MiniTOCBookMark19"></a>User definable transaction messages</h4>
<p>The preferred way to feed data is using the new SystemAdapter which allows the sending of multiple messages of different entities (Event or Status) in a single transaction. The advantages of this approach are:</p>
<ul>
<li class="P-Bullet1">
<p class="Bullet1">Higher message throughput under load.</p>
</li>
<li class="P-Bullet1">
<p class="Bullet1">The SystemAdapter uses an XML schema to validate the feed upfront. Any synatx errors are detected before being processed in the service layer.</p>
</li>
</ul>
<p class="Bullet1" style="margin-left: 40px;">View XML Schema: <a href="../Assets/SystemConfig.pdf" target="_blank" id="a3" name="a3">SystemConfig.xsd</a></p>
<ul>
<li class="P-Bullet1">
<p class="Bullet1">Wrapping dependent messages in a transaction. If any of the message fail everything will roll back and guarantee data consistency.</p>
</li>
</ul>
<p>For information on how to use and configure feeds that use the SystemAdmin adapter see example in the document <a href="developer_configuringdatafeeders.htm" target="_blank">Configuring Data Feeders</a>.</p>
<h4><a name="MiniTOCBookMark20" id="MiniTOCBookMark20"></a>The Feeder and Generic Adapters</h4>
<p>As mentioned in the earlier chapters, the Feeder has to produce an XML stream that can be sent to one of Foundation's Listener services. If the Feeder performs normalization, or if the input data is simple and matches the default data model properties, then the Feeder can send the data to the Generic Adapter. The Generic Adapter maps the sent attributes to database properties without validating the values.</p>
<p>A sample of how to feed data to the Generic Adapter can be found below under <i>Creating a Feeder for LOG4J and Using the Generic Log Adapter</i>.</p>
<h4><a name="MiniTOCBookMark21" id="MiniTOCBookMark21"></a>Custom Properties</h4>
<p>If you decide that your application needs more properties to be stored along with the default Status and Event data fields, the following steps are necessary:</p>
<ol>
<li class="p-Numbering">
<p class="Numbering">Add new properties and their type to the <span class="CodeInline">PropertyType</span> table.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Associate the properties with the <span class="CodeInline">EntityType</span> such as <span class="CodeInline">LOG_MESSAGE</span>, <span class="CodeInline">SERVICE_STATUS</span>, or <span class="CodeInline">HOST_STATUS</span>.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Define an <span class="CodeInline">ApplicationType</span> for your data.</p>
</li>
</ol>
<p>In the current version of GroundWork Foundation the above database operation needs to be executed with SQL statements. These methods will be supported by the next update of the Admin Feeder, which will allow dynamic addition of properties via the input stream.</p>
<p>Custom properties can be inserted using the Generic Adapter, but since no consistency checking is applied, message feeds with missing properties will be rejected.</p>
<h4><a name="MiniTOCBookMark22" id="MiniTOCBookMark22"></a>Recommendations</h4>
<ol>
<li class="p-Numbering">
<p class="Numbering">For large numbers of constant data feeds, implementation of an Adapter to validate the incoming data (all required fields available, correct type) is recommended. This will ensure that any error that would cause a transaction rollback (an expensive middle layer operation) can be detected up front and rejected.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Feeders should be simple and as generic as possible - collect data points and send them to the Adapter for normalization. This reduces the load of concurrently running Feeder processes, which can be inefficient, especially when written in interpreted languages such as Perl.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Use the SystemAdapter whenever possible. The performance improvements and the improved message validation make the system much more robust.</p>
</li>
</ol>
<div style="width: 100%; position: relative;" id="footer">
<p class="Footer" style="font-size: 7pt; line-height: Normal; margin-top: 6pt; margin-bottom: 4pt;">GroundWork, Inc. ©2011</p>
</div>
<script type="text/javascript" language="JavaScript">
//<![CDATA[
 if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == 'Netscape'))
  document.write("<div id='tooltip' class='WebHelpPopupMenu'><\/div>");
//]]>
</script><script type="text/javascript" language="javascript1.2">
//<![CDATA[
<!--
if (window.writeIntopicBar)
        writeIntopicBar(0);


highlightSearch();
//-->
//]]>
</script>
</body>
</html>
