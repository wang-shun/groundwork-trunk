<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Adobe RoboHelp 8" />
<title>SSH Monitoring Overview</title>
<link rel="StyleSheet" href="../../Bookshelf.css" type="text/css" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
        origWidth = innerWidth;
        origHeight = innerHeight;
        onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
/*<![CDATA[*/
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
-->
/*]]>*/
</style>

<script type="text/javascript" language="javascript1.2" src="../../whmsg.js">
</script>
<script type="text/javascript" language="javascript" src="../../whver.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../../whproxy.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../../whutils.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../../whlang.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../../whtopic.js">
</script>
</head>
<body>
<script type="text/javascript" language="javascript1.2">
//<![CDATA[
<!--
if (window.gbWhTopic)
{
        var strUrl = document.location.href;
        var bc = 0;
        var n = strUrl.toLowerCase().indexOf("bc-");
        if(n != -1)
        {
                document.location.href = strUrl.substring(0, n);
                bc = strUrl.substring(n+3);
        }

        if (window.addTocInfo)
        {
        addTocInfo("GROUNDWORK PROFILES\nSSH Profiles\nSSH Monitoring Overview");
addButton("show",BTN_TEXT,"Show Table of Contents","","","","",0,0,"","","");

        }
        if (window.writeBtnStyle)
                writeBtnStyle();

        if (window.writeIntopicBar)
                writeIntopicBar(1);

        
        

        if (window.setRelStartPage)
        {
        setRelStartPage("../../Bookshelf.htm");

                autoSync(0);
                sendSyncInfo();
                sendAveInfoOut();
        }
}
else
        if (window.gbIE4)
                document.location.reload();

//-->
//]]>
</script><script type="text/javascript" language="JavaScript1.2" src="../../ehlpdhtm.js">
</script><script type="text/javascript" language="javascript">
//<![CDATA[
document.write("<p  style=\"text-align:right;color:#0000ff;font-family:Arial;font-size:7pt;font-weight: normal;font-style: normal;text-decoration: none;\">");
AddMasterBreadcrumbs("../../Bookshelf.htm", "color:#0000ff;font-family:Arial;font-size:7pt;font-weight: normal;font-style: normal;text-decoration: none;", "&gt;", "Home", "../../Welcome_to_GroundWork_Monitor/index.htm");
document.write("<a style=\"color:#0000ff;font-family:Arial;font-size:7pt;font-weight: normal;font-style: normal;text-decoration: none;\" href=\"../profiles_aboutprofiles.htm\">GROUNDWORK PROFILES<\/a> &gt; <a style=\"color:#0000ff;font-family:Arial;font-size:7pt;font-weight: normal;font-style: normal;text-decoration: none;\" href=\"profiles_sshmonitoringoverview.htm\">SSH Profiles<\/a> &gt; SSH Monitoring Overview<\/p>");
//]]>
</script>
<p>&#160;</p>
<h1><a name="MiniTOCBookMark1" id="MiniTOCBookMark1"></a><img src="../../Shared_Images/square.gif" alt="square.gif" style="border: none;" width="15" height="15" border="0" /> GroundWork Profiles</h1>
<h3 align="right"><a href="../profiles_aboutprofiles.htm"><img src="../../Shared_Images/homeicon.gif" alt="homeicon.gif" style="border: none;" width="33" height="27" border="0" /></a> <img src="../../Shared_Images/printicon.gif" onclick="window.print()" alt="Print Page" title="Print Page" style="border: none;" width="31" height="27" border="0" /> <a href="mailto:support@groundworkopensource.com?subject=SSH Monitoring Overview" title="Send Comments"><img src="../../Shared_Images/commentsicon.gif" alt="commentsicon.gif" style="border: none;" width="33" height="27" border="0" /></a></h3>
<h2><a name="MiniTOCBookMark2" id="MiniTOCBookMark2"></a>SSH Monitoring Overview</h2>
<p align="left">Table&#160;of&#160;Contents:&#160;<a class="dropspot" href="javascript:TextPopup(this)" id="MTHotSpot15179" name="MTHotSpot15179"><span class="MTText">Show</span><span class="MTText" style="display: none;">Hide</span></a></p>
<script type="text/javascript" language="JavaScript1.2">
//<![CDATA[
TextPopupInit('MTHotSpot15179', 'MTPOPUP15179');
//]]>
</script>
<div align="left" class="droptext" id="MTPOPUP15179" style="display: none;">
<ul style="text-align:left; list-style-type: circle;">
<li><a href="#MiniTOCBookMark3">Secure Shell (SSH)</a></li>
<li><a href="#MiniTOCBookMark4">Building the SSH Infrastructure</a>
<ul style="list-style-type: circle;">
<li><a href="#MiniTOCBookMark5">Define the Login Account</a></li>
<li><a href="#MiniTOCBookMark6">Create the Login Accounts</a></li>
<li><a href="#MiniTOCBookMark7">Configure Public Key Authentication</a></li>
<li><a href="#MiniTOCBookMark8">Managing the Remote Commands</a></li>
</ul>
</li>
</ul>
</div>
<h3><a name="MiniTOCBookMark3" id="MiniTOCBookMark3"></a>Secure Shell (SSH)</h3>
<p><span style="font-weight: bold;"><b>Secure Shell</b></span> (<span style="font-style: italic;"><i>SSH</i></span>) provides encrypted terminal access to remote hosts, and also provides the ability for users to execute commands on the remote hosts, using the resulting encrypted sessions. In simple terms, this means that a user on one host can use SSH to execute commands on another host in the same basic manner as if those commands were being executed locally, with the extra benefit of having the commands and response data being exchanged across a secure communications channel.</p>
<p>Moreover, since <span style="font-style: italic;"><i>Nagios</i></span> uses a lightweight command and response interface to gather monitoring data, <span style="font-style: italic;"><i>Nagios</i></span> is also able to use <span style="font-style: italic;"><i>SSH</i></span> technology to process remote commands and response data just as easily, and with the same benefits.</p>
<p>Specifically, <span style="font-style: italic;"><i>Nagios</i></span> provides an <span style="font-style: italic;"><i>SSH</i></span> plug-in interface that can be used to build a variety of service profiles in <span style="font-style: italic;"><i>GroundWork Monitor</i></span>. In this setup, the administrator defines one or more profiles that describe the commands that need to be executed on the remote hosts, and also defines a global <span style="font-style: italic;"><i>SSH</i></span> username for remote login purposes. From there, <span style="font-style: italic;"><i>Nagios</i></span> is able to call the <span style="font-style: italic;"><i>SSH</i></span> plug-in with the necessary parameters as needed, with the plug-in establishing a secure connection to the specified host, executing the specified command, and then returning the program output to <span style="font-style: italic;"><i>Nagios</i></span> for processing. The only substantive difference between this approach and regular command processing is that the service profiles require some additional parameters, and the fact that <span style="font-style: italic;"><i>Nagios</i></span> calls upon the <span style="font-style: italic;"><i>SSH</i></span> plug-in to perform the remote command processing instead of handling that task directly, but it otherwise preserves the traditional <span style="font-style: italic;"><i>Nagios</i></span> model.</p>
<p>This model is especially important with services that do not offer a network monitoring interface. For example, many modern application servers maintain statistics for important attributes such as the number of requests processed per-day, but will only make the information available through local management utilities. In those situations, the easiest and most secure way to incorporate the data into <span style="font-style: italic;"><i>GroundWork Monitor</i></span> is by using the <span style="font-style: italic;"><i>Nagios</i></span> <span style="font-style: italic;"><i>SSH</i></span> plug-in to automate the process of remotely executing the necessary management commands.</p>
<p>Apart from specific services that cannot be easily monitored, many administrators also use the <span style="font-style: italic;"><i>SSH</i></span> plug-in to monitor system-level resources by simply copying the entire set of <span style="font-style: italic;"><i>Nagios</i></span> <span style="font-style: italic;"><i>local</i></span> commands to a remote host and then using the <span style="font-style: italic;"><i>SSH</i></span> plug-in to login to the remote server and execute those commands. Although this is not technically required (there are several other means of obtaining most of the same data), this route can simplify data collection if an administrator has to use the <span style="font-style: italic;"><i>SSH</i></span> plug-in for other tasks on those systems anyway.</p>
<p>For these reasons, <span style="font-style: italic;"><i>GroundWork Monitor</i></span> includes several pre-defined SSH service profiles that are capable of monitoring many common applications and system-level resources, and new service profiles can also be easily developed if they are needed.</p>
<h3><a name="MiniTOCBookMark4" id="MiniTOCBookMark4"></a>Building the SSH Infrastructure</h3>
<p>Using the <span style="font-style: italic;"><i>SSH</i></span> plug-in to execute commands on remote hosts is fairly simple in practice, although there are some one-time setup tasks that must be performed first. In particular, network administrators must define a user account for <span style="font-style: italic;"><i>Nagios</i></span> to use for remote login purposes, and must also configure the private and public keys for that account. Once those tasks are performed, the appropriate service definitions must also be created on the <span style="font-style: italic;"><i>GroundWork Monitor</i></span> server.</p>
<h4><a name="MiniTOCBookMark5" id="MiniTOCBookMark5"></a>Define the Login Account</h4>
<p>All of the <span style="font-style: italic;"><i>SSH</i></span>-based command definitions in <span style="font-style: italic;"><i>GroundWork Monitor</i></span> use the username stored in the <span style="font-weight: bold;"><b>user17</b></span> <span style="font-style: italic;"><i>Nagios</i></span> macro definition for remote login purposes. The default value for this macro assignment is <span style="font-weight: bold;"><b>nagios</b></span> although any username can be used.</p>
<p>If you wish to define a different username, perform the following steps:</p>
<ol>
<li class="p-Numbering">
<p class="Numbering">Open the <span style="font-weight: bold;"><b>Configuration</b></span> page.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <span style="font-weight: bold;"><b>Control</b></span>.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <span style="font-weight: bold;"><b>Nagios resource macros</b></span>.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">In the list of <span style="font-style: italic;"><i>Nagios Resource Macros</i></span> in the main window, select the checkbox next to the <span style="font-style: italic;"><i>user17</i></span> entry, which will cause the main window to be reloaded with the <span style="font-style: italic;"><i>user17</i></span> macro in an edit field at the top.</p>
</li>
</ol>
<ol start="5" type="1">
<li class="p-Numbering">
<p class="Numbering">Change the value of the <span style="font-style: italic;"><i>user17</i></span> macro to the desired username value, and select the <span style="font-weight: bold;"><b>Update</b></span> button.</p>
</li>
</ol>
<p>Once the <span style="font-style: italic;"><i>Nagios</i></span> configuration has been saved and committed, the new username will be used for all subsequent <span style="font-style: italic;"><i>SSH</i></span> service definitions that reference the <span style="font-style: italic;"><i>user17</i></span> macro.</p>
<p class="Caption">Figure: Nagios Resource Macros</p>
<p class="Figure"><img src="../Assets/profiles_sshmonitoring.gif" alt="profiles_sshmonitoring.gif" style="border: none;" width="700" height="496" border="0" /></p>
<h4><a name="MiniTOCBookMark6" id="MiniTOCBookMark6"></a>Create the Login Accounts</h4>
<p>The <span style="font-style: italic;"><i>SSH</i></span> username must have a corresponding user account on each machine that will be used for monitoring purposes. If the user account does not already exist, it must be created before that system can be accessed by the <span style="font-style: italic;"><i>Nagios</i></span> SSH plug-in.</p>
<p>User account management routines are platform-specific, so you should refer to your system documentation for information on how to create a new user. The username assigned to the account must be identical to the username specified in the <span style="font-style: italic;"><i>user17</i></span> <span style="font-style: italic;"><i>Nagios</i></span> macro (the default is <span style="font-style: italic;"><i>nagios</i></span>), and must also have a home directory that can store the SSH configuration directory and public key.</p>
<p>Most modern Linux systems typically use the following sequence of commands:</p>
<ol>
<li class="p-Numbering">
<p class="Numbering">Login to the target system with an administrative account, such as <span class="CodeInline">root</span>.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Create the <span style="font-style: italic;"><i>Nagios</i></span> user account, requesting that the user's home directory also be created. With the default username of <span class="CodeInline">nagios</span>, the command would be <span class="CodeInline">useradd -m nagios</span>.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Verify that the user's home directory is owned by the new user account, and has permissions that let the user read, write, and enter the directory. For example, if the user's home directory is <span class="CodeInline">/home/nagios</span>, the <span class="CodeInline">ls -lad /home/nagios</span> command should show that the directory is owned by <span class="CodeInline">nagios</span>, with <span class="CodeInline">rwx</span> permissions for the owner:</p>
</li>
</ol>
<p class="GroupCode2">$ ls -lad /home/nagios</p>
<p class="GroupCode2">drwxr-x--- &#160;9 nagios Users 512 Apr 26 &#160;2007 /home/nagios</p>
<p class="Numbering" style="margin-left: 40px;">Some level of access for the account's primary group are often allowed, and this is typically a matter of local administrative policy. However, some <span style="font-style: italic;"><i>SSH</i></span> servers are known to prohibit logins for accounts with insufficiently secure home directories (refer to your system's sshd documentation for details).</p>
<ol start="4" type="1">
<li class="p-Numbering">
<p class="Numbering">You should assign a password for the user account to prevent unwanted access, although a password is not used by the <span style="font-style: italic;"><i>SSH</i></span> public-key authentication mechanism. The command to assign a password to the default <span class="CodeInline">nagios</span> username would be <span class="CodeInline">passwd nagios</span>, which would then prompt for a new user password.</p>
</li>
</ol>
<p>Once the user account has been created and enabled, verify that the user is able to login to the system with the assigned password, and that the user is able to create and edit files in their home directory.</p>
<h4><a name="MiniTOCBookMark7" id="MiniTOCBookMark7"></a>Configure Public Key Authentication</h4>
<p><span style="font-style: italic;"><i>SSH</i></span> supports several different mechanisms for authenticating user logins, including the use of traditional password authentication. However, the <span style="font-style: italic;"><i>Nagios</i></span> <span style="font-style: italic;"><i>SSH</i></span> plug-in cannot use password authentication, since password prompts interfere with remote command execution. In order to use the SSH plug-in with Nagios, you must configure the associated user account for public-key authentication.</p>
<p>Public-key authentication uses two pieces of data to authenticate a user account. First, the <span style="font-style: italic;"><i>SSH</i></span> client maintains a file that contains the user account's private key, which it presents to the <span style="font-style: italic;"><i>SSH</i></span> server during the authentication process. Meanwhile, the <span style="font-style: italic;"><i>SSH</i></span> server looks for a public key in the <span style="font-style: italic;"><i>SSH</i></span> subdirectory of the specified user's home directory, and uses the private key to decrypt the contents of the public key. If the decryption operation succeeds, the user is allowed to login with the specified account, under the assumption that possession of the private key has been authorized.</p>
<p>This model allows a user to login to a system without typing or transmitting their password. This is important, since password authentication would require that the <span style="font-style: italic;"><i>SSH</i></span> plug-in be able to read it, which in turn would require that the password be stored somewhere as clear-text data. By using public-key authentication, the encrypted private key can be stored on disk and used as needed, without exposing the account's actual password.</p>
<p>Several steps are required in order for this to process work correctly, itemized below:</p>
<ol>
<li class="p-Numbering">
<p class="Numbering">Login to the remote system with an administrative account such as <span class="CodeInline">root</span>, and verify that the <span style="font-style: italic;"><i>SSH</i></span> server has public key authentication enabled. <span style="font-style: italic;"><i>SSH</i></span> server configuration mechanisms are system-specific, so you may need to review your system documentation for more information. Most Linux systems use the open source <span style="font-style: italic;"><i>OpenSSH</i></span> package, which typically uses a configuration file named <span class="CodeInline">sshd_config</span>, although its location will often vary by distribution. Most Linux distributions with OpenSSH also have public key authentication enabled by default, but if you need to specifically enable it you can do so by changing or adding a <span class="CodeInline">PubkeyAuthentication</span> configuration directive with value of <span class="CodeInline">yes</span>. You will need to restart the <span style="font-style: italic;"><i>SSH</i></span> server if this directive is modified.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Now you need to create the public and private key-pair for the <span style="font-style: italic;"><i>Nagios SSH</i></span> plug-in to use. Login to the <span style="font-style: italic;"><i>GroundWork Monitor</i></span> server system with a system administrator account such as <span class="CodeInline">root</span>, and then change credentials to the local <span class="CodeInline">nagios</span> account, using the command <span class="CodeInline">su nagios</span>.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Change to the <span class="CodeInline">nagios</span> account's home directory, using the command <span class="CodeInline">cd ~</span>.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Execute the command <span class="CodeInline">ssh-keygen -t dsa -b 2048</span>. This will generate a 2048-bit DSA key-pair in the <span class="CodeInline">.ssh</span> subdirectory under the <span class="CodeInline">nagios</span> account's home directory. These files will be called <span class="CodeInline">id_dsa</span> (the private key), and <span class="CodeInline">id_dsa.pub</span> (the public key).</p>
</li>
</ol>
<p class="Numbering" style="margin-left: 40px;">The private key file will be used to request and prove user authorization in all subsequent <span style="font-style: italic;"><i>SSH</i></span> connection requests, and as such must be carefully secured. This file will usually be created with very strict permissions that only allow the owner to read and write the file, and some <span style="font-style: italic;"><i>SSH</i></span> clients will even refuse to use the private key if the file has overly lax permission. Since this file is only needed to request authentication, and is not used to grant access, this file does not need to leave its current location or have its permissions modified. On the other hand, however, the public key will be used to grant authorization requests, and as such that contents of the public key file must be added to each remote system that will be used with the <span style="font-style: italic;"><i>Nagios SSH</i></span> plug-in.</p>
<ol start="5">
<li class="p-Numbering">
<p class="Numbering">On UNIX systems that use version 3 of the <span style="font-style: italic;"><i>OpenSSH</i></span> server, a user's public keys are stored in a file called <span class="CodeInline">authorized_keys</span> that is located in the <span class="CodeInline">.ssh</span> subdirectory under their home directory (other servers and versions may have different repository mechanisms). In order to allow the <span style="font-style: italic;"><i>Nagios SSH</i></span> plug-in to successfully authenticate with each remote server, the contents of the <span class="CodeInline">id_dsa.pub</span> file created in the preceding step must be added to the <span style="font-style: italic;"><i>Nagios</i></span> user's <span class="CodeInline">authorized_keys</span> file on each target system.</p>
</li>
</ol>
<p class="Numbering" style="margin-left: 40px;">Note that the public key data can be copied into the <span class="CodeInline">authorized_keys</span> file using any means available, but you must be careful to avoid adding any extra characters such as line feeds or carriage returns</p>
<p class="Numbering" style="margin-left: 40px;">Once the <span class="CodeInline">authorized_keys</span> file has been updated, verify that the specified user account still owns the file, and still has sufficient permissions to the file, using the <span class="CodeInline">ls -la ~/.ssh/authorized_keys</span> command.</p>
<p class="GroupCode2">$ ls -la ~/.ssh/authorized_keys</p>
<p class="GroupCode2">-rw-r--r-- &#160;1 nagios Users 604 Apr 26 &#160;2007 /home/nagios/.ssh/authorized_keys</p>
<p class="Numbering" style="margin-left: 40px;">Note that group and world file permissions are not as important on this file as they are for the private keys, since it only contains public key data which is harmless by itself. Users cannot use this file to obtain access to other systems, or to learn any secrets about the user account. In fact, some <span style="font-style: italic;"><i>SSH</i></span> servers may even require the file to be world-readable in order for the server itself to be able to access its contents.</p>
<ol start="6" type="1">
<li class="p-Numbering">
<p class="Numbering">Return to the <span style="font-style: italic;"><i>GroundWork Monitor</i></span> server, and switch to the <span class="CodeInline">nagios</span> user account with the command <span class="CodeInline">su nagios</span>. Verify that the user is able to use <span style="font-style: italic;"><i>SSH</i></span> to login to the correct account on the remote host, and that no passwords are exchanged during this process.</p>
</li>
</ol>
<p>Once the steps above have been successfully completed, the <span style="font-style: italic;"><i>Nagios SSH</i></span> plug-in should be able to seamlessly login to any target host that has the correct username and public key file. From this point forward, you will only need to be concerned with maintaining the key files themselves, and you can even change the passwords on the individual systems to random strings if you want, since they will not be needed by the plug-in. Additional measures for further tightening access to the SSH plug-in are discussed here <a href="http://www.linuxjournal.com/article/8759">http://www.linuxjournal.com/article/8759</a>, if higher levels of security are needed or desired.</p>
<h4><a name="MiniTOCBookMark8" id="MiniTOCBookMark8"></a>Managing the Remote Commands</h4>
<p>When <span style="font-style: italic;"><i>Nagios</i></span> issues a command on a remote server, it tries to ensure that the correct command is being called by looking for in a specific subdirectory under the primary user account's home directory. In order to ensure that the default set of <span style="font-style: italic;"><i>SSH</i></span> service definitions function as expected, it is necessary to ensure that these commands are copied into the appropriate subdirectory on the remote hosts. By default, this subdirectory is specified in the <span style="font-style: italic;"><i>Nagios</i></span> <span style="font-style: italic;"><i>user22</i></span> macro definition, with the value of <span style="font-style: italic;"><i>libexec</i></span>.</p>
<p>If the target host platform runs a nearly identical version of Linux and has the same processing architecture as the platform that is running the <span style="font-style: italic;"><i>GroundWork Monitor</i></span> server, then you can simply copy the contents of the local command directory to the appropriate target system by executing the following commands:</p>
<ol>
<li class="p-Numbering">
<p class="Numbering">Login to the <span style="font-style: italic;"><i>GroundWork</i></span> server and switch to the <span class="CodeInline">nagios</span> user account by using the <span class="CodeInline">su nagios</span> command.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Copy the entire <span class="CodeInline">/usr/local/groundwork/nagios/libexec</span> subdirectory to the target host with the command <span class="CodeInline">scp -pr /usr/local/groundwork/nagios/libexec destination:~</span>, where destination is the IP address or hostname of the target system. The tilde character indicates that the input directory should be copied into the user's home directory, which will result in the creation of a <span class="CodeInline">libexec</span> subdirectory under the user's home directory.</p>
</li>
</ol>
<p>If the operating system and/or processor architecture of the target host is different from the <span style="font-style: italic;"><i>GroundWork</i></span> server platform, you will need to download the correct set of <span style="font-style: italic;"><i>Nagios</i></span> commands from <span style="font-style: italic;"><i>Nagios Exchange</i></span> <a href="http://www.nagiosexchange.org/">http://www.nagiosexchange.org/</a>, and install them on the target host system. Make sure to put them into the <span class="CodeInline">libexec</span> directory under the <span style="font-style: italic;"><i>SSH</i></span> user account's home directory, and make sure that account has sufficient permission to execute the programs.</p>
<p>Once all the files have been put into the correct directory on the target host, you can verify that they will work as expected by logging into the groundwork server under the <span style="font-style: italic;"><i>Nagios SSH</i></span> account, and then providing one of the remote commands as a parameter to an ssh command. This will cause the <span style="font-style: italic;"><i>SSH</i></span> client to login to the remote host with the current user's credentials, execute the specified command, display any output that was returned and then close the <span style="font-style: italic;"><i>SSH</i></span> session. For example, the following command will look at the amount of free swap space in use on the destination host, and generate a warning if there are less than 100 bytes of free space, or generate a critical error if there are less than 50 bytes of free space:</p>
<p class="GroupCode2">nagios$ ssh destination libexec/check_swap -w 100 -c 50</p>
<p class="GroupCode2">SWAP OK - 100% free (1349 MB out of 1349 MB) |swap=1349MB;0;0;0;1349</p>
<p>If this command completes successfully, the <span style="font-style: italic;"><i>Nagios SSH</i></span> plug-in commands should also be able to work as expected.</p>
<p>Note that the Perl scripts in the <span class="CodeInline">libexec</span> directory are configured to use a Perl interpreter that is expected to be located in <span class="CodeInline">/usr/local/groundwork/bin</span>, but that directory will not exist on the remote machine by default. You may need to update the Perl scripts to use a different interpreter, or create a symbolic link from an existing Perl interpreter to that directory so that one will be located.</p>
<div style="width: 100%; position: relative;" id="footer">
<p class="Footer" style="font-size: 7pt; line-height: Normal; margin-top: 6pt; margin-bottom: 4pt;">GroundWork, Inc. ©2011</p>
</div>
<script type="text/javascript" language="javascript1.2">
//<![CDATA[
<!--
if (window.writeIntopicBar)
        writeIntopicBar(0);


highlightSearch();
//-->
//]]>
</script>
</body>
</html>
