<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Adobe RoboHelp 8" />
<title>SNMP Trap Processing</title>
<link rel="StyleSheet" href="../Bookshelf.css" type="text/css" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
        origWidth = innerWidth;
        origHeight = innerHeight;
        onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
/*<![CDATA[*/
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
-->
/*]]>*/
</style>

<script type="text/javascript" language="javascript1.2" src="../whmsg.js">
</script>
<script type="text/javascript" language="javascript" src="../whver.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../whproxy.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../whutils.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../whlang.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../whtopic.js">
</script>
</head>
<body>
<script type="text/javascript" language="javascript1.2">
//<![CDATA[
<!--
if (window.gbWhTopic)
{
        var strUrl = document.location.href;
        var bc = 0;
        var n = strUrl.toLowerCase().indexOf("bc-");
        if(n != -1)
        {
                document.location.href = strUrl.substring(0, n);
                bc = strUrl.substring(n+3);
        }

        if (window.addTocInfo)
        {
        addTocInfo("MESSAGE PROCESSING\nSNMP Trap Messages");
addButton("show",BTN_TEXT,"Show Table of Contents","","","","",0,0,"","","");

        }
        if (window.writeBtnStyle)
                writeBtnStyle();

        if (window.writeIntopicBar)
                writeIntopicBar(1);

        
        

        if (window.setRelStartPage)
        {
        setRelStartPage("../Bookshelf.htm");

                autoSync(0);
                sendSyncInfo();
                sendAveInfoOut();
        }
}
else
        if (window.gbIE4)
                document.location.reload();

//-->
//]]>
</script><script type="text/javascript" language="JavaScript1.2" src="../ehlpdhtm.js">
</script><script type="text/javascript" language="javascript">
//<![CDATA[
document.write("<p  style=\"text-align:right;color:#0000ff;font-family:Arial;font-size:7pt;font-weight: normal;font-style: normal;text-decoration: none;\">");
AddMasterBreadcrumbs("../Bookshelf.htm", "color:#0000ff;font-family:Arial;font-size:7pt;font-weight: normal;font-style: normal;text-decoration: none;", "&gt;", "Home", "../Welcome_to_GroundWork_Monitor/index.htm");
document.write("<a style=\"color:#0000ff;font-family:Arial;font-size:7pt;font-weight: normal;font-style: normal;text-decoration: none;\" href=\"messageprocessing_aboutmessageprocessing.htm\">MESSAGE PROCESSING<\/a> &gt; SNMP Trap Messages<\/p>");
//]]>
</script>
<p>&#160;</p>
<h1><a name="MiniTOCBookMark1" id="MiniTOCBookMark1"></a><img src="../Shared_Images/square.gif" alt="square.gif" style="border: none;" width="15" height="15" border="0" /> Message Processing</h1>
<h3 align="right"><a href="messageprocessing_aboutmessageprocessing.htm"><img src="../Shared_Images/homeicon.gif" alt="homeicon.gif" style="border: none;" width="33" height="27" border="0" /></a> <img src="../Shared_Images/printicon.gif" onclick="window.print()" alt="Print Page" title="Print Page" style="border: none;" width="31" height="27" border="0" /> <a href="mailto:support@groundworkopensource.com?subject=SNMP Traps" title="Send Comments"><img src="../Shared_Images/commentsicon.gif" alt="commentsicon.gif" style="border: none;" width="33" height="27" border="0" /></a></h3>
<h2><a name="MiniTOCBookMark2" id="MiniTOCBookMark2"></a>SNMP Trap Messages</h2>
<p align="left">Table&#160;of&#160;Contents:&#160;<a class="dropspot" href="javascript:TextPopup(this)" id="MTHotSpot24994" name="MTHotSpot24994"><span class="MTText">Show</span><span class="MTText" style="display: none;">Hide</span></a></p>
<script type="text/javascript" language="JavaScript1.2">
//<![CDATA[
TextPopupInit('MTHotSpot24994', 'MTPOPUP24994');
//]]>
</script>
<div align="left" class="droptext" id="MTPOPUP24994" style="display: none;">
<ul style="text-align:left; list-style-type: circle;">
<li><a href="#MiniTOCBookMark3">SNMP Trap Messages Overview</a></li>
<li><a href="#MiniTOCBookMark6">The SNMP Trap Software Architecture</a></li>
<li><a href="#MiniTOCBookMark7">The SNMP Trap Listener</a></li>
<li><a href="#MiniTOCBookMark8">The SNMP Trap Translator</a></li>
<li><a href="#MiniTOCBookMark9">GroundWork Foundation SNMP Trap Adapter</a></li>
<li><a href="#MiniTOCBookMark10">The Nagios SNMP Trap Handler</a></li>
<li><a href="#MiniTOCBookMark11">Adding New Trap Definitions</a></li>
<li><a href="#MiniTOCBookMark12">Resolving MIB Dependencies</a></li>
<li><a href="#MiniTOCBookMark14">Verifying MIB Syntax</a></li>
</ul>
</div>
<h3><a name="MiniTOCBookMark3" id="MiniTOCBookMark3"></a>SNMP Trap Messages Overview</h3>
<h4><a name="MiniTOCBookMark4" id="MiniTOCBookMark4"></a>Support for SNMP Polling</h4>
<p><span style="font-style: italic;"><i>GroundWork Monitor</i></span> offers direct support for SNMP polling and SNMP traps.</p>
<p>In simple terms, SNMP polling allows <span style="font-style: italic;"><i>GroundWork Monitor</i></span> to query network devices for common operational statistics such as memory usage and network traffic levels, while SNMP traps allow the network devices to unilaterally notify <span style="font-style: italic;"><i>GroundWork Monitor</i></span> of critical events whenever they occur.</p>
<p>For example, SNMP polling can be used to read the current disk utilization levels on a device every few hours, with this data being used to monitor or chart long-term consumption trends, and possibly being used to generate an alarm if the usage levels are determined to be abnormal. However, if a critical disk shortage suddenly appears in between these polling intervals, this usage scenario could allow the disk shortage to go undetected for several hours. In that kind of situation, the struggling device would best be served if it could unilaterally transmit an SNMP trap message that indicated the error condition immediately.</p>
<h4><a name="MiniTOCBookMark5" id="MiniTOCBookMark5"></a>How this Works</h4>
<p>All SNMP messages are transported by using the User Datagram Protocol (UDP), and this includes SNMP queries and unsolicited trap messages alike. The use of UDP as a transport protocol has several advantages, but it also imposes fairly strict restrictions on the size of the message that can be sent. In order to ensure that an SNMP message will fit within the size constraints, the SNMP protocol uses a variety of encoding and compression techniques that keep the messages relatively small. However, this also means that the messages themselves are binary, and are not readily decipherable with the naked eye.</p>
<p>In particular, SNMP messages do not contain the full text message associated with an event, but instead uses a message ID that is uniquely associated with the underlying message. Meanwhile, information about the event (such as the severity of the event, and the full-text string message) is stored in a dictionary file called a Management Information Base (MIB), which is independently maintained by the message receiver. This model allows the sending station to simply provide the ID value in the original message, while leaving it to the receiver to map the ID value to an actual event message that can be displayed to a human operator.</p>
<p>For example, an SNMP management station might record an event that says "Link up on interface 2" after a network interface has come online. However, the underlying SNMP message will only contain the fixed identifier value for that event - along with the variable value for the interface that just became active - but does not contain the full "Link up" text message. Instead, the trap sender expects that the recipient system will be able to associate the code value with a local MIB and display the correct message, with the variable data being substituted into the proper location.</p>
<p>Along the same lines, SNMP messages are also able to refer to object IDs outside their own scope, as long as the other IDs are correctly referenced in the dictionary. For example, the numeric value for the "Link up on interface 2" message discussed above uses a numerical syntax that is described in the generic standard messages. As such, the trap dictionary for this event does not need to define the syntax rules for that variable value, but instead can simply reference the parent definition.</p>
<p>Taken as a whole, this approach allows the messages and dictionary files to be very small and efficient, but it also results in making the message data opaque to human users. Therefore, in order for the data to be usable by a human, this model requires that the SNMP management station maintain a dictionary of trap messages and their ID assignments, with the incoming messages being mapped to their full-text event message, with the message variable data being decoded and applied where needed.</p>
<h3><a name="MiniTOCBookMark6" id="MiniTOCBookMark6"></a>The SNMP Trap Software Architecture</h3>
<p>By default, <span style="font-style: italic;"><i>GroundWork Monitor</i></span> provide a basic SNMP trap handler that captures a handful of common messages, which are then stored in the <span style="font-style: italic;"><i>GroundWork Foundation</i></span> database for viewing through various applications, and which are also fed to Nagios for the purpose of triggering notification messages.</p>
<p>More specifically, <span style="font-style: italic;"><i>GroundWork Monitor</i></span> uses the following components to receive, process, and store SNMP trap messages as they arrive from the network:</p>
<ul style="list-style: url('../Shared_Images/bullet01.gif');">
<li class="p-Bullet1">
<p class="Bullet1">Incoming SNMP traps are received by the <span class="CodeInline">snmptrapd</span> daemon that is provided with the Net-SNMP software package. <span class="CodeInline">snmptrapd</span> provides the network listener that is needed to receive incoming SNMP trap messages from the network.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Once a trap message has been received, <span class="CodeInline">snmptrapd</span> passes the incoming message to the <span class="CodeInline">snmptthandler</span> program that is part of the SNMP Trap Translator software package, which in turn dumps the trap message into a spool file. This allows <span class="CodeInline">snmptrapd</span> to dispose of the messages quickly.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Periodically, the <span class="CodeInline">snmptt</span> daemon included with the SNMP Trap Translator package examines the spool file for new trap messages, converts them into structured text, and then simultaneously passes the output to the <span style="font-style: italic;"><i>GroundWork Foundation</i></span> database and the Nagios NSCA passive interface. This conversion process allows the SNMP messages to be processed the same as other kinds of textual event messages.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Trap messages that are received by the Foundation database listener are correlated with the original host device and then recorded as SNMPTRAP event messages. Once the database has been updated, the trap data can be displayed by the operator using the global Event Viewer or the host-specific Status applets.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Meanwhile, trap messages that are received by Nagios through the NSCA interface are stored in the Nagios command file until the next check interval. When these passive checks are subsequently processed by Nagios, the incoming messages will be correlated with the original host device and processed as events for the <span class="CodeInline">snmptraps_last</span> service associated with that host. From there, the messages can then be used to perform whatever actions are available in Nagios, such as generating notification messages.</p>
</li>
</ul>
<p>Taken as a whole, this design allows <span style="font-style: italic;"><i>GroundWork Monitor</i></span> to perform as a comprehensive SNMP monitoring and management station, once the individual software components have been configured.</p>
<p>Note that prior versions of GroundWork Monitor <span style="font-style: italic;"><i>Professional</i></span> used a somewhat different architecture with different software components. If the SNMP trap support from a previous version of <span style="font-style: italic;"><i>GroundWork Monitor</i></span> is already in use, the older configuration files will need to be converted before those customizations will perform correctly with version 5.2 and beyond. <span style="font-style: italic;"><i>GroundWork Monitor</i></span> provides a conversion script in <span class="CodeInline">/usr/local/groundwork/tools/snmp_mibs/upgrade_snmptt_conf.sh</span> that will perform this process somewhat automatically.</p>
<h3><a name="MiniTOCBookMark7" id="MiniTOCBookMark7"></a>The SNMP Trap Listener</h3>
<p><span style="font-style: italic;"><i>GroundWork Monitor</i></span> incorporates the full Net-SNMP software package, including the <span class="CodeInline">snmptrapd</span> daemon that monitors for incoming trap messages on UDP port 162. <span class="CodeInline">snmptrapd</span> is enabled by default, and will be automatically started after installation.</p>
<p>Note that <span style="font-style: italic;"><i>GroundWork Monitor</i></span> does not provide a dedicated startup script for <span class="CodeInline">snmptrapd</span>, but instead starts the daemon as part of the <span class="CodeInline">/etc/init.d/snmptt</span> startup script that is used to initialize the SNMPTT service. If you ever need to restart the <span class="CodeInline">snmptrapd</span> daemon, you should use that control script.</p>
<p>Only one SNMP listener can be active on the default port for a network interface, so if you are already using another trap listener for some other purpose you will need to either configure the listeners to use separate network interfaces or port numbers, or integrate the configuration files together (if you are already using <span class="CodeInline">snmptrapd</span> from another source, then you may be able to simply merge the configuration files).</p>
<p>The configuration settings for the <span class="CodeInline">snmptrapd</span> daemon bundled with <span style="font-style: italic;"><i>GroundWork Monitor</i></span> are stored in <span class="CodeInline">/usr/local/groundwork/etc/snmp/snmptrapd.conf</span>. The default configuration file contains the minimum directives that are needed to capture SNMP traps and pass them to <span class="CodeInline">snmptthandler</span> for processing, but additional configuration directives may also be added if they are needed.</p>
<p>Note that the default configuration file does not define any filters, so all incoming trap messages will be intercepted in the default setup. If you need to limit SNMP trap handling to specific hosts or a particular SNMP community, you will need to edit this configuration file accordingly. Otherwise, you can simply instruct your network devices to begin sending SNMP traps to the <span style="font-style: italic;"><i>GroundWork Monitor</i></span> server, and the messages will immediately be received and processed without any local configuration required.</p>
<h3><a name="MiniTOCBookMark8" id="MiniTOCBookMark8"></a>The SNMP Trap Translator</h3>
<p>The raw form of an SNMP trap message uses an opaque binary syntax that is not directly usable by <span style="font-style: italic;"><i>GroundWork Monitor</i></span> or <span style="font-style: italic;"><i>Nagios</i></span>. For that reason, <span style="font-style: italic;"><i>GroundWork Monitor</i></span> relies on the open source <span style="font-style: italic;"><i>SNMP Trap Translator (SNMPTT)</i></span> package to convert the raw SNMP traps into structured textual messages that can be manipulated more easily.</p>
<p>Specifically, <span class="CodeInline">snmptrapd</span> passes incoming SNMP traps to a program called <span class="CodeInline">snmptthandler</span>, which in turn stores the trap messages into an incoming spool file. Every few seconds, an independent <span class="CodeInline">snmptt</span> daemon reads the spool file for new trap messages, converts the messages into structured text, and then passes the output to the GroundWork Foundation database and the Nagios NSCA agent through the appropriate local interfaces.</p>
<p><span class="CodeInline">snmptt</span> uses multiple configuration files to determine how trap messages should be converted and relayed. First and foremost, <span class="CodeInline">/usr/local/groundwork/etc/snmp/snmptt.ini</span> contains the global options that are needed for the snmptt daemon to operate as expected (such as database connection and logging options), and also contains pointers to subordinate trap-specific configuration files that tell the <span class="CodeInline">snmptt</span> daemon how to dispose of specific trap messages.</p>
<p>The actual translation and disposal process is controlled by trap-specific configuration files. For example, <span class="CodeInline">/usr/local/groundwork/etc/snmp/snmptt.conf</span> contains the processing directives for a handful of universal SNMP trap messages, and GroundWork Monitor also includes pre-defined translation files for a few specific devices which are typically stored in their own configuration files (the <span class="CodeInline">CISCO-GENERAL-TRAPS.conf</span> configuration file contains mapping information for SNMP traps that are commonly found with Cisco network equipment, and so forth). Each of these translation-specific configuration files are already listed in the <span class="CodeInline">snmptt.ini</span> control file, and will be used to process the corresponding SNMP trap messages.</p>
<p>If you need to capture the full trap message and severity details for SNMP traps that are not already defined, you must extract this information from the appropriate SNMP MIB files and add the trap messages to one of the control files (along with information that tells the <span class="CodeInline">snmptt</span> daemon where to send the messages). <span style="font-style: italic;"><i>GroundWork Monitor</i></span> provides a variety of tools to simplify and automate portions of this process, although some manual intervention is also usually required. Refer to the Adding New Trap Definitions section below for information on how to add new trap translation definitions.</p>
<h3><a name="MiniTOCBookMark9" id="MiniTOCBookMark9"></a>GroundWork Foundation SNMP Trap Adapter</h3>
<p>When the <span class="CodeInline">snmptt</span> daemon needs to pass a converted trap message to the <span style="font-style: italic;"><i>GroundWork Foundation</i></span> event database, it passes the output to the Foundation network listener on TCP port 4913 on the loopback interface (127.0.0.1), and flags the data as an SNMPTRAP event with an appropriate severity level. In turn, the SNMPTRAP Foundation adapter examines the data and adds the event to the <span style="font-style: italic;"><i>GroundWork Foundation</i></span> LogMessage database table.</p>
<p>Note that <span class="CodeInline">snmptt</span> is configured by default to send all trap messages to the <span style="font-style: italic;"><i>GroundWork Foundation</i></span> listener, including unknown SNMP trap messages that have not been listed in <span class="CodeInline">snmptt.ini</span> or a subordinate configuration file. These messages will be shown with an "unknown" severity level, and will show "unknown trap" in the message text. Refer to the Adding New Traps section below for information on adding new trap definitions to the snmptt configuration.</p>
<p>By default, the SNMPTRAP adapter will consolidate duplicate event messages that are received in sequence. If a trap event arrives that matches the consolidation criteria, the duplicate event message is discarded, the "count" field of the existing record is incremented, and the "last insert date" field is updated. Specifically, the consolidation feature looks at the following fields to determine if a record is a duplicate, and if all fields match then the duplicate is discarded:</p>
<ul style="list-style: url('../Shared_Images/bullet01.gif');">
<li class="p-Bullet1">
<p class="Bullet1">OperationStatus</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Host</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Severity</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">IP Address</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">MonitorStatus</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Event_OID_numeric</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Event_Name</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Category</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Variable_Bindings</p>
</li>
</ul>
<p>An exception to the above is if the Monitoring Status of the last event is different than the Monitoring Status of the incoming event. In that scenario, a new event message will be created. This rule guarantees that console messages sorted by chronological order will always show the current status above previous status.</p>
<p>You can disable trap consolidation if you wish (thereby having a new event record be created for every SNMP trap). You can also change the fields that are used for the consolidation service if needed. The fields that are used for the consolidation function are stored in the SNMPTRAP entry of the ConsolidationCriteria table of the GWCollageDB database.</p>
<p>Once the event records have been inserted into the event database, the trap messages can be viewed from the <span style="font-style: italic;"><i>Event Console</i></span> application (selecting the SNMPTRAP option in the left navigation tree will display only SNMP trap events, and filter out other messages). Recent SNMP trap messages that have been correlated with a host can also be viewed in the Status application by selecting that host and looking under the "Console" portion of the host status screen.</p>
<h3><a name="MiniTOCBookMark10" id="MiniTOCBookMark10"></a>The Nagios SNMP Trap Handler</h3>
<p>The <span class="CodeInline">snmptt</span> daemon also passes incoming trap data to Nagios via the NSCA passive interface on TCP port 5667 on the loopback interface (127.0.0.1), and flags the data as a passive check result for the <span class="CodeInline">snmptraps_last</span> service on the originating host. From there, Nagios will periodically process the incoming passive check queue and attempt to correlate the incoming events with the <span class="CodeInline">snmptraps_last</span> service definition associated with the originating host.</p>
<p>More specifically, the <span class="CodeInline">snmptt</span> daemon provides the translated trap message, and also provides the Nagios-specific result codes that indicate whether the trap is benign, a warning, a critical event, or an unknown message. In turn, Nagios is able to use the trap severity to determine when to initiate notifications and perform other actions, and can also display the trap text in the service status field.</p>
<p>Note that <span class="CodeInline">snmptt</span> is configured by default to send all trap messages to the NSCA listener, including unknown SNMP trap messages that have not been listed in <span class="CodeInline">snmptt.ini</span> or a subordinate configuration file. These messages will be shown with an "unknown" severity level, and will show "unknown trap" in the message text. Refer to the Adding New Traps section below for information on adding new trap definitions to the <span class="CodeInline">snmptt</span> configuration.</p>
<p>In order for this process to work, the Nagios NSCA passive interface must be active, the originating host must be defined in Nagios, and the originating host entry must have the <span class="CodeInline">snmptraps_last</span> service definition associated with it.</p>
<p>Note that the Nagios NSCA passive check interface is not active by default, and must be started before the SNMP trap messages can be received. The <span class="CodeInline">/etc/init.d/nsca init</span> script is provided for this purpose. This init script should be included with the system init scripts if the NSCA service will always be needed.</p>
<p>Also note that the <span class="CodeInline">snmptraps_last</span> service definition is not included in the default set of Nagios service definitions, although the associated service profile is provided with <span style="font-style: italic;"><i>GroundWork Monitor</i></span>. To use this service definition, perform the following steps:</p>
<ol>
<li class="p-Numbering">
<p class="Numbering">Select the <span style="font-weight: bold;"><b>Configuration</b></span> application from the main <span style="font-style: italic;"><i>GroundWork Monitor</i></span> menu.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <span style="font-weight: bold;"><b>Profiles</b></span>.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <span style="font-weight: bold;"><b>Profile Importer</b></span>. This will result in a list of all of the available host and service profiles being displayed in the main window.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Locate the entry for <span class="CodeInline">service-profile-snmp-traps.xml</span> in the list of available profiles, and activate the checkbox next to it.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Scroll to the bottom of the main window, and click the <span style="font-weight: bold;"><b>Import</b></span> button. This will result in the <span class="CodeInline">snmptraps_last</span> service definition being installed into the current configuration.</p>
</li>
</ol>
<p>Once the above steps have been completed, the <span class="CodeInline">snmptraps_last</span> service definition will be available for use, and can be associated with any defined host.</p>
<h3><a name="MiniTOCBookMark11" id="MiniTOCBookMark11"></a>Adding New Trap Definitions</h3>
<p>As was discussed earlier, the SNMP Trap Translator toolkit is responsible for converting the incoming binary trap messages into structured text, and for passing the decoded messages to the Foundation database and the Nagios NSCA passive interface. When this has been properly configured, the <span class="CodeInline">snmptt</span> daemon is able to generate the correct fully-formed textual message, and can also associate an appropriate severity level for a trap message. However, the SNMP Trap Translator is only preconfigured for a few common trap messages, and in all other cases the <span class="CodeInline">snmptt</span> daemon will not be able to provide an appropriate severity level, nor will it be able to provide a meaningful status text message (it will use a generic "unknown" trap message instead).</p>
<p>If you need to capture the full trap message and severity details for SNMP traps that are not already defined, you must extract this information from the appropriate SNMP MIB files and add the trap messages to one of the control files (along with information that tells the <span class="CodeInline">snmptt</span> daemon where to send the messages). <span style="font-style: italic;"><i>GroundWork Monitor</i></span> provides a variety of tools to simplify and automate portions of this process, although some manual intervention is also usually required.</p>
<p>In particular, the <span class="CodeInline">/usr/local/groundwork/tools/snmp_mibs/convert_mib.sh</span> script will read through a specified MIB file and locate any trap definitions contained therein. If there are no problems with the MIB file (such as unsatisfied dependencies or syntax errors), the <span class="CodeInline">convert_mib.sh</span> script will create a local <span class="CodeInline">.conf</span> file for use with <span class="CodeInline">snmptt</span> that contains all of the trap definitions and the options that are needed for <span class="CodeInline">snmptt</span> to correctly process and relay those trap messages. From there, the output .conf file can be added to the <span class="CodeInline">snmptt.ini</span> control file, and the new trap messages will be processed after the snmptt daemon has been reinitialized. However, if the original MIB file cannot be converted (possibly due to unsatisfied dependencies or syntax errors), additional steps will need to be taken before the SNMP traps can be captured.</p>
<ol>
<li class="p-Numbering">
<p class="Numbering">The first step in this process is to locate the SNMP MIB file that contains the trap messages you want to capture and convert. Most equipment vendors provide the necessary MIB files with their installation software. There are also a variety of third-party MIB repositories across the Internet that can be helpful for locating MIB files.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Once the MIB file has been obtained, use the <span class="CodeInline">/usr/local/groundwork/tools/snmp_mibs/convert_mib.sh</span> script to automatically convert it into a snmptt configuration file by specifying the MIB file name as the only parameter. If the conversion operation is successful, a new file will be created in the local directory with same name as the input file, with an extra <span class="CodeInline">.conf</span> suffix at the end.</p>
</li>
</ol>
<p>For example, the figure below shows the command "<span class="CodeInline">convert_mib.sh /tmp/UCD-SNMP-MIB.MIB</span>". This command causes the convert_mib.sh script to read in the "<span class="CodeInline">/tmp/UCD-SNMP-MIB.MIB</span>" file, locate the SNMP trap definitions in the MIB file, and then generate a SNMP Trap Translator configuration file called "<span class="CodeInline">UCD-SNMP-MIB.MIB.conf</span>" in the current directory. In that example, the output file contains definitions for two SNMP traps, which are <span class="CodeInline">ucdStart</span> and <span class="CodeInline">ucdShutdown</span>, respectively.</p>
<p class="Bullet1"><img src="Assets/messageprocessing_addingnewtrapdefinitions.gif" class="img_whs3" alt="" width="510" height="416" border="0" /></p>
<p>Note that the conversion script will append data to the output file instead of overwriting it. If you want to completely regenerate an existing configuration file, you must delete the existing configuration file before running the script again.</p>
<ol start="3">
<li class="p-Numbering">
<p class="Numbering">Once the desired configuration file has been created, it must be added to the <span class="CodeInline">/usr/local/groundwork/etc/snmp/snmptt.ini</span> control file before it will be used to interpret matching traps. To add the new configuration file to the control file, open <span class="CodeInline">snmptt.ini</span> in a text editor, locate the "[TrapFiles]" section towards the bottom of the file, and then add the full path and filename of the new configuration file somewhere before the "END" directive. To simplify management, it is suggested that the new configuration file be copied to the <span class="CodeInline">/usr/local/groundwork/etc/snmp/</span> directory beforehand.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">After the snmptt.ini file has been updated, restart the snmptt daemon with the following command: <span class="CodeInline">$ /etc/init.d/snmptt restart</span></p>
</li>
</ol>
<p>Once the above steps have been completed, the SNMP trap translator will begin processing the newly-defined SNMP traps, and will begin generating the correct text strings and severity levels to <span style="font-style: italic;"><i>GroundWork Foundation</i></span> and <span style="font-style: italic;"><i>Nagios</i></span>. However, in those cases where the MIB file could not be converted, some amount of manual intervention will be required.</p>
<h3><a name="MiniTOCBookMark12" id="MiniTOCBookMark12"></a>Resolving MIB Dependencies</h3>
<h4><a name="MiniTOCBookMark13" id="MiniTOCBookMark13"></a>About MIB Dependencies</h4>
<p>Almost all MIB files are somewhat dependent on other MIB files for certain types of data. For example, an SNMP trap may reuse a universal data-type that is defined in another MIB file, and in that scenario the trap definition will not be usable until the other MIBs have also been made available to the MIB conversion utility.</p>
<p><span style="font-style: italic;"><i>GroundWork Monitor</i></span> includes several common dependency MIBs already, and in many cases the dependency issue will not be noticed. For example, the screen capture in the preceding section shows the <span class="CodeInline">convert_mib.sh</span> script successfully processing the <span class="CodeInline">UCD-SNMP-MIB.MIB</span> file, even though the MIB file has several dependencies. However, this is only possible because <span style="font-style: italic;"><i>GroundWork Monitor</i></span> already includes the dependency MIBs and which are therefore already available to the conversion utility.</p>
<p>If the conversion script fails due to one or more missing dependency MIBs, you will need to determine which MIB files are missing, and then install them in the appropriate location. This can be accomplished in the following way.</p>
<p>You can also review the MIB file by opening it in a text editor. The dependencies will be shown as lines of text beginning with the word "IMPORTS", followed by a list of objects to be imported, then a "FROM" clause followed by the name of the source MIB. For example, the following block of text from the MIB file for a Dell PowerConnect 3248 switch, and refers to multiple subordinate MIBs:</p>
<p class="CodeGroup">IMPORTS</p>
<p class="GroupCode2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MODULE-IDENTITY, OBJECT-TYPE, Unsigned32, Integer32, IpAddress,</p>
<p class="GroupCode2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NOTIFICATION-TYPE, internet, Counter32</p>
<p class="GroupCode2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FROM SNMPv2-SMI</p>
<p class="GroupCode2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DisplayString, RowStatus, TruthValue</p>
<p class="GroupCode2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FROM SNMPv2-TC</p>
<p class="GroupCode2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;EnabledStatus</p>
<p class="GroupCode2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FROM P-BRIDGE-MIB</p>
<p class="GroupCode2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BridgeId, Timeout, dot1dStpPortEntry, dot1dStpPort</p>
<p class="GroupCode2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FROM BRIDGE-MIB</p>
<p class="GroupCode2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PortList</p>
<p class="GroupCode2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FROM Q-BRIDGE-MIB</p>
<p class="GroupCode2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ifIndex</p>
<p class="GroupCode2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FROM IF-MIB;</p>
<p>In the example above, the MIB file has dependencies on <span class="CodeInline">SNMPv2-SMI, SNMPv2-TC, P-BRIDGE-MIB, BRIDGE-MIB, Q-BRIDGE-MIB,</span> and <span class="CodeInline">IF-MIB</span>. Each of these MIB files will be needed before the SNMP trap messages in the original MIB can be converted for use by <span class="CodeInline">snmptt</span>.</p>
<p>Once you have determined the dependency MIBs, you must locate the appropriate MIB files and add them to the MIB repository in <span style="font-style: italic;"><i>GroundWork Monitor</i></span>.</p>
<p>For clarification purposes, it is important to understand that the <span class="CodeInline">convert_mib.sh</span> script is a front-end to the <span class="CodeInline">/usr/local/groundwork/bin/snmpttconvertmib</span> Perl script that is provided with the SNMP Trap Translator package, which ensures that the appropriate options and command-line parameters are used when the configuration file is generated. However, the <span class="CodeInline">snmpttconvertmib</span> script uses the <span class="CodeInline">/usr/local/groundwork/bin/snmptranslate</span> utility that is provided with the Net-SNMP software package for the task of decoding the canonical MIB data. As such, the Net-SNMP software package is ultimately responsible for locating the dependency MIBs when the traps are first converted to text.</p>
<p>All of the Net-SNMP utilities use a common cache directory for common MIB files, which is the <span class="CodeInline">/usr/local/groundwork/share/snmp/mibs</span> directory. Any MIB file that is stored in this directory is available to all of the Net-SNMP utilities for the purpose of converting and displaying MIB data in text form, and this includes the one-time conversion that is utilized whenever a <span class="CodeInline">snmptt</span> configuration file is generated.</p>
<p>Therefore, in order for a dependency MIB to be recognized by the conversion script, the dependency MIB file must be added to the <span class="CodeInline">/usr/local/groundwork/share/snmp/mibs</span> directory. Once the file has been copied to that directory (and the appropriate file permissions have been defined), the conversion script can be called again, and the dependent MIB files will be located and automatically used when the <span class="CodeInline">snmptranslate</span> utility is ultimately called upon to generate the trap text.</p>
<p>By default, the <span class="CodeInline">/usr/local/groundwork/share/snmp/mibs</span> directory contains several dozen common dependency MIB files. In addition, <span style="font-style: italic;"><i>GroundWork Monitor</i></span> also includes several other common MIB files under the <span class="CodeInline">/usr/local/groundwork/share/mibs</span> directory tree (note that this is a different directory than the Net-SNMP cache directory), and those MIB files can be copied into the Net-SNMP cache directory as they are needed. If a MIB file has additional dependencies that are not provided by <span style="font-style: italic;"><i>GroundWork Monitor</i></span>, you may need to locate the dependency MIB files on the equipment vendor's support site or on an Internet MIB repository site.</p>
<p>Using the Dell PowerConnect 3248 MIB example described above, we can tell that the MIB file has dependencies on <span class="CodeInline">SNMPv2-SMI, SNMPv2-TC, BRIDGE-MIB, P-BRIDGE-MIB, Q-BRIDGE-MIB</span>, and <span class="CodeInline">IF-MIB</span>. Furthermore, the Net-SNMP cache directory already contains the MIB files for <span class="CodeInline">SNMPv2-SMI, SNMPv2-TC</span>, and <span class="CodeInline">IF-MIB</span>, but does not contain the <span class="CodeInline">BRIDGE-MIB, P-BRIDGE-MIB</span> or <span class="CodeInline">Q-BRIDGE-MIB</span> MIB files. However, those files do exist in the <span class="CodeInline">/usr/local/groundwork/share/mibs/ietf</span> repository. As such, they only need to be copied into the <span class="CodeInline">/usr/local/groundwork/share/snmp/mibs</span> directory, at which point they will be available to the <span class="CodeInline">snmptranslate</span> utility whenever the <span class="CodeInline">convert_mib.sh</span> script is next executed.</p>
<p>Note that there can sometimes be multiple nested levels of dependencies, and it may be necessary to copy more MIB files into the Net-SNMP cache directory than originally expected. For example, <span class="CodeInline">Q-BRIDGE-MIB</span> has a dependency on <span class="CodeInline">RMON2-MIB</span>, which in turn has a dependency on <span class="CodeInline">TOKEN-RING-RMON-MIB</span>. In order for the PowerConnect 3248 MIB file described above to be processed without errors, all of these MIB files would need to be added to the Net-SNMP cache directory.</p>
<h3><a name="MiniTOCBookMark14" id="MiniTOCBookMark14"></a>Verifying MIB Syntax</h3>
<p>Many SNMP MIB files contain a variety of errors, some of which are relatively benign, while others are sufficiently problematic that <span class="CodeInline">snmptt</span> will be unable to determine how to translate the MIB. In the latter case, this may require you to locate a different version of the MIB file, or to perform some editing of the file itself (this should not be done except in extreme cases - SNMP MIB definitions use a very complicated notation format, and it is very easy to make a bad situation much worse).</p>
<div style="width: 100%; position: relative;" id="footer">
<p class="Footer" style="font-size: 7pt; line-height: Normal; margin-top: 6pt; margin-bottom: 4pt;">GroundWork, Inc. ©2011</p>
</div>
<script type="text/javascript" language="javascript1.2">
//<![CDATA[
<!--
if (window.writeIntopicBar)
        writeIntopicBar(0);


highlightSearch();
//-->
//]]>
</script>
</body>
</html>
