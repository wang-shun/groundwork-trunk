<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Adobe RoboHelp 8" />
<title>SendPage</title>
<link rel="StyleSheet" href="../Bookshelf.css" type="text/css" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function ehlp_showtip(current,e,text)
{
  if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == 'Netscape'))
  {
    document.tooltip.document.write("<layer bgColor='yellow' style='border:1px solid black;font-size:12px;'>"+ text + "<\/layer>");
    document.tooltip.document.close();
    document.tooltip.left=e.pageX+5;
    document.tooltip.top=e.pageY+5;
    document.tooltip.visibility="show";
  }
}
function ehlp_hidetip()
{
  document.tooltip.visibility="hidden";
}
//]]>
</script>
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
        origWidth = innerWidth;
        origHeight = innerHeight;
        onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
/*<![CDATA[*/
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
-->
/*]]>*/
</style>

<script type="text/javascript" language="javascript1.2" src="../whmsg.js">
</script>
<script type="text/javascript" language="javascript" src="../whver.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../whproxy.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../whutils.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../whlang.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../whtopic.js">
</script>
</head>
<body>
<script type="text/javascript" language="javascript1.2">
//<![CDATA[
<!--
if (window.gbWhTopic)
{
        var strUrl = document.location.href;
        var bc = 0;
        var n = strUrl.toLowerCase().indexOf("bc-");
        if(n != -1)
        {
                document.location.href = strUrl.substring(0, n);
                bc = strUrl.substring(n+3);
        }

        if (window.addTocInfo)
        {
        addTocInfo("OPEN SOURCE REFERENCE\nSendPage");
addButton("show",BTN_TEXT,"Show Table of Contents","","","","",0,0,"","","");

        }
        if (window.writeBtnStyle)
                writeBtnStyle();

        if (window.writeIntopicBar)
                writeIntopicBar(1);

        
        

        if (window.setRelStartPage)
        {
        setRelStartPage("../Bookshelf.htm");

                autoSync(0);
                sendSyncInfo();
                sendAveInfoOut();
        }
}
else
        if (window.gbIE4)
                document.location.reload();

//-->
//]]>
</script><script type="text/javascript" language="JavaScript1.2" src="../ehlpdhtm.js">
</script><script type="text/javascript" language="javascript">
//<![CDATA[
document.write("<p  style=\"text-align:right;color:#0000ff;font-family:Arial;font-size:7pt;font-weight: normal;font-style: normal;text-decoration: none;\">");
AddMasterBreadcrumbs("../Bookshelf.htm", "color:#0000ff;font-family:Arial;font-size:7pt;font-weight: normal;font-style: normal;text-decoration: none;", "&gt;", "Home", "../Welcome_to_GroundWork_Monitor/index.htm");
document.write("<a style=\"color:#0000ff;font-family:Arial;font-size:7pt;font-weight: normal;font-style: normal;text-decoration: none;\" href=\"GroundWork_OS_Projects/osr_monarch.htm\">OPEN SOURCE REFERENCE<\/a> &gt; SendPage<\/p>");
//]]>
</script>
<p>&#160;</p>
<h1><a name="MiniTOCBookMark1" id="MiniTOCBookMark1"></a><img src="../Shared_Images/square.gif" alt="square.gif" style="border: none;" width="15" height="15" border="0" /> Open Source Reference</h1>
<h3 align="right"><a href="../Welcome_to_GroundWork_Monitor/index.htm" title="Topic Home" onmouseover="if ((parseInt(navigator.appVersion) == 4) &amp;&amp; (navigator.appName == 'Netscape')) ehlp_showtip(this,event,'Topic Home');" onmouseout="if ((parseInt(navigator.appVersion) == 4) &amp;&amp; (navigator.appName == 'Netscape')) ehlp_hidetip();"><img src="../Shared_Images/homeicon.gif" alt="Topic Home" title="Topic Home" style="border: none;" width="33" height="27" border="0" /></a> <img src="../Shared_Images/printicon.gif" onclick="window.print()" alt="Print Page" title="Print Page" style="border: none;" width="33" height="27" border="0" /> <a href="mailto:support@groundworkopensource.com?subject=About SNPP and SendPage" title="Send Comments"><img src="../Shared_Images/commentsicon.gif" alt="Send Comments" title="Send Comments" style="border: none;" width="33" height="27" border="0" /></a></h3>
<h2><a name="MiniTOCBookMark2" id="MiniTOCBookMark2"></a>About SNPP and sendPage</h2>
<p align="left">Table&#160;of&#160;Contents:&#160;<a class="dropspot" href="javascript:TextPopup(this)" id="MTHotSpot47271" name="MTHotSpot47271"><span class="MTText">Show</span><span class="MTText" style="display: none;">Hide</span></a></p>
<script type="text/javascript" language="JavaScript1.2">
//<![CDATA[
TextPopupInit('MTHotSpot47271', 'MTPOPUP47271');
//]]>
</script>
<div align="left" class="droptext" id="MTPOPUP47271" style="display: none;">
<ul style="text-align:left; list-style-type: circle;">
<li><a href="#MiniTOCBookMark2">About SNPP and sendPage</a>
<ul style="list-style-type: circle;">
<li><a href="#MiniTOCBookMark3">Links</a></li>
</ul>
</li>
<li><a href="#MiniTOCBookMark4">Paging How To's</a>
<ul style="list-style-type: circle;">
<li><a href="#MiniTOCBookMark5">How Do I Install SendPage?</a></li>
<li><a href="#MiniTOCBookMark8">Startup Shutdown Script</a></li>
</ul>
</li>
<li><a href="#MiniTOCBookMark9">How Do I Define epager in sendPage?</a>
<ul style="list-style-type: circle;">
<li><a href="#MiniTOCBookMark10">Example - sendpage.cf (defines a mode, paging provider, and recipient)</a></li>
</ul>
</li>
<li><a href="#MiniTOCBookMark14">How Do I Define A Command?</a>
<ul style="list-style-type: circle;">
<li><a href="#MiniTOCBookMark15">Definition Format</a></li>
<li><a href="#MiniTOCBookMark18">Step 1 - Add a new Command</a></li>
</ul>
</li>
<li><a href="#MiniTOCBookMark19">How Do I Setup A Contact Group?</a>
<ul style="list-style-type: circle;">
<li><a href="#MiniTOCBookMark20">Step 1 - Creating a Contact Template</a></li>
<li><a href="#MiniTOCBookMark22">Step 2 - Defining Contacts</a></li>
<li><a href="#MiniTOCBookMark24">Step 3 - Creating a Contact Group</a></li>
</ul>
</li>
</ul>
</div>
<p><span style="font-weight: bold;"><b>S</b></span>imple <span style="font-weight: bold;"><b>N</b></span>etwork <span style="font-weight: bold;"><b>P</b></span>aging <span style="font-weight: bold;"><b>P</b></span>rotocol (SNPP), is a standard for sending one and two-way wireless messages to paging devices. SNPP provides a simple way to make a link between the Internet and a Telocator Alphanumeric input Protocol (TAP) compliant paging terminal. sendPage is designed to speak SNPP on one end and TAP (or UCP) on the other. It gets pages from the network via SNPP and then uses a modem or a direct serial connection to deliver the pages to a paging central or paging terminal. sendPage requires that you know your PC's access number for modem use, and you need to know the PINs of the pagers you want to deliver pages to. All of this information is known by your paging provider.</p>
<p>There are three files that control how paging works in Nagios.</p>
<ol>
<li class="p-Numbering">
<p class="Numbering">The <span class="CodeInline">/etc/sendpage.cf</span> configuration file controls the execution of sendPage.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">The <span class="CodeInline">contacts.cfg</span> Nagios configuration file controls those contacts that will receive pages through the provider.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">The <span class="CodeInline">misccommands.cfg</span> Nagios Configuration file controls the pager variables.</p>
</li>
</ol>
<h3><a name="MiniTOCBookMark3" id="MiniTOCBookMark3"></a>Links</h3>
<ul style="list-style: url('../Shared_Images/bullet01.gif');">
<li class="p-Bullet1">
<p class="Bullet1">sendPage - <a href="http://www.sendpage.org/" target="_blank">http://www.sendpage.org/</a></p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Simple Network Paging Protocol (SNPP) - <a href="http://www.notepage.net/snpp.htm" target="_blank">http://www.notepage.net/snpp.htm</a></p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">TAP Paging Terminal Phone Numbers - <a href="http://www.notepage.net/tap-phone-numbers.htm" target="_blank">http://www.notepage.net/tap-phone-numbers.htm</a></p>
</li>
</ul>
<h2><a name="MiniTOCBookMark4" id="MiniTOCBookMark4"></a>Paging How To's</h2>
<h3><a name="MiniTOCBookMark5" id="MiniTOCBookMark5"></a>How Do I Install SendPage?</h3>
<h4><a name="MiniTOCBookMark6" id="MiniTOCBookMark6"></a>Installing sendPage</h4>
<p>To install sendPage you can use the following installation script. It assumes that the listed <span class="CodeInline">tar.gz</span> files exist in the current directory. These files can be downloaded from the following links:</p>
<ul style="list-style: url('../Shared_Images/bullet01.gif');">
<li class="p-Bullet1">
<p class="Bullet1"><a href="http://search.cpan.org/~cook/Device-SerialPort-1.002/" target="_blank">http://search.cpan.org/~cook/Device-SerialPort-1.002/</a></p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><a href="http://search.cpan.org/dist/MailTools/" target="_blank">http://search.cpan.org/dist/MailTools/</a></p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><a title="Net-SNMP" href="http://search.cpan.org/~dtown/Net-SNMP-5.2.0/" target="_blank">http://search.cpan.org/~dtown/Net-SNMP-5.2.0/</a></p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><a href="http://www.sendpage.org/" target="_blank">http://www.sendpage.org/</a></p>
</li>
</ul>
<h4><a name="MiniTOCBookMark7" id="MiniTOCBookMark7"></a>Installation Script</h4>
<p>The script below will uncompress the source distributions and compile them for the target system.</p>
<p class="CodeGroup">#!/bin/bash</p>
<p class="CodeGroup">#this currently does no error checking, however these are very simple</p>
<p class="CodeGroup">#packages and not so prone to errors.</p>
<p class="CodeGroup" style="margin-left: 64px;">DeviceSerial=Device-SerialPort-1.002.tar.gz</p>
<p class="CodeGroup" style="margin-left: 64px;">MailTools=MailTools-1.67.tar.gz</p>
<p class="CodeGroup">NetSNPP=Net-SNPP-1.17.tar.gz</p>
<p class="CodeGroup" style="margin-left: 64px;">sendPage=sendpage-1.tar.gz</p>
<p class="CodeGroup" style="margin-left: 64px;"><span>function die() {</span></p>
<p class="CodeGroup" style="margin-left: 64px;"><span style="margin-left: 40px;">&#160;&#160;echo $*</span></p>
<p class="CodeGroup" style="margin-left: 64px;"><span style="margin-left: 40px;">&#160;&#160;exit 1</span></p>
<p class="CodeGroup" style="margin-left: 64px;"><span style="margin-left: 40px;">}</span></p>
<p class="CodeGroup" style="margin-left: 64px;"><span style="margin-left: 40px;">CWD=`pwd`</span></p>
<p class="CodeGroup" style="margin-left: 64px;"><span style="margin-left: 40px;">for package in $DeviceSerial $MailTools $NetSNPP $sendPage ; do</span></p>
<p class="CodeGroup" style="margin-left: 64px;"><span style="margin-left: 40px;">&#160;&#160;cd $CWD</span></p>
<p class="CodeGroup" style="margin-left: 64px;"><span style="margin-left: 40px;">&#160;&#160;tar zxvf $package || die could not extract, make sure you have permissions</span></p>
<p class="CodeGroup" style="margin-left: 64px;"><span style="margin-left: 40px;">&#160;&#160;packagedir=`echo $package | sed 's/.tar.gz$//g'`</span></p>
<p class="CodeGroup" style="margin-left: 64px;"><span style="margin-left: 40px;">&#160;&#160;cd $packagedir || die could not change to $packagedir. make sure it exists</span></p>
<p class="CodeGroup" style="margin-left: 64px;"><span style="margin-left: 40px;">&#160;&#160;perl Makefile.PL || die could not there was an error running</span></p>
<p class="CodeGroup"><span style="margin-left: 40px;">"perl Makefile.PL"</span></p>
<p class="CodeGroup" style="margin-left: 64px;"><span style="margin-left: 40px;">&#160;&#160;make install</span></p>
<p class="CodeGroup" style="margin-left: 64px;"><span style="margin-left: 40px;">done</span></p>
<p class="CodeGroup" style="margin-left: 64px;"><span style="margin-left: 40px;">exit 0</span></p>
<h3><a name="MiniTOCBookMark8" id="MiniTOCBookMark8"></a>Startup Shutdown Script</h3>
<p>The final steps to the installation of sendPage require creation of a Startup-shutdown script in <span class="CodeInline">/etc/init.d</span>, using the appropriate service management tool to make sure sendPage is started in the run level that your monitoring system uses (e.g. 3 or 5), and then creating a configuration file <span class="CodeInline">/etc/sendpage.cf</span>. The script below is an example Startup-shutdown script.</p>
<p class="CodeGroup">#! /bin/sh</p>
<p class="CodeGroup">#</p>
<p class="CodeGroup"># /etc/init.d/sendpage</p>
<p class="CodeGroup">#</p>
<p class="CodeGroup">### BEGIN INIT INFO</p>
<p class="CodeGroup"># Provides: &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sendpage</p>
<p class="CodeGroup"># Required-Start &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$network $named $syslog</p>
<p class="CodeGroup"># Required-Stop:</p>
<p class="CodeGroup"># Default-Start: &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3 5</p>
<p class="CodeGroup"># Default-Stop:</p>
<p class="CodeGroup"># Description: &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start the sendpage daemon</p>
<p class="CodeGroup">### END INIT INFO</p>
<p class="CodeGroup"># Determine the base and follow a runlevel link name.</p>
<p class="CodeGroup" style="margin-left: 64px;">base=${0##*/}</p>
<p class="CodeGroup" style="margin-left: 64px;">link=${base#*[SK][0-9][0-9]}</p>
<p class="CodeGroup">SENDPAGE_BIN=/usr/bin/sendpage</p>
<p class="CodeGroup">test -x $SENDPAGE_BIN || exit 5</p>
<p class="CodeGroup"># Shell functions sourced from /etc/rc.status:</p>
<p class="CodeGroup"># rc_check &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;check and set local and overall rc status</p>
<p class="CodeGroup"># rc_status &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;check and set local and overall rc status</p>
<p class="CodeGroup"># rc_status -v &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ditto but be verbose in local rc status</p>
<p class="CodeGroup"># rc_status -v -r &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ditto and clear the local rc status</p>
<p class="CodeGroup"># rc_failed &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;set local and overall rc status to failed</p>
<p class="CodeGroup"># rc_failed &lt;num&gt; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;set local and overall rc status to &lt;num&gt;&lt;num&gt;</p>
<p class="CodeGroup"># rc_reset &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;clear local rc status (overall remains)</p>
<p class="CodeGroup"># rc_exit &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exit appropriate to overall rc status . /etc/rc.status</p>
<p class="CodeGroup"># First reset status of this service &#160;rc_reset</p>
<p class="CodeGroup"># Return values acc. to LSB for all commands but status:</p>
<p class="CodeGroup"># 0 - success</p>
<p class="CodeGroup"># 1 - generic or unspecified error</p>
<p class="CodeGroup"># 2 - invalid or excess argument(s)</p>
<p class="CodeGroup"># 3 - unimplemented feature (e.g. "reload")</p>
<p class="CodeGroup"># 4 - insufficient privilege</p>
<p class="CodeGroup"># 5 - program is not installed</p>
<p class="CodeGroup"># 6 - program is not configured</p>
<p class="CodeGroup"># 7 - program is not running</p>
<p class="CodeGroup">#</p>
<p class="CodeGroup"># Note that starting an already running service, stopping or restarting a</p>
<p class="CodeGroup"># not-running service as well as the restart with force-reload (in case</p>
<p class="CodeGroup"># signalling is not supported) are considered a success.</p>
<p class="CodeGroup">case "$1" in</p>
<p class="CodeGroup" style="margin-left: 24px;">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start)</p>
<p class="CodeGroup" style="margin-left: 64px;">echo -n "Starting sendpage service"</p>
<p class="CodeGroup" style="margin-left: 64px;">## Start daemon with startproc(8). If this fails</p>
<p class="CodeGroup" style="margin-left: 64px;">## the echo return value is set appropriate.</p>
<p class="CodeGroup" style="margin-left: 64px;">if ! /sbin/checkproc -p /var/spool/sendpage/sendpage.pid $SENDPAGE_BIN; then</p>
<p class="CodeGroup" style="margin-left: 104px;"><span style="margin-left: 144px;">$SENDPAGE_BIN -bd start &gt; /dev/null 2&gt;&amp;1</span></p>
<p class="CodeGroup" style="margin-left: 64px;">else</p>
<p class="CodeGroup" style="margin-left: 104px;">rc_reset</p>
<p class="CodeGroup" style="margin-left: 64px;">fi</p>
<p class="CodeGroup" style="margin-left: 64px;"># Remember status and be verbose</p>
<p class="CodeGroup" style="margin-left: 64px;">rc_status -v</p>
<p class="CodeGroup" style="margin-left: 64px;">;;</p>
<p class="CodeGroup" style="margin-left: 24px;"><span style="margin-left: 64px;">&#160;&#160;&#160;&#160;&#160;&#160;&#160;stop)</span></p>
<p class="CodeGroup" style="margin-left: 64px;">echo -n "Shutting down sendpage service"</p>
<p class="CodeGroup" style="margin-left: 64px;">## Stop daemon with killproc(8) and if this fails</p>
<p class="CodeGroup" style="margin-left: 64px;">## set echo the echo return value.</p>
<p class="CodeGroup" style="margin-left: 64px;">/sbin/killproc -p /var/spool/sendpage/sendpage.pid -TERM $SENDPAGE_BIN</p>
<p class="CodeGroup" style="margin-left: 64px;"># Remember status and be verbose</p>
<p class="CodeGroup" style="margin-left: 64px;">rc_status -v</p>
<p class="CodeGroup" style="margin-left: 64px;">;;</p>
<p class="CodeGroup" style="margin-left: 24px;"><span style="margin-left: 64px;">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;try-restart)</span></p>
<p class="CodeGroup" style="margin-left: 64px;">## Stop the service and if this succeeds (i.e. the</p>
<p class="CodeGroup" style="margin-left: 64px;">## service was running before), start it again.</p>
<p class="CodeGroup" style="margin-left: 64px;">## Note: try-restart is not (yet) part of LSB (as of 0.7.5)</p>
<p class="CodeGroup" style="margin-left: 64px;">$0 status &gt;/dev/null &amp;&amp; &#160;$0 restart</p>
<p class="CodeGroup" style="margin-left: 64px;"># Remember status and be quiet</p>
<p class="CodeGroup" style="margin-left: 64px;">rc_status</p>
<p class="CodeGroup" style="margin-left: 64px;">;;</p>
<p class="CodeGroup">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;restart)</p>
<p class="CodeGroup" style="margin-left: 64px;">## Stop the service and regardless of whether it was</p>
<p class="CodeGroup" style="margin-left: 64px;">## running or not, start it again.</p>
<p class="CodeGroup" style="margin-left: 64px;">$0 stop</p>
<p class="CodeGroup" style="margin-left: 64px;">$0 start</p>
<p class="CodeGroup" style="margin-left: 64px;"># Remember status and be quiet</p>
<p class="CodeGroup" style="margin-left: 64px;">rc_status</p>
<p class="CodeGroup" style="margin-left: 64px;">;;</p>
<p class="CodeGroup">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;force-reload)</p>
<p class="CodeGroup" style="margin-left: 64px;">## Signal the daemon to reload its config. Most daemons</p>
<p class="CodeGroup" style="margin-left: 64px;">## do this on signal 1 (SIGHUP).</p>
<p class="CodeGroup" style="margin-left: 64px;">## If it does not support it, restart.</p>
<p class="CodeGroup" style="margin-left: 64px;">echo -n "Reload sendpage service"</p>
<p class="CodeGroup" style="margin-left: 64px;"># if it supports it:</p>
<p class="CodeGroup" style="margin-left: 64px;">/sbin/killproc -p /var/spool/sendpage/sendpage.pid -HUP $SENDPAGE_BIN</p>
<p class="CodeGroup" style="margin-left: 64px;">#touch /var/run/FOO.pid</p>
<p class="CodeGroup" style="margin-left: 64px;">rc_status -v</p>
<p class="CodeGroup" style="margin-left: 64px;">/usr/bin/sendpage -br &gt; /dev/null 2&gt;&amp;1</p>
<p class="CodeGroup" style="margin-left: 64px;">## Otherwise:</p>
<p class="CodeGroup" style="margin-left: 64px;">#$0 stop &#160;&amp;&amp; &#160;$0 start</p>
<p class="CodeGroup" style="margin-left: 64px;">#rc_status</p>
<p class="CodeGroup" style="margin-left: 64px;">;;</p>
<p class="CodeGroup">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reload)</p>
<p class="CodeGroup" style="margin-left: 64px;">echo -n "Reload sendpage service"</p>
<p class="CodeGroup" style="margin-left: 64px;"># If it supports signalling:</p>
<p class="CodeGroup" style="margin-left: 64px;">/sbin/killproc -p /var/spool/sendpage/sendpage.pid -HUP $SENDPAGE_BIN</p>
<p class="CodeGroup" style="margin-left: 64px;">#touch /var/run/FOO.pid</p>
<p class="CodeGroup" style="margin-left: 64px;">rc_status -v</p>
<p class="CodeGroup" style="margin-left: 64px;">/usr/bin/sendpage -br &gt; /dev/null 2&gt;&amp;1</p>
<p class="CodeGroup" style="margin-left: 64px;">## Otherwise if it does not support reload:</p>
<p class="CodeGroup" style="margin-left: 64px;">#rc_failed 3</p>
<p class="CodeGroup" style="margin-left: 64px;">#rc_status -v</p>
<p class="CodeGroup" style="margin-left: 64px;">;;</p>
<p class="CodeGroup">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status)</p>
<p class="CodeGroup" style="margin-left: 64px;">echo -n "Checking for service sendpage: "</p>
<p class="CodeGroup" style="margin-left: 64px;">## Check status with checkproc(8), if process is running</p>
<p class="CodeGroup" style="margin-left: 64px;">## checkproc will return with exit status 0.</p>
<p class="CodeGroup" style="margin-left: 64px;"># Status has a slightly different for the status command:</p>
<p class="CodeGroup" style="margin-left: 64px;"># 0 - service running</p>
<p class="CodeGroup" style="margin-left: 64px;"># 1 - service dead, but /var/run/ &#160;pid &#160;file exists</p>
<p class="CodeGroup" style="margin-left: 64px;"># 2 - service dead, but /var/lock/ lock file exists</p>
<p class="CodeGroup" style="margin-left: 64px;"># 3 - service not running</p>
<p class="CodeGroup" style="margin-left: 64px;"># NOTE: checkproc returns LSB compliant status values.</p>
<p class="CodeGroup" style="margin-left: 64px;">/sbin/checkproc -p /var/spool/sendpage/sendpage.pid $SENDPAGE_BIN</p>
<p class="CodeGroup" style="margin-left: 64px;">rc_status -v</p>
<p class="CodeGroup" style="margin-left: 64px;">;;</p>
<p class="CodeGroup" style="margin-left: 64px;">*)</p>
<p class="CodeGroup" style="margin-left: 64px;">echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload}"</p>
<p class="CodeGroup" style="margin-left: 64px;">exit 1</p>
<p class="CodeGroup" style="margin-left: 64px;">;;</p>
<p class="CodeGroup">esac</p>
<p class="CodeGroup">rc_exit</p>
<h2><a name="MiniTOCBookMark9" id="MiniTOCBookMark9"></a>How Do I Define epager in sendPage?</h2>
<p>The execution of sendPage is controlled by a configuration file <span class="CodeInline">/etc/sendpage.cf</span>. The content of this file tells sendPage what modems it can communicate with, what paging providers it can call, and what recipients (pager recipients) it will make calls for. Paging providers are called paging central or pc in the configuration file. Once the configuration file is created the sendPage daemon needs to be restarted. You will see a separate queue process per defined paging provider. Messages are submitted to the queues using a PERL script called SNPP that comes with the sendPage distribution.</p>
<h3><a name="MiniTOCBookMark10" id="MiniTOCBookMark10"></a>Example - sendpage.cf (defines a mode, paging provider, and recipient)</h3>
<p class="CodeGroup">[modem:sportster]</p>
<p class="CodeGroup" style="margin-left: 64px;">dev = /dev/ttyS0</p>
<p class="CodeGroup" style="margin-left: 64px;">dialout="9,"</p>
<p class="CodeGroup" style="margin-left: 64px;">areacode="206"</p>
<p class="CodeGroup" style="margin-left: 24px;">[pc:metrocall]</p>
<p class="CodeGroup" style="margin-left: 64px;">areacode=206</p>
<p class="CodeGroup" style="margin-left: 64px;">phonenum=6227585</p>
<p class="CodeGroup" style="margin-left: 64px;">stricttap=true</p>
<p class="CodeGroup" style="margin-left: 64px;">[recip:mypager]</p>
<p class="CodeGroup" style="margin-left: 64px;">dest=1234567@metrocall</p>
<h4><a name="MiniTOCBookMark11" id="MiniTOCBookMark11"></a>Defined Modems</h4>
<p>In the example above the modem is called <span class="CodeInline">sportster</span>. If multiple modems are defined then the paging central section could be configured to use a specific modem or leave sendPage to use an available modem. A number of communication defaults are assumed. Consult the sendPage documentation to determine whether these defaults need to be overridden for your environment.</p>
<h4><a name="MiniTOCBookMark12" id="MiniTOCBookMark12"></a>Paging Central</h4>
<p>In our example, the paging central is called <span class="CodeInline">metrocall</span>. The phone number was obtained by consulting the following link for a list of TAP providers <a href="http://www.notepage.net/tap-phone-numbers.htm" target="_blank">http://www.notepage.net/tap-phone-numbers.htm</a>. Depending on the service that you have obtained for your pagers, it may be possible to use an 800 number; otherwise you would use a number in the same area code as the pager in question. Consult the pager provider for details.</p>
<h4><a name="MiniTOCBookMark13" id="MiniTOCBookMark13"></a>Recipient</h4>
<p>The example recipient is called <span class="CodeInline">mypager</span>. The string mypager is the handle by which the recipient is identified when submitting a message to the sendPage queue. The dest setting is the phone number of the pager (pager ID) without the area code. If you use an 800 TAP number you may need to include the area code in this definition. The dest setting also includes the paging central (provider) that this recipient uses.</p>
<p>After configuring sendPage and restarting the daemon, a message submitted to recipient mypager would be processed by calling the metrocall number with the sportster modem. The configuration should be tested by issuing a command similar to the following where the <span class="CodeInline">-f</span> option is a from address for the SNPP message. This may or may not appear on the destination pager device.</p>
<p class="CodeGroup"><span class="CodeInline">/usr/bin/snpp -f groundwork@localhost -m 'test message' mypager</span></p>
<h2><a name="MiniTOCBookMark14" id="MiniTOCBookMark14"></a>How Do I Define A Command?</h2>
<p>The use of sendPage from within Nagios is configured in several steps. The first is to create a command definition that controls how SNPP is called. This How To will take you through the steps to add a new command line. A Command line, which defines a Command, is referenced in Contact, Host, and Service definitions among other places. Commands are used by Nagios for plug-in execution. Commands that can be defined include service checks, service notifications, service event handlers, host checks, host notifications, and host event handlers. Command definitions can contain macros, but you must make sure that you include only those macros that are valid for the circumstances when the command will be used. See the Nagios documentation for the complete list and usage of macros.</p>
<h3><a name="MiniTOCBookMark15" id="MiniTOCBookMark15"></a>Definition Format</h3>
<p>Below are example definitions that should be placed in the <span class="CodeInline">misccommands.cfg</span> file. One will be used for sending pages about Host issues, the other for Service issues. Note that <span class="CodeInline">mypager</span> has been substituted with a Nagios macro <span class="CodeInline">CONTACTPAGER$</span>, the macro that sources the pager variable. This macro is defined at runtime by Nagios and in this case is the recipient name that the page is meant for. This is the pager number/address of the contact for Service and Host notifications. It will be defined in contact definitions in the next couple of steps.</p>
<h4><a name="MiniTOCBookMark16" id="MiniTOCBookMark16"></a>Command definition - host notify by epager</h4>
<p class="CodeGroup">define command{</p>
<p class="CodeGroup" style="margin-left: 64px;">command_name &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;host-notify-by-epager</p>
<p class="CodeGroup" style="margin-left: 64px;">command_line &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/usr/bin/snpp -f nagios@localhost -m 'Host:</p>
<p class="CodeGroup" style="margin-left: 64px;">$HOSTNAME$ Host State: &#160;&#160;&#160;&#160;&#160;&#160;$HOSTSTATE$' $CONTACTPAGER$</p>
<p class="CodeGroup" style="margin-left: 64px;">}</p>
<h4><a name="MiniTOCBookMark17" id="MiniTOCBookMark17"></a>Command definition - notify by epager</h4>
<p class="CodeGroup">define command{</p>
<p class="CodeGroup" style="margin-left: 64px;">command_name &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;notify-by-epager</p>
<p class="CodeGroup" style="margin-left: 64px;">command_line &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/usr/bin/snpp -f nagios@localhost -m 'Host:</p>
<p class="CodeGroup" style="margin-left: 64px;">$HOSTNAME$ Host State: &#160;&#160;&#160;&#160;&#160;&#160;$HOSTSTATE$ Service: $SERVICEDESC$ State: $SERVICESTATE$' $CONTACTPAGER$</p>
<p class="CodeGroup" style="margin-left: 64px;">}</p>
<p class="Caption">Figure: Configuration - Adding a New Command</p>
<p class="Figure"><img src="Assets/ocr_sendpageaddinganewcommand.gif" alt="sendPage - Configuration Adding a New Command" title="sendPage - Configuration Adding a New Command" style="border: none;" width="700" height="275" border="0" /></p>
<h3><a name="MiniTOCBookMark18" id="MiniTOCBookMark18"></a>Step 1 - Add a new Command</h3>
<ol>
<li class="p-Numbering">
<p class="Numbering">Select <b>Commands</b> from the Configuration menu options.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <span style="font-weight: bold;"><b>Copy</b></span> or <span style="font-weight: bold;"><b>New</b></span>. <span style="color: #ff0000; font-weight: bold;"><font color="red"><b>Note:</b></font></span> If the command you are creating has a format similar to an existing command, or if it will be calling a plugin program with different parameters, the Copy option will be easiest to use.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">In the <span style="font-weight: bold;"><b>Command</b></span> <span style="font-weight: bold;"><b>Wizard</b></span> screen, fill in the properties described below:</p>
<ul class="level01" style="list-style: url('../Shared_Images/bullet01.gif');">
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Name</b> - This is the Name for the Command. This directive is the short name used to identify the command.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Type</b> - [Required] Specify the command type: Check = Service/Host check commands, handlers; notify = notification commands; other = other commands (i.e. performance data collectors).</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Command Line</b> - This directive is used to define what is actually executed by Nagios when the command is used for service or host checks, notifications, or event handlers. Note: The command line should also match how it will be executed at a command prompt. You may use Nagios macros here. These are substituted by Nagios before the command is executed. Typical macros include: <span class="CodeInline">$HOSTADDRESS$</span> - the Host's IP Address; <span class="CodeInline">$USER1$</span> - the Nagios plugin directory.</p>
</li>
</ul>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <b>Add</b> to create the command. <span style="color: #ff0000; font-weight: bold;"><font color="red"><b>Note:</b></font></span> Be sure the plugin for the command line exists in the plugin folder.</p>
</li>
</ol>
<h2><a name="MiniTOCBookMark19" id="MiniTOCBookMark19"></a>How Do I Setup A Contact Group?</h2>
<p>This How To will take you through the steps to create a Contact Group. We will first create a Contact Template, second define Contacts, and then follow up by creating a Contact Group. A Contact Template is useful when creating multiple Contacts with common attributes. A Contact definition is used to identify someone who should be contacted in the event of a problem on your network. A Contact Group is a collection of one or more Contacts. Contact Groups can be applied to Escalation Templates and Escalation Trees to be used in setting up notifications for Hosts and Services.</p>
<h3><a name="MiniTOCBookMark20" id="MiniTOCBookMark20"></a>Step 1 - Creating a Contact Template</h3>
<p>Nagios and Monarch Contact Templates are used to set defaults for your Nagios Contacts to simplify configuration. Below is an example Contact Template that will be sourced when we define the <span class="CodeInline">mypager</span> Contact in the next step. It would normally be placed in the <span class="CodeInline">contacts.cfg</span> file. The below template is called <span class="CodeInline">contact-template</span> and if sourced by a contact definition will control when notifications are sent, for what states, and what commands will be used. In our case it is important to note that this is where the <span class="CodeInline">notify-by-epager</span> and <span class="CodeInline">host-notify-by-epager</span> commands are sourced.</p>
<h4><a name="MiniTOCBookMark21" id="MiniTOCBookMark21"></a>Definition Format</h4>
<p class="CodeGroup">define contact {</p>
<p class="CodeGroup" style="margin-left: 64px;">name &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;contact-template</p>
<p class="CodeGroup" style="margin-left: 64px;">host_notification_period &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;24x7</p>
<p class="CodeGroup" style="margin-left: 64px;">service_notification_period &#160;&#160;&#160;&#160;&#160;24x7</p>
<p class="CodeGroup" style="margin-left: 64px;">host_notification_options &#160;&#160;&#160;&#160;&#160;&#160;&#160;d,u,r,n</p>
<p class="CodeGroup" style="margin-left: 64px;">service_notification_options &#160;&#160;&#160;&#160;u,c,w,r,n</p>
<p class="CodeGroup" style="margin-left: 64px;">host_notification_commands &#160;&#160;&#160;&#160;&#160;&#160;host-notify-by-epager</p>
<p class="CodeGroup" style="margin-left: 64px;">service_notification_commands &#160;&#160;&#160;notify-by-epager }</p>
<p class="Caption">Figure: Configuration - Creating a Contact Template</p>
<p class="Figure"><img src="Assets/ocr_sendpagecreatingacontacttemplate.gif" alt="sendPage - Configuration Creating a Contact Template" title="sendPage - Creating a Contact Template" width="700" height="562" border="0" /></p>
<ol>
<li class="p-Numbering">
<p class="Numbering">Select <b>Contacts</b> from the Configuration menu options.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <span style="font-weight: bold;"><b>Contact Templates</b></span>.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <span style="font-weight: bold;"><b>Copy</b></span> or <span style="font-weight: bold;"><b>New</b></span>.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">In the <span style="font-weight: bold;"><b>Contact Template Properties</b></span> screen, fill in the properties described below.</p>
<ul style="list-style: url('../Shared_Images/bullet01.gif');">
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Name</b> - [Required] This is the Name for the Contact Template. It is referenced in Contact Group definitions. Under the right circumstances, the <span class="CodeInline">$CONTACTNAME$</span> macro will contain this value.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Host Notification Period</b> - [Required] This directive is used to specify the short name of the time period during which the Contact can be notified about Host problems or recoveries.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Service Notification Period</b> - [Required] This directive is used to specify the short name of the time period during which the Contact can be notified about Service problems or recoveries.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Host Notification Options</b> - [Required] This directive is used to define the Host states for which notifications can be sent out to this Contact. Valid options are a combination of one or more of the following: d = notify on DOWN Host states, u = notify on UNREACHABLE Host states, and r = notify on Host recoveries (UP states). If you specify n (none) as an option, the contact will not receive any type of host notifications.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Service Notification Options</b> - [Required] This directive is used to define the Service states for which notifications can be sent out to this Contact. Valid options are a combination of one or more of the following: w = notify on WARNING service states, u = notify on UNKNOWN service states, c = notify on CRITICAL service states, and r = notify on service recoveries (OK states). If you specify n (none) as an option, the contact will not receive any type of service notifications.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Host Notification Commands</b> - [Optional] This directive is used to define a list of the short names of the commands used to notify the Contact of a Host problem or recovery. Notification commands are executed when the Contact needs to be notified.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Service Notification Commands</b> - [Optional] This directive is used to define a list of the short names of the commands used to notify the Contact of a Service problem or recovery. Notification commands are executed when the Contact needs to be notified.</p>
</li>
</ul>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <b>Add</b> to add the new Contact Template, you will be notified that the new template has been saved.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <span style="font-weight: bold;"><b>Continue</b></span> to return to the main menu.</p>
</li>
</ol>
<h3><a name="MiniTOCBookMark22" id="MiniTOCBookMark22"></a>Step 2 - Defining Contacts</h3>
<p>The definition below is an example for <span class="CodeInline">mypager</span>. It would normally be placed in the <span class="CodeInline">contacts.cfg</span> file. It should be noted that the name declaration is used by Nagios. The pager declaration will be used by SNPP and sendPage. The pager declaration is sourced in the command definition as the <span class="CodeInline">$CONTACTPAGER$</span> macro.</p>
<h4><a name="MiniTOCBookMark23" id="MiniTOCBookMark23"></a>Definition Format</h4>
<p class="CodeGroup">define contact {</p>
<p class="CodeGroup" style="margin-left: 64px;">name &#160;&#160;&#160;&#160;&#160;&#160;&#160;mypager</p>
<p class="CodeGroup" style="margin-left: 64px;">alias &#160;&#160;&#160;&#160;&#160;&#160;Text pager contact 1</p>
<p class="CodeGroup" style="margin-left: 64px;">use &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;contact-template</p>
<p class="CodeGroup" style="margin-left: 64px;">email &#160;&#160;&#160;&#160;&#160;&#160;email_address</p>
<p class="CodeGroup" style="margin-left: 64px;">pager &#160;&#160;&#160;&#160;&#160;&#160;mypager</p>
<p class="CodeGroup" style="margin-left: 64px;">}</p>
<p class="Caption">Figure: Configuration - Defining Contacts</p>
<p class="Figure"><img src="Assets/ocr_sendpagedefiningcontacts.gif" alt="sendPage - Configuration Defining Contacts" title="sendPage - Defining Contacts" width="700" height="684" border="0" /></p>
<ol>
<li class="p-Numbering">
<p class="Numbering">Select <b>Contacts</b> from the Configuration menu options.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <span style="font-weight: bold;"><b>Contacts</b></span>.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <span style="font-weight: bold;"><b>Copy</b></span> or <span style="font-weight: bold;"><b>New</b></span>.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">In the <span style="font-weight: bold;"><b>Contacts Template Properties</b></span> screen, fill in the properties described below.</p>
<ul style="list-style: url('../Shared_Images/bullet01.gif');">
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Name</b> - [Required] This is the Name for the Contact. It is referenced in contact group definitions. Under the right circumstances, the <span class="CodeInline">$CONTACTNAME$</span> macro will contain this value.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Alias</b> - [Required] This directive is used to define a longer name or description for the contact. Under the rights circumstances, the <span class="CodeInline">$CONTACTALIAS$</span> macro will contain this value.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Email</b> - [Optional] This directive is used to define an email address for the contact. Depending on how you configure your notification commands, it can be used to send out an alert email to the contact. Under the right circumstances, the <span class="CodeInline">$CONTACTEMAIL$</span> macro will contain this value.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Pager</b> - [Optional] This directive is used to define a pager number for the contact. It can also be an email address to a pager gateway (i.e. <span class="CodeInline">pagejoe@pagenet.com</span>). Depending on how you configure your notification commands, it can be used to send out an alert page to the contact. Under the right circumstances, the <span class="CodeInline">$CONTACTPAGER$</span> macro will contact this value.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Contact Template</b> - [Required] Select the Contact Template most suitable for this Contact. Note the inheritance check box; to override the template values, uncheck the Inherit all values from Template check box and specify any changes in the contact options listed.</p>
</li>
</ul>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <b>Add</b> to add the new Contact, you will be notified that the new Contact has been saved.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <b>Continue</b> to return to the main menu.</p>
</li>
</ol>
<h3><a name="MiniTOCBookMark24" id="MiniTOCBookMark24"></a>Step 3 - Creating a Contact Group</h3>
<p>Nagios does not send notifications to individual Contacts, but to Contact Groups. Therefore, as one final step you will need to create a Nagios <span class="CodeInline">contactgroup</span> definition. The following is an example Contact Group definition that includes the contact <span class="CodeInline">mypager</span>. It would normally be placed in the <span class="CodeInline">contactgroups.cfg</span> file. When a Host or Service changes state or escalates, and is defined to use the Contact Group below, the contact <span class="CodeInline">mypager</span> will be notified based on the configurations we have set up in the preceding steps.</p>
<h4><a name="MiniTOCBookMark25" id="MiniTOCBookMark25"></a>Definition Format</h4>
<p class="CodeGroup">define contactgroup {</p>
<p class="CodeGroup" style="margin-left: 64px;">contactgroup_name &#160;&#160;&#160;&#160;admin</p>
<p class="CodeGroup" style="margin-left: 64px;">alias &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Administration contact group</p>
<p class="CodeGroup" style="margin-left: 64px;">members &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mypager</p>
<p class="CodeGroup" style="margin-left: 64px;"><span style="margin-left: 40px;">}</span></p>
<p class="Caption">Figure: Configuration - Creating a Contact Group</p>
<p class="Figure"><img src="Assets/ocr_sendpagecreatingacontactgroup.gif" alt="sendPage - Configuration Creating a Contact Group" title="sendPage - Creating a Contact Group" width="700" height="302" border="0" /></p>
<ol>
<li class="p-Numbering">
<p class="Numbering">Select <b>Contacts</b> from the Configuration menu options.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <span style="font-weight: bold;"><b>Contact Groups</b></span>.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <span style="font-weight: bold;"><b>Copy</b></span> or <span style="font-weight: bold;"><b>New</b></span>.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">In the <span style="font-weight: bold;"><b>Contact Group Properties</b></span> screen, fill in the properties.</p>
<ul class="level01" style="list-style: url('../Shared_Images/bullet01.gif');">
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Name</b> - This is the name for the Contact Group.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Alias</b> - This directive is used to define a longer name or description used to identify the Contact Group.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><b style="font-weight: bold;">Contacts</b> - This directive is used to define a list of the short names of contacts that should be included in this group.</p>
</li>
</ul>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <b>Add</b> to add the new Contact Group, you will be notified that the new Contact Group has been saved.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Select <b>Continue</b> to return to the main menu.</p>
</li>
</ol>
<div style="width: 100%; position: relative;" id="footer">
<p class="Footer" style="font-size: 7pt; line-height: Normal; margin-top: 6pt; margin-bottom: 4pt;">GroundWork, Inc. ©2011</p>
</div>
<script type="text/javascript" language="JavaScript">
//<![CDATA[
 if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == 'Netscape'))
  document.write("<div id='tooltip' class='WebHelpPopupMenu'><\/div>");
//]]>
</script><script type="text/javascript" language="javascript1.2">
//<![CDATA[
<!--
if (window.writeIntopicBar)
        writeIntopicBar(0);


highlightSearch();
//-->
//]]>
</script>
</body>
</html>
