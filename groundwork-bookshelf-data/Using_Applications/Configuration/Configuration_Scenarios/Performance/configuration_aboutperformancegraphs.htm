<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Adobe RoboHelp 8" />
<title>About Performance Graphs</title>
<link rel="StyleSheet" href="../../../../Bookshelf.css" type="text/css" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function ehlp_showtip(current,e,text)
{
  if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == 'Netscape'))
  {
    document.tooltip.document.write("<layer bgColor='yellow' style='border:1px solid black;font-size:12px;'>"+ text + "<\/layer>");
    document.tooltip.document.close();
    document.tooltip.left=e.pageX+5;
    document.tooltip.top=e.pageY+5;
    document.tooltip.visibility="show";
  }
}
function ehlp_hidetip()
{
  document.tooltip.visibility="hidden";
}
//]]>
</script>
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
        origWidth = innerWidth;
        origHeight = innerHeight;
        onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
/*<![CDATA[*/
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
-->
/*]]>*/
</style>

<script type="text/javascript" language="javascript1.2" src="../../../../whmsg.js">
</script>
<script type="text/javascript" language="javascript" src="../../../../whver.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../../../../whproxy.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../../../../whutils.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../../../../whlang.js">
</script>
<script type="text/javascript" language="javascript1.2" src="../../../../whtopic.js">
</script>
</head>
<body>
<script type="text/javascript" language="javascript1.2">
//<![CDATA[
<!--
if (window.gbWhTopic)
{
        var strUrl = document.location.href;
        var bc = 0;
        var n = strUrl.toLowerCase().indexOf("bc-");
        if(n != -1)
        {
                document.location.href = strUrl.substring(0, n);
                bc = strUrl.substring(n+3);
        }

        if (window.addTocInfo)
        {
        addButton("show",BTN_TEXT,"Show Table of Contents","","","","",0,0,"","","");

        }
        if (window.writeBtnStyle)
                writeBtnStyle();

        if (window.writeIntopicBar)
                writeIntopicBar(1);

        
        

        if (window.setRelStartPage)
        {
        setRelStartPage("../../../../Bookshelf.htm");

                autoSync(0);
                sendSyncInfo();
                sendAveInfoOut();
        }
}
else
        if (window.gbIE4)
                document.location.reload();

//-->
//]]>
</script>
<p style="margin-top: 0pt; color: #0000ff; font-size: 7pt;" align="right"><a href="../../../../Welcome_to_GroundWork_Monitor/index.htm" style="color: #0000ff; font-size: 7pt; text-decoration: none;">Home</a> &gt; <a href="../../../usingapplications_aboutusingapplications.htm" style="color: #0000ff; font-size: 7pt; text-decoration: none;">USING APPLICATIONS</a> &gt; <a href="../../configuration_aboutconfiguration.htm" style="color: #0000ff; font-size: 7pt; text-decoration: none;">Configuration</a> &gt; <a href="../configuration_configurationscenarios.htm" style="color: #0000ff; font-size: 7pt; text-decoration: none;">Configuration Scenarios</a>&#160;&gt;&#160;About Performance Graphs</p>
<p>&#160;</p>
<script src="../../../../ehlpdhtm.js" type="text/javascript" language="JavaScript1.2">
</script>
<h1><a name="MiniTOCBookMark1" id="MiniTOCBookMark1"></a><img src="../../../../Shared_Images/square.gif" alt="square.gif" style="border: none;" width="15" height="15" border="0" /> Configuration Scenarios</h1>
<h3 align="right"><a href="../configuration_configurationscenarios.htm" title="Topic Home" onmouseover="if ((parseInt(navigator.appVersion) == 4) &amp;&amp; (navigator.appName == 'Netscape')) ehlp_showtip(this,event,'Topic Home');" onmouseout="if ((parseInt(navigator.appVersion) == 4) &amp;&amp; (navigator.appName == 'Netscape')) ehlp_hidetip();"><img src="../../../../Shared_Images/homeicon.gif" alt="Topic Home" title="Topic Home" style="border: none;" width="33" height="27" border="0" /></a> <img src="../../../../Shared_Images/printicon.gif" onclick="window.print()" alt="Print Page" title="Print Page" style="border: none;" width="31" height="27" border="0" /> <a href="mailto:support@groundworkopensource.com?subject=Configuring Performance Graphs" title="Send Comments"><img src="../../../../Shared_Images/commentsicon.gif" alt="Send Comments" title="Send Comments" style="border: none;" width="33" height="27" border="0" /></a></h3>
<h2><a name="MiniTOCBookMark2" id="MiniTOCBookMark2"></a>About Performance Graphs</h2>
<p align="left">Table&#160;of&#160;Contents:&#160;<a class="dropspot" href="javascript:TextPopup(this)" id="MTHotSpot35231" name="MTHotSpot35231"><span class="MTText">Show</span><span class="MTText" style="display: none;">Hide</span></a></p>
<script type="text/javascript" language="JavaScript1.2">
//<![CDATA[
TextPopupInit('MTHotSpot35231', 'MTPOPUP35231');
//]]>
</script>
<div align="left" class="droptext" id="MTPOPUP35231" style="display: none;">
<ul style="text-align:left; list-style-type: circle;">
<li><a href="#MiniTOCBookMark3">Performance Graphs Process</a></li>
<li><a href="#MiniTOCBookMark4">Performance Data Handling in GroundWork Monitor</a></li>
<li><a href="#MiniTOCBookMark9">Performance Data Handling Parameters</a></li>
<li><a href="#MiniTOCBookMark10">Performance Process Data Flow</a></li>
<li><a href="#MiniTOCBookMark11">Implementing String Lists in Performance Configuration</a></li>
<li><a href="#MiniTOCBookMark12">Performance Testing and Debugging</a></li>
<li><a href="#MiniTOCBookMark15">Importing and Exporting Performance Configuration</a></li>
</ul>
</div>
<p>The <span style="font-weight: bold;"><b>Performance</b></span> option in the <span style="font-style: italic;"><i>Configuration</i></span> page enables users to generate performance graphs with data gathered from the <span style="font-style: italic;"><i>Nagios</i></span> monitoring system.</p>
<h3><a name="MiniTOCBookMark3" id="MiniTOCBookMark3"></a>Performance Graphs Process</h3>
<p><span style="font-style: italic;"><i>Nagios</i></span> is configured to pass service check performance data to a special event handler. The event handler gets chart parameters from a configuration database, interprets the performance data, then uses RRDtool to create or update RRD (Round Robin Database) data files each time the Service check is executed. CGI programs are provided to display the graphs. A default configuration database that matches installed <span style="font-style: italic;"><i>GroundWork</i></span> service profiles is delivered with the <span style="font-style: italic;"><i>GroundWork Monitor</i></span> package. This data can be modified by accessing the <span style="font-style: italic;"><i>GroundWork Monitor</i></span> <b>Configuration&gt;Performance</b> option.</p>
<p>Once RRD databases are created, there are several methods for displaying this data. In the <span style="font-style: italic;"><i>Status</i></span> page you can view performance graphs under a service if an RRD is associated with that host and service. The figure below displays a performance graph in <span style="font-style: italic;"><i>Status</i></span> for the <span style="font-weight: bold;"><b>CPU Utilization</b></span> performance metric returned by the <span style="font-weight: bold;"><b>local_cpu_mysql</b></span> service check<b><span style="font-weight: normal;">.</span></b></p>
<p class="Caption"><b><span style="font-weight: normal;">Figure: Performance Graph viewable in Status</span></b></p>
<p class="Figure" style="font-weight: normal;"><b><span style="font-weight: normal;"><img src="Assets/performance_status.gif" alt="performance_status.gif" style="border: none;" width="693" height="682" border="0" /></span></b></p>
<p>No additional configuration other than the procedure listed in this section is required. You may also show these as links off the <span style="font-style: italic;"><i>Nagios</i></span> service detail pages. In order to do this, you must create <span style="font-style: italic;"><i>Nagios</i></span> extended service information links and install graphing CGI programs. Generic versions of these are included with <span style="font-style: italic;"><i>GroundWork Monitor</i></span>.</p>
<h3><a name="MiniTOCBookMark4" id="MiniTOCBookMark4"></a>Performance Data Handling in GroundWork Monitor</h3>
<p>Any checks that are processed by <span style="font-style: italic;"><i>Nagios</i></span> may return performance data. See this link; <a href="http://nagiosplug.sourceforge.net/developer-guidelines.html" target="_blank">Nagios Plugin Development Guidelines</a>, which defines the format for plugin performance data.</p>
<h4><a name="MiniTOCBookMark5" id="MiniTOCBookMark5"></a>Performance Data Handling Process</h4>
<p>In the <span style="font-style: italic;"><i>GroundWork Monitor</i></span> package, <span style="font-style: italic;"><i>Nagios</i></span> writes all data (plugin output including performance data) to the <span class="CodeInline">service-perfdata.dat</span> file. Every 300 seconds Nagios runs the <span class="CodeInline">launch_perfdata_process</span> command, which runs the <span class="CodeInline">launch_perf_data_processing</span> script, which starts the <span class="CodeInline">process_service_perfdata_file</span> script if it is not already running, and that script reads a renamed copy of the <span class="CodeInline">service-perfdata.dat</span> file.</p>
<p>The service performance data file:</p>
<p class="CodeGroup"><span class="CodeInline">/usr/local/groundwork/nagios/var/service-perfdata.dat</span></p>
<p>the service performance data file processing interval</p>
<p class="CodeGroup"><span class="CodeInline">300</span></p>
<p>and the service performance data file processing command</p>
<p class="CodeGroup"><span class="CodeInline">launch_perfdata_process</span></p>
<p>are configurable in the <span style="font-style: italic;"><i>Configuration</i></span> page under <span style="font-weight: bold;"><b>Control,</b></span> <span style="font-weight: bold;"><b>Nagios Main Configuration</b></span> (on page 3).</p>
<p>The <span class="CodeInline">launch_perfdata_process</span> command invokes the script <span class="CodeInline">process_service_perfdata_file</span> which writes performance data into two places:</p>
<ol>
<li class="p-Numbering">
<p class="Numbering"><span style="font-weight: bold;"><b>RRD Files</b></span> - The script creates an RRD file whose name is a concatenation of the host name and the service name. The data in these RRDs are presented graphically in both the <span style="font-style: italic;"><i>Status</i></span> and <span style="font-style: italic;"><i>Performance</i></span> applications.</p>
</li>
<li class="p-Numbering">
<p class="Numbering"><span style="font-weight: bold;"><b>Foundation Database</b></span> - A summary of the performance data is also sent to <span style="font-style: italic;"><i>Foundation</i></span> which has a listener for performance data. How the data is persisted is described in detail below.</p>
</li>
</ol>
<p>At the end of processing <span style="font-style: italic;"><i>Nagios</i></span> reopens the <span class="CodeInline">service-perfdata.dat</span> file in append mode, which either continues to collect data in an unprocessed file, or starts a new file if the previous file was renamed for processing by the <span class="CodeInline">launch_perf_data_processing</span> script.</p>
<h4><a name="MiniTOCBookMark6" id="MiniTOCBookMark6"></a>RRD Files for Performance Data</h4>
<p>Performance data is stored into RRD files. Format and data aggregation information can be found at <a href="http://oss.oetiker.ch/rrdtool/doc/rrdtool.en.html" target="_blank">http://oss.oetiker.ch/rrdtool/doc/rrdtool.en.html</a>.</p>
<h4><a name="MiniTOCBookMark7" id="MiniTOCBookMark7"></a>Performance Data in Foundation</h4>
<p>Performance data is sent to <span style="font-style: italic;"><i>Foundation</i></span> as XML in a Web Services call, for efficient bulk-data transfer.</p>
<p>The <span class="CodeInline">process_service_perfdata_file</span> script includes the host name, service description, label, timestamp and performance value in the post to <span style="font-style: italic;"><i>Foundation</i></span>.</p>
<p>The business object in <span style="font-style: italic;"><i>Foundation</i></span> handling the incoming performance data is by default configured to average the performance data values for the check over a day. Along with the daily average, the maximum and minimum values for the day are also stored. Through configuration the range for average can be changed from a day to an hour interval. For details about changing the interval you can refer to <a href="../../../../Developer_Reference/Foundation/developer_configuringfoundation.htm">Configuring Foundation</a> in the <span style="font-weight: bold;"><b>DEVELOPER REFERENCE</b></span> section of the Bookshelf.</p>
<p>The performance data values are stored in the <span class="CodeInline">LogPerformanceData</span> table. For each service that provides performance data an entry per day is created.</p>
<h4><a name="MiniTOCBookMark8" id="MiniTOCBookMark8"></a>Reporting on Performance Data</h4>
<p>The <span style="font-style: italic;"><i>Reports</i></span> option in <span style="font-style: italic;"><i>GroundWork Monitor</i></span> includes two reports with performance data stored in <span style="font-style: italic;"><i>Foundation</i></span> by host group or by host. The reports allow drilldown to performance data by individual services. These reports are located under <span style="font-weight: bold;"><b>Reports</b></span>, <span style="font-weight: bold;"><b>Report Tree, Performance Reports.</b></span></p>
<ul style="list-style: url('../../../../Shared_Images/bullet01.gif');">
<li class="p-Bullet1">
<p class="Bullet1"><span style="font-weight: bold;"><b>Performance Report by Host (epr-host)</b></span>: This report shows the performance indicators identified by the Label value across a selected Host and Time Range.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><span style="font-weight: bold;"><b>Performance Report by Host Multi Variable (epr-host multi variable)</b></span>: Charts a report with up to two individually selected Hosts, units, and performance indicators present in the selected Hosts.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><span style="font-weight: bold;"><b>Performance Report by Hostgroup (epr-hostgroup)</b></span>: This report shows the performance indicators identified by the <span style="font-style: italic;"><i>Label</i></span> value across a selected Host Group and Time Range.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><span style="font-weight: bold;"><b>Performance Report by Hostgroup Multi Variable (epr-hostgroup multi variable)</b></span>: This report charts long-term performance trends for performance data for a selected Host Group. This report can help identify areas where additional capacity is needed due to steady increases in load or demand.</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1"><span style="font-weight: bold;"><b>Performance Report by Hostgroup Top Five (epr-hostgroup topfive)</b></span>: This report charts a selected performance indicator present in the selected Host Group.</p>
</li>
</ul>
<h3><a name="MiniTOCBookMark9" id="MiniTOCBookMark9"></a>Performance Data Handling Parameters</h3>
<p><a class="dropspot" href="javascript:TextPopup(this)" id="a1" style="font-size: 8pt;" name="a1"><img src="../../../../Shared_Images/screenshoticon.gif" title="View Screenshot" alt="screenshoticon.gif" style="border: none;" width="29" height="27" border="0" />Show/Hide</a> The <span style="font-style: italic;"><i>Configuration</i></span> page can to be used to properly configure the <span style="font-style: italic;"><i>Nagios Main Configuration</i></span> file to enable performance data handling. This should be already set up by the <span style="font-style: italic;"><i>GroundWork</i></span> installer. But these are the crucial configuration parameters. The image (select <span style="font-style: italic;"><i>Show/Hide</i></span>) shows the parameters in the <span style="font-style: italic;"><i>Nagios Main Configuration</i></span> screen that enable performance data handling.</p>
<div class="droptext" id="POPUP374471888" style="display: none;">
<p class="Caption">Figure: Nagios Main Configuration - Performance Data Handling</p>
<p class="Figure"><img src="Assets/configuration_performancesystemconfiguration.gif" alt="Performance Data Handling" style="border: none;" width="700" height="396" border="0" /></p>
<p class="Caption">Table: Performance Data Handling Parameter Descriptions</p>
<table cellspacing="0" width="700">
<col style="width: 25%;" />
<col style="width: 75%;" />
<tr style="height: 0px;">
<td style="border: Solid 2px #ffffff; padding-right: 5px; padding-left: 5px;" bgcolor="#EEEEEE">
<p class="NormalTableBold" style="color: #000000;">Process performance data:</p>
</td>
<td style="border-top: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; padding-right: 5px; padding-left: 5px;" bgcolor="#EEEEEE">
<p class="NormalTable">This configuration parameter is the global on/off switch for performance data processing and determines whether or not Nagios will process performance data returned from host and service checks. If this option is enabled (checked), host performance data will be processed using the host perfdata command (defined below) and service performance data will be processed using the service perfdata command (also defined below). If this parameter is unchecked, Nagios ignores any performance data returned from plugins.</p>
<p class="NormalTable">Unchecked = do not process performance data. Obviously, if we want to process the data and generate performance graphs, this parameter must be checked.</p>
</td>
</tr>
<tr style="height: 0px;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; padding-right: 5px; padding-left: 5px;" bgcolor="#EEEEEE">
<p class="NormalTableBold" style="color: #000000;">Host / Service</p>
<p class="NormalTableBold" style="color: #000000;">perfdata command</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; padding-right: 5px; padding-left: 5px;" bgcolor="#EEEEEE">
<p class="NormalTable">There are two methods Nagios uses to process performance data. It can either invoke an in-line event handler every time a plugin runs and hand the performance data to that event handler for processing, or it can write all the performance data to a file for batch processing at a later time. Since the in-line event handler has a lot more overhead and imposes a performance penalty on the system, in GroundWork Monitor, we use the file based method.</p>
<p class="NormalTable">Set this parameter to a blank value to avoid calling a script for every plugin result.</p>
</td>
</tr>
<tr style="height: 0px;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; padding-right: 5px; padding-left: 5px;" bgcolor="#EEEEEE">
<p class="NormalTableBold" style="color: #000000;">Host / Service</p>
<p class="NormalTableBold" style="color: #000000;">performance data file</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; padding-right: 5px; padding-left: 5px;" bgcolor="#EEEEEE">
<p class="NormalTable">This is the file to which Nagios will write the Host / Service performance data returned by plugins when using the file based batch processing method. When the actual event handler runs at 5 minute intervals, it will parse this file, process all the entries, then effectively zero out the file so Nagios can start refilling it with new performance data.</p>
<p class="NormalTable">In GroundWork Monitor, the value assigned to the <span style="font-style: italic;"><i>Service Performance Data File</i></span> parameter should be: <span style="font-weight: bold;"><b>/usr/local/groundwork/nagios/var/service-perfdata.dat</b></span></p>
</td>
</tr>
<tr style="height: 0px;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; padding-right: 5px; padding-left: 5px;" bgcolor="#EEEEEE">
<p class="NormalTableBold" style="color: #000000;">Host / Service</p>
<p class="NormalTableBold" style="color: #000000;">performance data file template</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; padding-right: 5px; padding-left: 5px;" bgcolor="#EEEEEE">
<p class="NormalTable">This is the template that defines the format of the <span class="CodeInline" style="font-size: 8pt;"><font size="1" style="font-size:8pt;">service-perfdata.dat</font></span> file to which Nagios will write all the performance data. The template may contain macros, special characters (<span class="CodeInline" style="font-size: 8pt;"><font size="1" style="font-size:8pt;">\t</font></span> for tab, <span class="CodeInline" style="font-size: 8pt;"><font size="1" style="font-size:8pt;">\r</font></span> for carriage return, <span class="CodeInline" style="font-size: 8pt;"><font size="1" style="font-size:8pt;">\n</font></span> for newline) and plain text. A newline is automatically added after each write to the performance data file. Nagios macros are defined in the Nagios documentation.</p>
<p class="NormalTable">In GroundWork Monitor, this value should be: <span style="font-weight: bold;"><b>$LASTSERVICECHECK$\t$HOSTNAME$\t$SERVICEDESC$\t$SERVICEOUTPUT$\t$SERVICEPERFDATA$</b></span></p>
</td>
</tr>
<tr style="height: 0px;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; padding-right: 5px; padding-left: 5px;" bgcolor="#EEEEEE">
<p class="NormalTableBold" style="color: #000000;">Host / Service</p>
<p class="NormalTableBold" style="color: #000000;">performance data file mode</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; padding-right: 5px; padding-left: 5px;" bgcolor="#EEEEEE">
<p class="NormalTable">This parameter controls the method Nagios uses to write to the <span class="CodeInline" style="font-size: 8pt;"><font size="1" style="font-size:8pt;">service-perfdata.dat</font></span> file. Choices are <span class="CodeInline" style="font-size: 8pt;"><font size="1" style="font-size:8pt;">a</font></span> for append or <span class="CodeInline" style="font-size: 8pt;"><font size="1" style="font-size:8pt;">w</font></span> for write.</p>
<p style="font-size: 8pt;">In the current release of GroundWork Monitor, the <span style="font-style: italic;"><i>Service performance data file mode</i></span> should be set to: <span style="font-weight: bold;"><b>a</b></span></p>
</td>
</tr>
<tr style="height: 0px;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; padding-right: 5px; padding-left: 5px;" bgcolor="#EEEEEE">
<p class="NormalTableBold" style="color: #000000;">Host / Service</p>
<p class="NormalTableBold" style="color: #000000;">performance data file processing interval</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; padding-right: 5px; padding-left: 5px;" bgcolor="#EEEEEE">
<p class="NormalTable">This is the frequency (in seconds) with which Nagios will invoke the event handler to process the performance data in the <span class="CodeInline" style="font-size: 8pt;"><font size="1" style="font-size:8pt;">service-perfdata.dat</font></span> file. Set the value for services to: <span style="font-weight: bold;"><b>300</b></span></p>
</td>
</tr>
<tr style="height: 0px;">
<td style="border-left: Solid 2px #ffffff; border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; padding-right: 5px; padding-left: 5px;" bgcolor="#EEEEEE">
<p class="NormalTableBold" style="color: #000000;">Host / Service</p>
<p class="NormalTableBold" style="color: #000000;">performance data file processing command</p>
</td>
<td style="border-right: Solid 2px #ffffff; border-bottom: Solid 2px #ffffff; padding-right: 5px; padding-left: 5px;" bgcolor="#EEEEEE">
<p class="NormalTable">This is the actual event handler Nagios will invoke to process the data in the <span class="CodeInline" style="font-size: 8pt;"><font size="1" style="font-size:8pt;">service-perfdata.dat</font></span> file. This event handler will indirectly create all the RRDs and update the data in those RRDs in future passes.</p>
<p class="NormalTable">Set this to the value: <span style="font-weight: bold;"><b>launch_perfdata_process</b></span></p>
</td>
</tr>
</table>
<h1>&#160;</h1>
</div>
<p>Most of the plugins in the <span style="font-style: italic;"><i>GroundWork Monitor</i></span> distribution output formatted performance data. The standard that defines how this data should be formatted is in the <a href="http://nagiosplug.sourceforge.net/developer-guidelines.html" target="_blank">Nagios Plugin Development Guidelines</a>.</p>
<p><span style="font-weight: bold; color: #ff0000;"><font color="red"><b>Note:</b></font></span> <span style="font-style: italic;"><i>Nagios</i></span> has the ability to process performance data from both hosts and services. Service checks are executed at regular intervals. Host checks, on the other hand, may never be executed at all. <span style="font-style: italic;"><i>Nagios</i></span> only executes host checks when it is doing dependency calculations. Therefore the sporadic nature of host checks renders Host performance data unsuitable for graphing. This is why, in <span style="font-style: italic;"><i>GroundWork Monitor</i></span>, we only concern ourselves with service performance data.</p>
<h3><a name="MiniTOCBookMark10" id="MiniTOCBookMark10"></a>Performance Process Data Flow</h3>
<p><a class="dropspot" href="javascript:TextPopup(this)" id="a2" style="font-size: 8pt;" name="a2"><img src="../../../../Shared_Images/screenshoticon.gif" title="View Screenshot" alt="screenshoticon.gif" style="border: none;" width="29" height="27" border="0" />Show/Hide</a> When <span style="font-style: italic;"><i>Nagios</i></span> schedules a plugin to execute, the plugin returns two types of data on standard output. Both of these fields are in the same line. These two fields are separated by the pipe operator (|). &#160;Everything before the pipe operator <span style="font-style: italic;"><i>Nagios</i></span> considers to be status text, and is inserted in the status field of the <span style="font-style: italic;"><i>Nagios</i></span> (and <span style="font-style: italic;"><i>Status</i></span>) user interface. The status text is also inserted into the <span style="font-style: italic;"><i>Nagios</i></span> macro $SERVICEOUTPUT$. &#160;The text that follows the pipe operator is inserted into the macro $SERVICEPERFDATA$ and is also written into the <span class="CodeInline">service-perfdata.dat</span> file.</p>
<div class="droptext" id="POPUP382169898" style="display: none;">
<p class="Caption">Figure: Performance Data Flow</p>
<p class="Figure"><img src="Assets/performance_data_flow.gif" alt="performance_data_flow.gif" style="border: none;" width="793" height="433" border="0" /></p>
<h1>&#160;</h1>
</div>
<p>A typical plugin output should look something like this:</p>
<p class="CodeGroup">OK - load average: 0.35, 0.29, 0.20 | load1=0.350;5.000;10.000;0; load5=0.290;4.000;6.000;0; load15=0.200;3.000;4.000;0;</p>
<p>Everything before the pipe operator is status text and everything after it is formatted performance data.</p>
<p>If we properly configured the <span class="CodeInline">service_perfdata</span> configuration directives, <span style="font-style: italic;"><i>Nagios</i></span> takes this plugin output and records it in a log file:</p>
<p class="CodeGroup">/usr/local/groundwork/nagios/var/service-perfdata.dat</p>
<p>At 5 minute intervals (this can be adjusted using the <span class="CodeInline">service_perfdata_file_processing_interval</span>) <span style="font-style: italic;"><i>Nagios</i></span> runs the performance eventhandler command (<span class="CodeInline">launch_perfdata_process</span>). The <span class="CodeInline">process_service_perfdata_file</span> script that it eventually launches in turn performs several tasks. It reads from the <span class="CodeInline">service-perfdata.dat</span> file to extract the performance data Nagios has written there. For each service check result it finds there, it does a database lookup of the service name in the <span class="CodeInline">performanceconfig</span> table in the Monarch database. This table (indexed by service name) contains the unique RRD create commands and RRD update commands appropriate for the data returned by that particular plugin.</p>
<p>The <span class="CodeInline">process_service_perfdata_file</span> script uses this information to create the RRDs in the first instance, then to update the data in them on subsequent executions of the service.</p>
<p>Those RRDs are read by the CGI specified in the <span class="CodeInline">performanceconfig</span> entry (these can be customized) and then presented for viewing in the <span style="font-style: italic;"><i>Status</i></span> application.</p>
<p>There is also a graphical user interface on the <span class="CodeInline">performanceconfig</span> table (<span style="font-style: italic;"><i>Configuration&gt;Performance</i></span>), so the operator can adjust RRD create and update strings, or even specify which CGI will be used to graph them.</p>
<p>The <span class="CodeInline">process_service_perfdata_file</span> script does more, however. Whenever it has to create a new RRD, it writes the path and filename of that RRD into the <span class="CodeInline">datatype</span> table in the Monarch database, and makes a corresponding entry in the host_service table. These tables are used by the Performance application to locate the various RRDs in the system. Performance is able to read in the data from multiple RRDs and consolidate that data into a single graph.</p>
<p>This event handler also does a Web Services post to Foundation, which inserts summary performance data into the GWCollageDB for use by the EPR Reports.</p>
<p>Finally, <span class="CodeInline">process_service_perfdata_file</span> has the ability to generate a debug log file which is very helpful in diagnosing RRD problems in the system. The file is named <span class="CodeInline">process_service_perfdata_file.log</span> and logging to it can be turned on and off using the <span class="CodeInline">debug_level</span> in the <span class="CodeInline">perfdata.properties</span> file. To increase debug logging, edit <span class="CodeInline">perfdata.properties</span> and change this line:</p>
<p class="CodeGroup">debug_level=1</p>
<p>to this:</p>
<p class="CodeGroup">debug_level=3</p>
<p><span style="font-weight: bold; color: #ff0000;"><font color="red"><b>Note:</b></font></span> The logging is quite voluminous and this file can get to be very large in a relatively short period of time. <span style="font-weight: bold;"><b>Don’t forget</b></span> to turn this off (by setting <span class="CodeInline">debug_level=1</span>) when you are finished troubleshooting your RRD problem and then kill the <span class="CodeInline">process_service_perfdata_file</span> script so it gets restarted and picks up the new value.&#160;This occurs automatically the next time <span style="font-style: italic;"><i>Nagios</i></span> is restarted which happens during a <span style="font-style: italic;"><i>Commit</i></span>, or you can force it manually with the following command:</p>
<p class="CodeGroup">service groundwork restart nagios</p>
<h3><a name="MiniTOCBookMark11" id="MiniTOCBookMark11"></a>Implementing String Lists in Performance Configuration</h3>
<p>Under <b>Performance&gt;Configure</b>, set up one or more service-host entries for the passive services you defined. You may create these in any manner you like, but ensure that the RRD Create Command entry is of the following form:</p>
<p class="CodeGroup">$RRDTOOL$ create $RRDNAME$ --step 300 --start n-1yr $LISTSTART$DS:$LABEL#$:GAUGE:900:U:U$LISTEND$ RRA:AVERAGE:0.5:1:8640 RRA:AVERAGE:0.5:12:9480</p>
<p>Basically, everything between <span class="CodeInline">$LISTSTART$</span> and <span class="CodeInline">$LISTEND$</span> will be replicated for each <span class="CodeInline">label=value</span> pair in the performance data. You may, of course, change the DS type from <span class="CodeInline">GAUGE</span> to any supported value, or change any of the RRA parameters. Similarly, ensure that the <span style="font-style: italic;"><i>RRD Update Command</i></span> is of the following form:</p>
<p class="CodeGroup">$RRDTOOL$ update $RRDNAME$ -t $LABELLIST$ $LASTCHECK$:$VALUELIST$ 2&gt;&amp;1</p>
<p>The <span class="CodeInline">$LABELLIST$</span> and <span class="CodeInline">$VALUELIST$</span> marcos will be expanded to the derived lists of labels and values parsed from the performance data.</p>
<h3><a name="MiniTOCBookMark12" id="MiniTOCBookMark12"></a>Performance Testing and Debugging</h3>
<p>Use the following steps to ensure that the performance handler is working as expected. The performance handler log file is <span class="CodeInline">/usr/local/groundwork/nagios/var/log/process_service_perfdata_file.log</span>, as configured in the <span class="CodeInline">perfdata.properties</span> file. At a high <span class="CodeInline">debug_level</span> setting, the following information is entered in the log for each plugin execution:</p>
<ul style="list-style: url('../../../../Shared_Images/bullet01.gif');">
<li class="p-Bullet1">
<p class="Bullet1">Performance eventhandler execution time stamp</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Host name</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Service name</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Last check time in UTC format</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Status Text</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Performance data string</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Parsing results</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Interpreted RRD create command string</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Interpreted RRD update command string</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">RRD command results</p>
</li>
<li class="p-Bullet1">
<p class="Bullet1">Execution time</p>
</li>
</ul>
<h4><a name="MiniTOCBookMark13" id="MiniTOCBookMark13"></a>Service Entry Log Results</h4>
<p>To debug a performance handler problem, look at the log results for your Service entry. Check the following steps:</p>
<ol>
<li class="p-Numbering">
<p class="Numbering">Service is being parsed properly</p>
</li>
<li class="p-Numbering">
<p class="Numbering">The configuration entry information is correct</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Performance or status information is being parsed correctly</p>
</li>
<li class="p-Numbering">
<p class="Numbering">The correct entry of the performanceconfig database is used</p>
</li>
<li class="p-Numbering">
<p class="Numbering">RRD commands are properly interpreted</p>
</li>
<li class="p-Numbering">
<p class="Numbering">RRD commands are executing without an error message</p>
</li>
</ol>
<h4><a name="MiniTOCBookMark14" id="MiniTOCBookMark14"></a>Chart Generation Error</h4>
<p>To debug a chart generation error, check the following:</p>
<ol>
<li class="p-Numbering">
<p class="Numbering">Make sure the RRD is being generated for your Host/Service. RRDs are stored in the directory: <span class="CodeInline">/usr/local/groundwork/rrd</span></p>
</li>
<li class="p-Numbering">
<p class="Numbering">Check to make sure you have the correct CGI program referenced in the Service extended information template.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Make sure the browser is opening the referenced CGI program when you click on the graph icon.</p>
</li>
<li class="p-Numbering">
<p class="Numbering">Make sure the CGI program references the correct data set names defined in the RRD creation command.</p>
</li>
</ol>
<p><span style="font-weight: bold; color: #ff0000;"><font color="red"><b>Note:</b></font></span> The logging is quite voluminous and this file can get to be very large in a relatively short period of time. <span style="font-weight: bold;"><b>Don’t forget</b></span> to turn this off (by setting <span class="CodeInline">debug_level=1</span>) when you are finished troubleshooting your RRD problem and then kill the <span class="CodeInline">process_service_perfdata_file</span> script so it gets restarted and picks up the new value.&#160;This occurs automatically the next time <span style="font-style: italic;"><i>Nagios</i></span> is restarted which happens during a <span style="font-style: italic;"><i>Commit</i></span>, or you can force it manually with the following command:</p>
<p class="CodeGroup">service groundwork restart nagios</p>
<h3><a name="MiniTOCBookMark15" id="MiniTOCBookMark15"></a>Importing and Exporting Performance Configuration</h3>
<p>Definitions in the performance configuration database may be exported to transfer to another system or for backup purposes. To export the entire performance configuration database, select the <i>Export All</i> button at the top of the Performance Configuration utility page. To export a specific performance configuration entry, select the <i>Export</i> button for that entry. The exported file is placed by default in the <span class="CodeInline">/tmp</span> directory. This is an XML file describing each field entry. A sample file is shown below.</p>
<p class="CodeGroup">&lt;groundwork_performance_configuration&gt;</p>
<p class="CodeGroup">&lt;service_profile name="gwsp-service_ping"&gt;</p>
<p class="CodeGroup">&lt;graph name="Ping response time "&gt;</p>
<p class="CodeGroup">&lt;host&gt;*&lt;/host&gt;</p>
<p class="CodeGroup">&lt;service regx="1"&gt;&lt;![CDATA[Host Alive]]&gt;&lt;/service&gt;</p>
<p class="CodeGroup">&lt;type&gt;nagios&lt;/type&gt;</p>
<p class="CodeGroup">&lt;enable&gt;1&lt;/enable&gt;</p>
<p class="CodeGroup">&lt;label&gt;Ping Response Time&lt;/label&gt;</p>
<p class="CodeGroup">&lt;rrdname&gt;&lt;![CDATA[/usr/local/groundwork/rrd/$HOST$_$SERVICE$.rrd]]&gt;&lt;/rrdname&gt;</p>
<p class="CodeGroup">&lt;rrdcreatestring&gt;&lt;![CDATA[$RRDTOOL$ create $RRDNAME$ --step 300 --start n-1yr DS:number:GAUGE:900:U:U RRA:AVERAGE:0.5:1:2880 RRA:AVERAGE:0.5:5:4032 RRA:AVERAGE:0.5:15:5760 RRA:AVERAGE:0.5:60:8640]]&gt;&lt;/rrdcreatestring&gt;</p>
<p class="CodeGroup">&lt;rrdupdatestring&gt;&lt;![CDATA[$RRDTOOL$ update $RRDNAME$ $LASTSERVICECHECK$:$VALUE1$ 2&gt;&amp;1]]&gt;&lt;/rrdupdatestring&gt;</p>
<p class="CodeGroup">&lt;graphcgi&gt;&lt;![CDATA[/nagios/cgi-bin/number_graph.cgi]]&gt;&lt;/graphcgi&gt;</p>
<p class="CodeGroup">&lt;parseregx first="0"&gt;&lt;![CDATA[]]&gt;&lt;/parseregx&gt;</p>
<p class="CodeGroup">&lt;perfidstring&gt;&lt;/perfidstring&gt;</p>
<p class="CodeGroup">&lt;/graph&gt;</p>
<p class="CodeGroup">&lt;/service_profile&gt;</p>
<p class="CodeGroup">&lt;/groundwork_performance_configuration&gt;</p>
<h4><a name="MiniTOCBookMark16" id="MiniTOCBookMark16"></a>Import Exported File</h4>
<p>To import an exported file, execute the following script which will read the exported XML file and insert the entry into the performance configuration database.</p>
<p class="CodeGroup">/usr/local/groundwork/tools/profile_scripts/import_perfconfig.pl &lt;xml_file_name&gt;</p>
<div style="width: 100%; position: relative;" id="footer">
<p class="Footer" style="font-size: 7pt; line-height: Normal; margin-top: 6pt; margin-bottom: 4pt;">GroundWork, Inc. ©2011</p>
</div>
<script type="text/javascript" language="JavaScript1.2">
//<![CDATA[
        if( typeof( TextPopupInit ) != 'function' ) TextPopupInit = new Function();
        TextPopupInit('a1','POPUP374471888');
        TextPopupInit('a2','POPUP382169898');
//]]>
</script><script type="text/javascript" language="JavaScript">
//<![CDATA[
 if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == 'Netscape'))
  document.write("<div id='tooltip' class='WebHelpPopupMenu'><\/div>");
//]]>
</script><script type="text/javascript" language="javascript1.2">
//<![CDATA[
<!--
if (window.writeIntopicBar)
        writeIntopicBar(0);


highlightSearch();
//-->
//]]>
</script>
</body>
</html>
