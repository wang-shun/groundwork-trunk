@version: 3.16
##
##  The syslog-ng.conf configuration file uses blocks (options, source, filter, destination, and log)
##  that together specify options, and how log entries are gathered, matched, and routed.
##
#
#  Options
#
options
{
	keep_hostname(yes);
	chain_hostnames(yes);			# this means the originator of the message is the HOST, a good thing!
	time_reopen(5);
	normalize_hostnames(no);
	use_fqdn(no);				# This makes it easy to match hosts to Nagios/GW; set to yes to see Long Name
#	use_dns(yes);				# Turn this on to get fewer IP address vs Host Name; issue w DOS attack
	log_msg_size(4126);			# GWMON-12233 allow Log messages up to max 4096 need to set to +30
        log_fifo_size(10000);                   # GWMON-13168 to allow compatibility with latest version of syslog-ng
};

#
# Sources
# You will want to adjust these and add the log files of interest
#

source s_local	{ unix-stream("/dev/log"); internal(); };
source kernsrc	{ file("/proc/kmsg"); };
source s_udp	{ udp(); };

#
# Filters
# Note: Regexes (PCRE) are supported, or POSIX, if explicitly designated.
# 

filter f_authlog	{ facility(auth,authpriv) and level(info); };
filter f_cron		{ facility(cron) and level(info); };
filter f_maillog	{ facility(mail) and level(info); };
filter f_alluser	{ level(emerg); };
filter f_local7		{ facility(local7); };
filter f_messages	{ level(info..emerg) and not facility(auth,authpriv,cron,mail,news); };

filter f_gw_ok
{
	(
	match ("has logged on via SSH from" value("MESSAGE"))
	or match ("logged in for Web" value("MESSAGE"))
	or match ("WARNING 2k temperature" value("MESSAGE"))
	or match ("link is unstable" value("MESSAGE"))
	or match ("authentication failure" value("MESSAGE"))
	or match ("IO failure" value("MESSAGE"))
	or match ("login failures" value("MESSAGE"))
	or match ("LMI link is down" value("MESSAGE"))
	or match ("error getting update" value("MESSAGE"))
	);
};

filter f_gw_warn
{
	(
	match ("" value("MESSAGE"))
	);
};

filter f_gw_crit
{
	(
	match ("MLT INFO SMLT" value("MESSAGE"))
	or match ("Power Supply" value("MESSAGE"))
	or match ("reloading configuration failed" value("MESSAGE"))
	or match ("from an unknown SNMP" value("MESSAGE") )
	);
};

filter f_gw_unkn
{
	(
	not match ("has logged on via SSH from" value("MESSAGE"))
        and not  match ("logged in for Web" value("MESSAGE"))
        and not match ("WARNING 2k temperature" value("MESSAGE"))
        and not match ("link is unstable" value("MESSAGE"))
        and not match ("authentication failure" value("MESSAGE"))
        and not match ("IO failure" value("MESSAGE"))
        and not match ("login failures" value("MESSAGE"))
        and not match ("LMI link is down" value("MESSAGE"))
        and not match ("error getting update" value("MESSAGE"))
	and not match ("groundworks_admin" value("MESSAGE"))
	and not match ("NATIVE_VLAN_MISMATCH" value("MESSAGE"))
        and not match ("MLT INFO SMLT" value("MESSAGE"))
        and not match ("Power Supply" value("MESSAGE"))
        and not match ("reloading configuration failed" value("MESSAGE"))
        and not match ("from an unknown SNMP" value("MESSAGE"))
	);
};

filter f_gw_foundation { ( not match ("groundworks_admin" value("MESSAGE")) and not match ("NATIVE_VLAN_MISMATCH" value("MESSAGE")) ); };

#
# Templates
#

# foundation feeder template
template t_gw_feeder {
        template("<GENERICLOG consolidation='SYSLOG' MonitorServerName='localhost' Device='$HOST' ApplicationType='SYSLOG' MonitorStatus='UNKNOWN' ReportDate='$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC' Severity='UNKNOWN' ipaddress='$SOURCEIP' SubComponent='$PROGRAM' TextMessage='$MSG' />\n");
};

# Standard event templates syslog_last
template t_gw_nagios_ok   { template("[$UNIXTIME] PROCESS_SERVICE_CHECK_RESULT;$HOST;syslog_last;0;OK syslog_$FACILITY $MSG\n"); };
template t_gw_nagios_warn { template("[$UNIXTIME] PROCESS_SERVICE_CHECK_RESULT;$HOST;syslog_last;1;WARNING syslog_$FACILITY $MSG\n"); };
template t_gw_nagios_crit { template("[$UNIXTIME] PROCESS_SERVICE_CHECK_RESULT;$HOST;syslog_last;2;CRITICAL syslog_$FACILITY $MSG\n"); };
template t_gw_nagios_unkn { template("[$UNIXTIME] PROCESS_SERVICE_CHECK_RESULT;$HOST;syslog_last;3;UNKNOWN syslog_$FACILITY $MSG\n"); };

#
# Use these templates if you want to both send and auto-clear events syslog_last
# Note: there is no need to "clear" an OK state - that is the cleared state
#

template t_gw_nagios_warn_clear
{
	template("[$UNIXTIME] PROCESS_SERVICE_CHECK_RESULT;$HOST;syslog_last;1;WARNING $MSG\n[$UNIXTIME] PROCESS_SERVICE_CHECK_RESULT;$HOST;syslog_last;0;OK Cleared Alarm, Review Notification and Console Event\n");
};

template t_gw_nagios_crit_clear
{
	template("[$UNIXTIME] PROCESS_SERVICE_CHECK_RESULT;$HOST;syslog_last;2;CRITICAL $MSG\n[$UNIXTIME] PROCESS_SERVICE_CHECK_RESULT;$HOST;syslog_last;0;OK Cleared Alarm, Review Notification and Console Event\n");
};

template t_gw_nagios_unkn_clear
{
	template("[$UNIXTIME] PROCESS_SERVICE_CHECK_RESULT;$HOST;syslog_last;3;UNKNOWN $MSG\n[$UNIXTIME] PROCESS_SERVICE_CHECK_RESULT;$HOST;syslog_last;0;OK Cleared Alarm, Review Notification and Console Event\n");
};


#
# Destinations
#

destination messages	  { file("/var/log/messages"); };
destination secure	  { file("/var/log/secure"); };
destination maillog	  { file("/var/log/maillog"); };
destination cron	  { file("/var/log/cron"); };
destination boot.log	  { file("/var/log/boot.log"); };
destination alluser	  { usertty("*"); };
destination kern	  { file("/var/log/kern.log"); };
destination host_splitter { file( "/usr/local/groundwork/common/var/log/syslog-ng/$HOST/$HOST.$YEAR-$MONTH-$DAY" owner(root) group(root) perm(0644) dir_perm(0755) create_dirs(yes)); };
destination d_gw_feeder   { tcp("127.0.0.1" port(4913) template(t_gw_feeder)); };

# debug destinations for the standard tamplates
# destination d_gw_nagios_ok_debug   { file("/usr/local/groundwork/common/var/log/syslog-ng/debug" owner(root) group(root)perm(0644) dir_perm(0755) template(t_gw_nagios_ok)); };
# destination d_gw_nagios_warn_debug { file("/usr/local/groundwork/common/var/log/syslog-ng/debug" owner(root) group(root)perm(0644) dir_perm(0755) template(t_gw_nagios_warn)); };
# destination d_gw_nagios_crit_debug { file("/usr/local/groundwork/common/var/log/syslog-ng/debug" owner(root) group(root)perm(0644) dir_perm(0755) template(t_gw_nagios_crit)); };
# destination d_gw_nagios_unkn_debug { file("/usr/local/groundwork/common/var/log/syslog-ng/debug" owner(root) group(root)perm(0644) dir_perm(0755) template(t_gw_nagios_unkn)); };

# standard destinations; must also be configured and enabled in /usr/local/groundwork/config/syslog2nagios.conf if enabled here
# destination d_gw_nagios_ok   { program("/usr/local/groundwork/common/bin/syslog2nagios.pl >/dev/null 2>&1" template(t_gw_nagios_ok)); };
# destination d_gw_nagios_warn { program("/usr/local/groundwork/common/bin/syslog2nagios.pl >/dev/null 2>&1" template(t_gw_nagios_warn)); };
# destination d_gw_nagios_crit { program("/usr/local/groundwork/common/bin/syslog2nagios.pl >/dev/null 2>&1" template(t_gw_nagios_crit)); };
# destination d_gw_nagios_unkn { program("/usr/local/groundwork/common/bin/syslog2nagios.pl >/dev/null 2>&1" template(t_gw_nagios_unkn)); };

# both sending and auto-clearing destinations; must also be configured and enabled in /usr/local/groundwork/config/syslog2nagios.conf if enabled here
# destination d_gw_nagios_ok_clear   { program("/usr/local/groundwork/common/bin/syslog2nagios.pl >/dev/null 2>&1" template(t_gw_nagios_ok_clear)); };
# destination d_gw_nagios_warn_clear { program("/usr/local/groundwork/common/bin/syslog2nagios.pl >/dev/null 2>&1" template(t_gw_nagios_warn_clear)); };
# destination d_gw_nagios_crit_clear { program("/usr/local/groundwork/common/bin/syslog2nagios.pl >/dev/null 2>&1" template(t_gw_nagios_crit_clear)); };
# destination d_gw_nagios_unkn_clear { program("/usr/local/groundwork/common/bin/syslog2nagios.pl >/dev/null 2>&1" template(t_gw_nagios_unkn_clear)); };


#
# Logs
#
# The following are default logging settings. You probably will not want to change these.
log { source(kernsrc); destination(kern); };
log { source(s_local); filter(f_messages); destination(messages); };
log { source(s_local); filter(f_authlog);  destination(secure); };
log { source(s_local); filter(f_maillog);  destination(maillog); };
log { source(s_local); filter(f_cron);     destination(cron); };
log { source(s_local); filter(f_local7);   destination(boot.log); };
log { source(s_local); filter(f_alluser);  destination(alluser); };

# The following sends incoming log streams to the disk, one per host.
# This is used by the default profiles to check logs for content.
# You probably will not want to change this.
log { source(s_udp); destination(host_splitter); };


# The following are optional and should only be used if you are quite clear
# about what they will do.  They are supplied here in the hope that they will be useful.
# You many contact GroundWork Support if you want to know more about them.  They are not
# yet fully documented.

# send mesages to foundation (bypassing Nagios)
rewrite r_xml_entity_subst{
    subst("&", "&amp;",  value("MESSAGE"), flags("global"));
    subst('"', "&quot;", value("MESSAGE"), flags("global"));
    subst("'", "&apos;", value("MESSAGE"), flags("global"));
    subst("<", "&lt;",   value("MESSAGE"), flags("global"));
    subst(">", "&gt;",   value("MESSAGE"), flags("global"));
};
# log { source(s_udp); filter(f_gw_foundation); rewrite(r_xml_entity_subst); destination(d_gw_feeder); };

# Send filter results to debug logs (use for, you guessed it, debugging).
# log { source(s_udp); filter(f_gw_ok);   destination(d_gw_nagios_ok_debug); };
# log { source(s_udp); filter(f_gw_warn); destination(d_gw_nagios_warn_debug); };
# log { source(s_udp); filter(f_gw_crit); destination(d_gw_nagios_crit_debug); };
# log { source(s_udp); filter(f_gw_unkn); destination(d_gw_nagios_unkn_debug); };

# If you are using Nagios for alerts on logs, you can use these statements to send nagios the matching events.
# log { source(s_udp); filter(f_gw_ok);   destination(d_gw_nagios_ok); };
# log { source(s_udp); filter(f_gw_warn); destination(d_gw_nagios_warn); };
# log { source(s_udp); filter(f_gw_crit); destination(d_gw_nagios_crit); };
# log { source(s_udp); filter(f_gw_unkn); destination(d_gw_nagios_unkn); };

# Similarly, these will automatically both send and clear the nagios events.
# log { source(s_udp); filter(f_gw_ok);   destination(d_gw_nagios_ok_clear); };
# log { source(s_udp); filter(f_gw_warn); destination(d_gw_nagios_warn_clear); };
# log { source(s_udp); filter(f_gw_crit); destination(d_gw_nagios_crit_clear); };
# log { source(s_udp); filter(f_gw_unkn); destination(d_gw_nagios_unkn_clear); };
