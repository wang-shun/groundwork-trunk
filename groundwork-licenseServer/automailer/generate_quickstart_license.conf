# ================================================================
# Configuration file for the generate_quickstart_license script.
# ================================================================

# Whether to process anything.  Turn this off if you want to disable this
# process completely in case it gets run some time when you're not expecting
# it to.  This option is turned off in the default configuration file simply
# so the script can be safely installed before it is locally configured.
# To get the software to run, it must be turned on here once the rest of
# the setup is correct for your installation.
# FIX THIS:  make this "no" in the copy we ship, so the user is forced
# to deal with the config file before putting the script into operation
# [yes/no]
enable_processing = no

# Whether any output email should be generated.
# Turn this off for development-debugging or initial-setup sessions where
# you don't want any license-key email sent to anyone, neither the customer
# nor the debug account.  Turn this on for production use.
# [yes/no]
enable_output_to_customer = yes

# Whether output to the customer should be redirected to the
# debug_target_email_address specified below.
# Turn this on for internal debugging sessions, off for production use.
# [yes/no]
# FIX THIS:  keep this "yes" in the copy we ship, so the user is forced
# to deal with the config file before putting the script into operation
output_to_debug_target = yes

# Whether to obfuscate the license key before sending out email.
# Turn this on for ordinary debugging, to avoid sending out valid keys
# when you might not want to, but otherwise allow yourself to exercise the
# rest of the script's capabilities.  Turn this off for production use.
# [yes/no]
# FIX THIS:  keep this "yes" in the copy we ship, so the user is forced
# to deal with the config file before putting the script into operation
obfuscate_license_key = yes

# Global Debug Level Flag;
# No debug = 0, Statistics = 5, Normal debug = 6, Detail debug = 7.
# More precisely, specify one of the following numbers:
# NONE    = 0; turn off all debug info
# FATAL   = 1; the application is about to die
# ERROR   = 2; the application has found a serious problem, but will attempt to recover
# WARNING = 3; the application has found an anomaly, but will try to handle it
# NOTICE  = 4; the application wants to inform you of a significant event
# STATS   = 5; the application wants to log statistical data for later analysis
# INFO    = 6; the application wants to log a potentially interesting event
# DEBUG   = 7; the application wants to log detailed debugging data
debug_level = 6

# Where to read incoming messages.  Only connections via SSL are supported.
# For some as-yet unknown reason, imap.gwoslabs.com port 993 won't work here
# even though it is open, so we have to use the public GMail SSL IMAP server
# and provide our own domain in the email account.
incoming_email_server   = "imap.gmail.com"
incoming_email_port     = 993
# FIX THIS:  Use some other email account and password in the default copy
# of this configuration file, so alternate installations don't accidentally
# access the live production server.
incoming_email_address  = "core_register@gwoslabs.com"
incoming_email_password = "XYZZY"

# What email account to use when sending outgoing messages.
# Only connections via SSL (GMail port 465) are supported.
outgoing_email_server   = "smtp.gmail.com"
outgoing_email_port     = 465
# For development testing, we often just use the same account for outgoing
# email as we the account probed for the incoming license key requests.
# outgoing_email_address  = $incoming_email_address
# outgoing_email_password = $incoming_email_password
# FIX THIS: In production, this must be changed to "orders@gwoslabs.com" and its password.
outgoing_email_address  = "core_orders@gwoslabs.com"
outgoing_email_password = "PLUGH"

# What email address to use as a blind copy target for emails sent to the
# customer (or to the debug target instead).  Set this to an empty string
# to prevent sending any blind copies, or to a proper email address to
# enable such sending.
# blind_copy_email_address = "support@gwoslabs.com,gmele@gwoslabs.com"
blind_copy_email_address = "gherteg@gwoslabs.com"

# Fixed target account to send outgoing messages to instead of the email
# address extracted from incoming email, for debugging purposes.
# FIX THIS:  put a sensible value here in the copy we ship
# debug_target_email_address = "support@gwoslabs.com"
# debug_target_email_address = "sbennett@gwoslabs.com"
# debug_target_email_address = "nbennett@gwoslabs.com"
debug_target_email_address = "gherteg@gwoslabs.com"

# Where to send an email notifying that the license key has been successfully
# sent out, if desired.  This might perhaps help with our order workflow, to
# trigger subsequent manual actions such as updating SalesForce.
# Set this to an empty string if no such email should be sent.
# FIX THIS:  put a sensible value here in the copy we ship
# audit_email_address = "support@gwoslabs.com"
# audit_email_address = "sbennett@gwoslabs.com"
audit_email_address = "gherteg@gwoslabs.com"

# Where to send notices of script malfunctions.
# Note:  a future version of this script might generalize this to allow
# multiple addresses here.
# FIX THIS:  put a sensible value here in the copy we ship
# trouble_email_address = "support@gwoslabs.com"
trouble_email_address = "marketing@gwoslabs.com,gherteg@gwoslabs.com"

# Regular expression pattern to match to validate the sender of the license
# request (the From: address).
# NetSuite-only:
# valid_from_address_pattern = "^NetSuite Alerts <automailer@netsuite.com>$"
# UberCart-only:
# valid_from_address_pattern = "^GroundWork Open Source <webmaster@groundworkopensource.com>$"
# Marketo-only:
# valid_from_address_pattern = "^\"GroundWork Open Source\" <webmaster@groundworkopensource.com>$"
# SalesForce-only:
valid_from_address_pattern = "^Nate Bennett <nbennett@groundworkopensource.com>$"
# Combined:
# valid_from_address_pattern = "^\"?GroundWork Open Source\"? <webmaster@groundworkopensource.com>$|^NetSuite Alerts <automailer@netsuite.com>$"

# Regular expression pattern to match to validate the Reply-to: address of
# the license request.
# NetSuite-only:
# (no Reply-To: address is supplied, so this pattern is not applied)
# UberCart-only:
# valid_reply_to_address_pattern = "^GroundWork Open Source <webmaster@groundworkopensource.com>$"
# Marketo-only:
# valid_reply_to_address_pattern = "^\"ReplyTo\" <webmaster@groundworkopensource.com>$"
# SalesForce-only:
# (no Reply-To: address is supplied, so this pattern is not applied)
# Combined:
valid_reply_to_address_pattern = "^(?:GroundWork Open Source|\"ReplyTo\") <webmaster@groundworkopensource.com>$"

# Regular expression pattern to match to validate the To: address of the
# license request.
valid_to_address_pattern = "^\"core_register@gwos.com\" <core_register@gwos.com>$"

# Regular expression pattern to match to validate the Subject header in
# an incoming email, as being a valid QuickStart order.  This must include
# exactly one subexpression enclosed in parentheses, which represents the
# order number.
# NetSuite-only:
# valid_subject_line_pattern = "^New Order Number (CS\d+) at GroundWork Open Source$"
# UberCart-only:
# valid_subject_line_pattern = "^New Order number (.*) at GroundWork Open Source$"
# Marketo-only:
# valid_subject_line_pattern = "^New Order number EVAL0 at GroundWork Open Source$"
# SalesForce-only (GroundWork Monitor Core orders):
valid_subject_line_pattern = "^New Order Number (CORE\d+) at GroundWork Open Source$"
# Combined (rather a hack, and with the order number locked down to be a number):
# valid_subject_line_pattern = "^New Order [Nn]umber ((?:CS|EVAL|CORE)?\d+) at GroundWork Open Source$"

# Regular expresson pattern to match to validate order SKUs that are to
# have license keys automatically generated and emailed by this script.
# FLXQS1T => Software bundle 15-day trial (possible future campaign)
# FLXQS3T => 15-day SLES VM trial
# FLXQZ3T => GWOS + Zendesk 15-day trial  (possible future campaign)
# FLXQST  => for internal GroundWork testing
# GWMCRT  => for internal GroundWork testing
# valid_order_sku_pattern = "^(?:FLXQS1|FLXQS1A|FLXQS2|FLXQS2A|FLXQS3|FLXQS3A|FLXQS4|FLXQS4A|FLXQS5|FLXQS5A|FLXQZ3|FLXQZ3A|FLXQS3T|FLXQST)$"
valid_order_sku_pattern = "^(?:GWMCORE|GWMCRT)$"

# Regular expression pattern to match to validate order SKUs that don't
# match valid_order_sku_pattern but are otherwise considered valid.
# Such SKUs will be recognized as valid, but license key generation
# for these orders will be processed manually.  For ease of constructing
# a complex pattern specifying multiple SKUs, white space in this regular
# expression will be ignored.
# For simplified ongoing maintenance, in production we might use a general
# pattern to match any 6-character alphanumeric (plus underscore) string,
# rather than detailing individual valid SKUs.
valid_but_ignored_order_sku_pattern = "^\w{6}$"

# If we need precision, we would want a pattern something like the following
# (or some derivative that might involve partial wildcards).  White space in
# this regular expression will be ignored.
# [This variable is currently demanded and recognized but unused.]
# FIX LATER:  try adding comments to individual lines
precise_valid_but_ignored_order_sku_pattern = "^(?:\
      DMPS01\
    | FLXPS1\
    | FLXPS2\
    | VASV01\
    | VASV04\
    | WCPS01\
)$"

# Regular expresson patterns used to extract critical information from
# incoming license-key requests.  Each of these must include a single
# pair of parentheses to capture a field from the email body, except
# for the $order_number_pattern which must include two such pairs.

# NetSuite-only, and probably UberCart-only:
# customer_name_pattern  = "Customer: (.+?) - [^\s@]+@[^\s@<]+<br />"
# customer_email_pattern = "Customer: .+? - ([^\s@]+@[^\s@<]+)<br />"
# NetSuite plus old UberCart conversions:
# customer_name_pattern  = "Customer: (.+?) - (?:<a href=[^>]+>)?[^\s@]+@[^\s@<]+(?:</a>)?<br />"
# customer_email_pattern = "Customer: .+? - (?:<a href=[^>]+>)?([^\s@]+@[^\s@<]+)(?:</a>)?<br />"
# Marketo-only, text/plain:  The text/plain part of the incoming email has a ^M character (\r) at the
# end of each line.  We want to exclude that from the email address, so we use it to bound the matching:
# customer_name_pattern  = "Customer: (.+?) - [^\s@]+@[^\s@<]+\r"
# customer_email_pattern = "Customer: .+? - ([^\s@]+@[^\s@<]+)\r"
# Marketo-only, text/html:  A better choice.
# customer_name_pattern  = "Customer: (.+?) - [^\s@]+@[^\s@<]+<br>"
# customer_email_pattern = "Customer: .+? - ([^\s@]+@[^\s@<]+)<br>"
# SalesForce-only, text/html:
customer_name_pattern  = "Customer: (.+?) - [^\s@]+@[^\s@<]+<br />"
customer_email_pattern = "Customer: .+? - ([^\s@]+@[^\s@<]+)<br />"
# Combined:
# customer_name_pattern  = "Customer: (.+?) - (?:<a href=[^>]+>)?[^\s@]+@[^\s@<]+(?:</a>)?(?:<br />|<br>)"
# customer_email_pattern = "Customer: .+? - (?:<a href=[^>]+>)?([^\s@]+@[^\s@<]+)(?:</a>)?(?:<br />|<br>)"

# NetSuite-only:
# order_number_pattern = "<p class=text>Order Number: (CS\d+)<br />"
# UberCart-only:
# order_number_pattern = "Order number: <a href="https://www\.groundworkopensource\.com/exchange/admin/store/orders/(\d+)">(\d+)</a><br />"
# Marketo-only:
# order_number_pattern = "<p class="text">Order Number: (EVAL\d+)<br>"
# SalesForce-only:
order_number_pattern = "<p class=text>Order Number: (CORE\d+)<br />"
# Combined (rather a hack):
# order_number_pattern = "(?:<p class=(?:text|\"text\")>Order Number: |Order number: <a href=\"https://www\.groundworkopensource\.com/exchange/admin/store/orders/)((?:CS|EVAL|CORE)?\d+)(?:<br />|\">(\d+)</a><br />|<br>)"

# NetSuite-only:
# order_sku_pattern = "Model: Download : (\S+) - [\d,]*\.\d{2}<br />"
# original UberCart-only:
# order_sku_pattern = "&nbsp;&nbsp;Model: (\S+)<br />"
# Marketo-only:
# order_sku_pattern = "&nbsp;&nbsp;Model: (\S+)</p>"
# SalesForce-only:
order_sku_pattern = "Model: Download : (\S+) - [\d,]*\.\d{2}<br />"
# Combined (rather a hack), and with the old UberCart termination changed to </p> to support orders converted to NetSuite:
# order_sku_pattern = "(?:Model: Download : |&nbsp;&nbsp;Model: )(\S+)(?: - [\d,]*\.\d{2}<br />|</p>)"

# Marketo-only:
expiration_date_pattern = "Expiration: (\d+ \w+ \d{4})"

# Names of relevant mail folders.
request_email_mailbox = "Inbox"
bounced_email_mailbox = "Bounced"
invalid_email_mailbox = "Invalid Requests"
handled_email_mailbox = "Processed Requests"

# License type.
# Old marketing program:
# license_type = "Quickstart"
# Current marketing program:
license_type = "Core"

# Where to probe to fetch a license, including substitutable parameters.
# We expect CUSTOMER_NAME to generally be of the form "FirstName%20LastName".
# In version 2 of this script, we should use HTTPS only, never HTTP.
# (In the meantime, if we really do just use localhost during deployment,
# then the Apache web server on localhost should be set up to restrict
# access to only clients from the same machine.)
# license_url = "http://localhost:8080/LicenseServer/quickstartkey?orderid={ORDER_NUMBER}&customer={CUSTOMER_NAME}"
license_url = "http://localhost/LicenseServer/quickstartkey?orderid={ORDER_NUMBER}&customer={CUSTOMER_NAME}"

# The Subject: line on an outgoing license-key email to the customer.
# It may include the string "{ORDER_NUMBER}" to get the order number
# substituted into the final generated Subject: header.  Because of
# internal script processing for handling bounced email, it is best
# that this be specified as the last component of the template.
# Note that any "#" character in the template must be preceded by "\"
# lest it be treated as terminating the value and starting a comment
# in this configuration file.
# outgoing_email_subject_template = "License key for your recent GWOS order number {ORDER_NUMBER}"
outgoing_email_subject_template = "License key for your recent GroundWork Core registration {ORDER_NUMBER}"

# The Subject: line on the audit email sent to the $audit_email_address
# specified above, when a license key is generated.
# It may include the string "{ORDER_NUMBER}" to get the order number
# substituted into the final generated Subject: header.  Because of
# internal script processing for handling bounced email, it is best
# that this be specified as the last component of the template.
# Note that any "#" character in the template must be preceded by "\"
# lest it be treated as terminating the value and starting a comment
# in this configuration file.
# outgoing_audit_subject_template = "Core license issued for order number {ORDER_NUMBER}"
outgoing_audit_subject_template = "Core license issued for registration {ORDER_NUMBER}"

# The Subject: line on the audit email sent to the $audit_email_address
# specified above, when an incoming order looks valid but should be
# processed manually instead of via the automated license mailer.
# It may include the string "{ORDER_NUMBER}" to get the order number
# substituted into the final generated Subject: header.  Because of
# internal script processing for handling bounced email, it is best
# that this be specified as the last component of the template.
# Note that any "#" character in the template must be preceded by "\"
# lest it be treated as terminating the value and starting a comment
# in this configuration file.
# ignored_audit_subject_template = "Manual processing needed for order number {ORDER_NUMBER}"
ignored_audit_subject_template = "Manual processing needed for registration {ORDER_NUMBER}"

# Whether to send only a plain-text message, or both plain and HTML
# formattings.  This is useful mostly in development testing to see the
# plain-text part, because the user's email client (e.g., Thunderbird)
# will generally ignore the plain-text part in favor of displaying the
# later HTML part, assuming that (coming later in the multipart MIME
# content) it is a more faithful representation of the email content.
# For production use, turn this off.
# [yes/no]
send_only_plain_text = no

# Where to find the full text of the outgoing email for paid orders.
# These files are assumed to reside in the same directory as the script,
# so don't put any preceding pathnames in these filenames.
outgoing_email_plain_template_file = "outgoing_email_plain_template"
outgoing_email_html_template_file  = "outgoing_email_html_template"

# Where to find the full text of the outgoing email for evaluation
# orders.  These files are assumed to reside in the same directory as
# the script, so don't put any preceding pathnames in these filenames.
outgoing_email_plain_eval_template_file = "outgoing_email_plain_eval_template"
outgoing_email_html_eval_template_file  = "outgoing_email_html_eval_template"

# Where to log ordinary operational messages, especially for debugging.
# A relative pathname specified here will be interpreted relative to the
# directory in which the automailer lives and runs.
logfile = "logs/generate_quickstart_license.log"

# How large (in MBytes) the logfile is allowed to get before it is
# automatically rotated at the end of a processing cycle.
max_logfile_size = 10

# How many total logfiles will be retained when the logfile is rotated.
# Set this to 1 to just truncate the existing file and not retain any
# additional copies.  Otherwise, set it to some larger small integer.
max_logfiles_to_retain = 5

# Where to log info about what licenses have been issued, when and to whom.
# A relative pathname specified here will be interpreted relative to the
# directory in which the automailer lives and runs.  However, we generally
# want to use a directory outside of the particular distribution, so we
# can continue to collect audit records in the same log file across
# upgrades to the license key automailer.
audit_trail_logfile = "/home/license/logs/quickstart_license_issuance_log"

# Max time (seconds) to wait for network server activity.
network_server_timeout = 60

# How many times to ignore possibly-transient trouble before reporting it.
# max_faults_since_trouble_email = 24
max_faults_since_trouble_email = 6

# How often to check for incoming email, in seconds.
cycle_time = 300
