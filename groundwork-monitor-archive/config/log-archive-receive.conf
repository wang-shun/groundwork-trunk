# log-archive-receive.conf
#
# The values specified here are used to control the behavior of the
# log-archive-receive.pl script.
#
# Copyright (c) 2016 GroundWork, Inc. (www.gwos.com).  All rights reserved.
# Use of this software is subject to commercial license terms.

# ====================================================================
# GroundWork Log Archive Receipt and Storage Configuration Parameters
# ====================================================================

# Archive log tables?
#
# This option is turned off (the value "no", but without quotes) in the default
# configuration file simply so the script can be safely installed before it is
# locally configured.  To get the software to run, it must be turned on here
# (the value "yes", but without quotes) once the rest of the setup is correct
# for your site.
# [yes/no]
enable_processing = no

# Possible debug_level values:
# 0 = no info of any kind printed, except for startup/shutdown
#     messages and major errors
# 1 = print just error info and summary statistical data
# 2 = also print basic debug info
# 3 = print detailed debug info
debug_level = 1

# Where to log audit and debug messages.
logfile = "/usr/local/groundwork/foundation/container/logs/log-archive-receive.log"

# Everything we need to know to access the archive database.
archive_dbtype = postgresql
archive_dbhost = localhost
archive_dbport = 5432
archive_dbname = archive_gwcollagedb
archive_dbuser = collage
archive_dbpass = gwrk

# The following two values will be used in messages sent to the Foundation
# (and appearing in the Event Console).  If the log-archive-receive.pl script
# runs on the same machine as the foundation_host defined below, then you can
# safely set target_script_machine to "localhost", provided that you generally
# monitor your GroundWork Monitor server under that designation.  In all other
# conditions, you should give the actual hostname of the server on which the
# log-archive-receive.pl script runs, as that host is known to your monitoring
# system (as an unqualified or fully-qualified hostname).
#
# The target_script_ip_address reflects the IP address of target_script_machine.
# You can default this value by setting it to an empty string ("").  If you
# set target_script_machine to "localhost", an empty target_script_ip_address
# will default to "127.0.0.1".  If you set target_script_machine to some
# other value, an empty target_script_ip_address will default to some
# arbitrary IP address assigned to this host (whichever IP address is found
# first in the normal name-system lookup of the target_script_machine).
# Especially if your target_script_machine has multiple network interfaces,
# you may wish to override this default with a particular IP address of the
# target_script_machine as this machine is known to your monitoring system.
#
target_script_machine    = "my-target-server.my-domain.com"
target_script_ip_address = ""

# Does the log archiving need to shut down GroundWork services on the
# archive server while it runs?  The answer depends on how your system
# is deployed; see the GroundWork Archive Server documentation for more
# detail.  This option controls whether the archive_gwservices_machine
# and archive_gwservices_machine_is_remote options have any effect.
# [yes/no]
manage_archive_gwservices = no

# The machine where the archive gwservices are run and must be controlled, if
# manage_archive_gwservices is enabled.  Depending on your setup, this may or
# may not be where the log-archive-receive.pl script is run.  This value will
# only be used if archive_gwservices_machine_is_remote is true, but in any case,
# it should be an actual hostname that correctly reflects where the archive
# gwservices are run.
archive_gwservices_machine = "my-archive-gwservices-server.my-domain.com"

# Specify whether the archive_gwservices_machine is remote relative to the
# machine where the log-archive-receive.pl script is run.  Set to false if
# those are the same machine.  Set to true if they are different machines.
# [true/false]
archive_gwservices_machine_is_remote = false

# How long to wait (in seconds) for a table lock on one of the archive tables
# to become available, before aborting the entire archive cycle.  This provides
# some protection against a near-infinite wait for some other database client
# to release the lock, so the script can finish and formally report its failure.
# This timeout is unlikely to be exercised in practice unless some reporting
# client locks a table for a very long time.  Any data not archived in the
# failed cycle will be picked up in the next cycle, so there is no danger of
# data loss.
table_locking_timeout_seconds = 1200

# Specification of what to archive is split into several levels, based both on
# the perceived importance of the tables and on their referential relationships.
# Because of the foreign-key references between these tables, they must be
# restored into the archive database in this order:  primary, secondary, tertiary.

# To make it easier to verify that the sending and receiving scripts both manage
# the same set of tables, in this receiving-script config file we use the same
# table order that is specified for dumping in the sending-script config file,
# so the specifications in the two config files can be directly compared.  The
# receiving script will reverse the order specified here as needed to inject
# data into tables in the required sequence so that referenced foreign-keys are
# present when the references are added to the database.

# Unlike the configuration for the sending script, the configuration for the
# receiving script is not concerned with columns that represent "timestamp
# without time zone" values which will be used to specify which rows are to be
# archived.  Instead, the receiving script configuration must have accurate
# information about which fields act as the primary key for each table.  In a
# future release of this scripting, those fields will be extracted automatically
# from the database; in the meantime, they must be specified here.  And the
# receiving script is concerned with timestamp fields in a different way,
# in that it needs to record when certain rows were present and not present
# in the runtime database.  So each row below that lists a table does so in
# the form "table_name row_type id_fields".
#
# The row_type component consists of one of these special values describing both
# how the content of the table is managed and a little something about what that
# content represents.  Both aspects of the row_type definition are important in
# managing the table archiving.
#
# timed_association
#      The archive-database copy of this table is extended with startvalidtime
#      and endvalidtime fields, the startvalidtime field is now included in the
#      PRIMARY KEY, and the content of each row represents only an association
#      of objects defined elsewhere in the database, with no additional fields
#      in this table other than its original PRIMARY KEY fields (that is,
#      without the startvalidtime field), which define the association, and the
#      startvalidtime and endvalidtime fields.
#
# timed_object
#      The archive-database copy of this table is extended with startvalidtime
#      and endvalidtime fields, and the content of each row represents some type
#      of object referenced from elsewhere in the database.
#
# untimed_detail
#      The archive-database copy of this table has exactly the same form as
#      the runtime-database copy of this table, and the content of each row
#      represents an augmentation of a row in one other table with additional
#      detail (supplied either directly in this table, or indirectly by
#      referencing other tables).
#
#      untimed_detail is to be used in two cases:
#
#      hoststatus:  the current status of a given host; will likely change with
#           each archive cycle, to reflect the most up-to-data info, and thus
#           will not reflect much of anything useful about historical detail
#
#      logmessageproperty:  additional detail for each logmessage row; since the
#           logmessage data will essentially be frozen at each archiving
#           cycle, and will not be modified in future archiving cycles, it is
#           reasonable to store only the last-received data for each row from
#           the runtime database; that data will represent the same historical
#           point-in-time as the logmessage it refers to
#
#      With this design, we don't permanently capture per-archiving-cycle host
#      detail, so we cannot accurately report the state of each host at the
#      point of each successful archiving cycle based purely on this table.  For
#      that, we have a different way of analyzing data, via state transition
#      reports that take historical message data into account.  So we have no
#      need to add startvalidtime and endvalidtime fields to the hoststatus
#      table, and to create a new "timed_detail" category for that table.
#
# untimed_object
#      The archive-database copy of this table has exactly the same form as
#      the runtime-database copy of this table, and the content of each row
#      represents some type of fundamental data object.  This categorization can
#      only apply to secondary tables, which must all be categorized this way.
#
# The id_fields component consists of a comma-separated list of the individual
# fields that make up the primary key for that table.

# Here we specify the set of tables which are needed to support the secondary
# tables to be archived because of foreign-key references to the primary tables
# within the secondary tables.  In contrast to the secondary tables, the
# entirety of each of the tables listed here will be archived on every pass.
#
# It is vital that you maintain the specified ordering of tables listed here.
#
#                           TABLE NAME           ROW TYPE       UNIQUE ID KEY FIELDS
#                           ==================== ============== ======================
primary_table_attributes = "hoststatus           untimed_detail hoststatusid"
primary_table_attributes = "servicestatus        timed_object   servicestatusid"
primary_table_attributes = "host                 timed_object   hostid"
primary_table_attributes = "typerule             timed_object   typeruleid"
primary_table_attributes = "statetype            timed_object   statetypeid"
primary_table_attributes = "severity             timed_object   severityid"
primary_table_attributes = "priority             timed_object   priorityid"
primary_table_attributes = "performancedatalabel timed_object   performancedatalabelid"
primary_table_attributes = "operationstatus      timed_object   operationstatusid"
primary_table_attributes = "monitorstatus        timed_object   monitorstatusid"
primary_table_attributes = "device               timed_object   deviceid"
primary_table_attributes = "component            timed_object   componentid"
primary_table_attributes = "checktype            timed_object   checktypeid"
primary_table_attributes = "applicationtype      timed_object   applicationtypeid"

# Here we specify those tables which are the critical part of archiving.  These
# tables contain the critical part of what we want to transfer to the archive
# database.
#
# It is vital that you maintain the specified ordering of tables listed here.
#
#                             TABLE NAME         ROW TYPE       UNIQUE ID KEY FIELDS
#                             ================== ============== ====================
secondary_table_attributes = "logmessage         untimed_object logmessageid"
secondary_table_attributes = "logperformancedata untimed_object logperformancedataid"
secondary_table_attributes = "auditlog           untimed_object auditlogid"
secondary_table_attributes = "comment            untimed_object commentid"

# Here we specify an additional set of tables to archive, mostly those that
# reference the secondary tables and may also be useful for reporting purposes.
# For most of these tables, the entirety of each of the tables listed here will
# be archived on every pass.  However, for some tables, the sending side might
# limit the data captured, to guarantee consistency of the captured data across
# tables.
#
# It is vital that you maintain the specified ordering of tables listed here.
#
#                            TABLE NAME                ROW TYPE          UNIQUE ID KEY FIELDS
#                            ========================= ================= ===========================
tertiary_table_attributes = "logmessageproperty        untimed_detail    logmessageid,propertytypeid"
tertiary_table_attributes = "hostgroupcollection       timed_association hostid,hostgroupid"
tertiary_table_attributes = "applicationentityproperty timed_object      applicationentitypropertyid"
tertiary_table_attributes = "hostgroup                 timed_object      hostgroupid"
tertiary_table_attributes = "propertytype              timed_object      propertytypeid"
tertiary_table_attributes = "entitytype                timed_object      entitytypeid"
tertiary_table_attributes = "hostname                  timed_object      hostname"
tertiary_table_attributes = "hostidentity              timed_object      hostidentityid"
tertiary_table_attributes = "hostblacklist             timed_object      hostblacklistid"

# Specify here which tables are used for message and performance data.  These
# specifications are used to identify which archiving statistics should be
# emphasized in status messages sent to the Event Console.
#
# If there is more than one table in a given category, you can repeat its option
# as above to specify the full list of tables.  These values must be configured
# above as secondary tables, with associated unique-id key fields. 
message_data_table = "logmessage"
message_data_table = "auditlog"
message_data_table = "comment"
performance_data_table = "logperformancedata"

# We expect that the archiving logic will evolve over time, and as such the
# format of the dumpfile we create might change over time.  So we preemptively
# defined a configuration variable to specify that format.  Currently, the
# only supported format is "copy".  Later releases might support other formats
# as well.
dumpfile_format = copy

# This config file does not contain any options to specify what range of the
# available dump files is to be injected into the database, because in normal
# operation such actions will be driven by the source system instead of by
# independent analysis of the fully-transferred dump files on the target system.

# How many days of dumped-data files to retain in the target-machine filesystem,
# as a means of allowing manually-initiated recovery procedures.
target_dumpfile_retention_days = 11 + 1/2

# The base directory in which subdirectories will be managed for storing
# data dumps from the runtime database.  Subdirectories will have the form
# "YYYY-MM-DD", representing the date on which the data-dump files within
# them were taken.  This does not necessarily relate to any timestamps
# within those data dumps.  The dump-file names within those subdirectories
# will be of the form "{tablename}.dump.{timestamp}", where the timestamp
# is specified in the form "YYYY-MM-DD_hh.mm.ss".  Once again, the timestamp
# in each filename will represent when the data-dump file was taken, and it
# does not necessarily relate to any timestamps within the dump file itself.
log_archive_target_data_directory = "/usr/local/groundwork/core/archive/log-archive"

# Location of the log-archiving generational state file, if needed.  This file
# stores information about how far we get in each archiving cycle, because that
# will be useful in calculating the set of data to be handled in the following
# cycle.  This particularly helps with knowing which day-by-day dump files have
# been handled to completion and which remain to be processed.
log_archive_target_state_file = "/usr/local/groundwork/core/archive/var/log-archive-receive.state"

# The location of Foundation on the runtime server, needed so we can send
# "archiving run complete" and perhaps other log-archiving status events to
# the Event Log.  The usual foundation_host in similar scripts is "localhost",
# but that value should ONLY be used here if the log-archive-send.pl and
# log-archive-receive.pl scripts are run on the same (runtime) machine.
# Otherwise, the foundation_host value specified here must be the name of the
# source machine, not the target machine, or you can set foundation_host to an
# empty string ("") if you wish to disable such messages.
foundation_host = "my-groundwork-runtime-server.my-domain.com"
foundation_port = 4913
