# Configuration file for the autoimport.pl script.

#######################################################
#
#   General Program Execution Options
#
#######################################################

# Global Debug Level (controls the output of messages in the logfile)
# NONE    = 0; turn off all debug info
# FATAL   = 1; the application is about to die
# ERROR   = 2; the application has found a serious problem, but will attempt to recover 
# WARNING = 3; the application has found an anomaly, but will try to handle it
# NOTICE  = 4; the application wants to inform you of a significant event
# STATS   = 5; the application wants to log statistical data for later analysis
# INFO    = 6; the application wants to log a potentially interesting event
# DEBUG   = 7; the application wants to log detailed debugging data
debug_level = 5

# Where to put all the log messages from autoimport processing.
logfile = "/usr/local/groundwork/nagios/var/log/autoimport.log"

# Whether or not to commit a new configuration to Nagios.
# Changes will be committed to the Monarch database regardless.
# [yes/no]
commit_changes = yes

# When defining a monarch host, use the host name instead of the IP address?
# [yes/no]
define_monarch_host_using_dns = yes

# Whether to process WesternGeco-style hostgroups.
# [yes/no]
process_wg_hostgroups = yes

# Whether to use hostgroup_program to classify hosts according to their function.
# If "no", use custom_hostgroup_package instead.
# Used only if process_wg_hostgroups = yes.
# [yes/no]
use_hostgroup_program = no

# A program to classify hosts into hostgroups according to their function.
# Used only if process_wg_hostgroups = yes and use_hostgroup_program = yes.
# The value specified can include initial options beyond just the program name;
# the hostname to be classified will be appended to this full command string.
hostgroup_program = "/usr/local/groundwork/jobs/westerngeco/bin/hosttype -c"

# What Perl package to call to classify hosts into hostgroups according to their function.
# Used only if process_wg_hostgroups = yes and use_hostgroup_program = no.
# For efficiency, the use of a package, if available, is preferred over an external program.
# Set this to an empty string if you have no such package.
custom_hostgroup_package = "WesternGecoHostgroupName"

# What options to initialize the custom_hostgroup_package with.
custom_hostgroup_package_options = "-c"

# Where to find the Nagios log file.
nagioslogfile = "/usr/local/groundwork/nagios/var/nagios.log"

# Ganglia service name to search for in Nagios log file.  Hosts with this service will be matched.
ganglia_svc_name = "ganglia"

# Cacti service name to search for in Nagios log file.  Hosts with this service will be matched.
cacti_svc_name = "cacti"

# Assign deleted hosts to the deleted_hostgroup specified below?
# [yes/no]
assign_deleted_hosts_to_hostgroup = yes

# The name of the hostgroup to which deleted hosts will be assigned.
# This hostgroup must already exist in the Monarch database.
deleted_hostgroup = "_DELETED_HOSTS"

# Assign new hosts to the single fixed new hostgroup for the type of node discovered,
# as specified below (new_ganglia_hosts_hostgroup or new_cacti_hosts_hostgroup)?
# [yes/no]
assign_new_hosts_to_hostgroup = no

# Names of hostgroups for newly discovered hosts.
# Used only if assign_new_hosts_to_hostgroup = yes.
new_ganglia_hosts_hostgroup = "New_Ganglia_Hosts"
new_cacti_hosts_hostgroup   = "New_Cacti_Hosts"

# For newly discovered Ganglia hosts, assign host profiles named by the Ganglia clusters
# in which the hosts reside?  "yes" is only possible if get_ganglia_host_from_ganglia_db
# (below) is "yes".
# If "no", just use the single fixed default_host_profile_ganglia specified below.
# If "yes", the default_host_profile_ganglia host profile will still be used if we find
# no host profile named after a given Ganglia cluster.
# [yes/no]
assign_host_profiles_by_ganglia_clusters = yes

# Note:  For newly discovered Cacti hosts, assuming you only use Cacti for network devices,
# using a single host profile (default_host_profile_cacti, specified below) makes sense.
# Within Cacti, you don't have something akin to "Host Groups", though you do have a 'tree'
# structure defined in the database for navigating the devices.  If we did want to allow
# alternate host profiles for Cacti devices, then the name of the branch of the tree the
# device is attached to would be the logical candidate.  We leave that sort of thing for
# possible future development.

# Default Monarch host and service profiles to be applied to newly discovered hosts.
default_host_profile_ganglia       = "ganglia_host"
default_service_profile_ganglia    = "Ganglia Hosts"
default_service_profile_ganglia_id = ""
default_host_profile_cacti         = "cacti_host"
default_service_profile_cacti      = "Cacti Hosts"
default_service_profile_cacti_id   = ""

# Process ganglia hosts?
# [yes/no]
process_ganglia_hosts = yes

# Read the Nagios log to pick up the list of Ganglia hosts from service check messages?
# [yes/no]
get_ganglia_host_from_nagios_log = no

# Get the list of ganglia hosts from the Ganglia database?
# Only effective if get_ganglia_host_from_nagios_log = no.
# [yes/no]
get_ganglia_host_from_ganglia_db = yes

# How to access the Ganglia database.
# ganglia_dbtype can be either "mysql" or "postgresql".
ganglia_dbtype = "postgresql"
ganglia_dbname = "ganglia"
ganglia_dbhost = "localhost"
ganglia_dbuser = "ganglia"
ganglia_dbpass = "gwrk"

# Process cacti hosts?
# [yes/no]
process_cacti_hosts = no

# How to access the Cacti database.
# cacti_dbtype can be either "mysql" or "postgresql".
cacti_dbtype = "postgresql"
cacti_dbname = "cacti"
cacti_dbhost = "localhost"
cacti_dbuser = "cacti"
cacti_dbpass = "cactipasswd"

# How to access the Monarch database.
monarch_user_acct = "super_user"
