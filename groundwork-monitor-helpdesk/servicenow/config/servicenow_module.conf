#----------------------------------------------------------------------------------
# ServiceNow Specific settings
#----------------------------------------------------------------------------------

# Credentials for accessing the ServiceNow website.  These settings must be
# customized for each deployment after the package is installed.  Adding "?WSDL"
# to the ServiceNowSOAPEndpoint value can be used to get you back an XML structure,
# presumably reflecting the full incident data model.  That can help for development
# debugging, but must not be in play for production use of this integration.
#
# These values are used to create new incidents and to access existing-incident
# information:
ServiceNowSOAPEndpoint = "https://demo.service-now.com/incident.do"
ServiceNowSOAPUser = "admin"
ServiceNowSOAPPass = "admin"

# ServiceNow_SSL_CA_FILE and ServiceNow_SSL_CA_PATH are optional values that
# allow you to specify where the code is supposed to find a local trusted
# certificate to validate the SSL certificate provided by ServiceNow.  If you
# do not supply either of these (that is, if both are commented out or set to
# empty strings), the code will default to the bundle of Certificate Authority
# certificates provided by the Perl Mozilla::CA package, if it is installed.
#
# For ServiceNow_SSL_CA_FILE:  If you want to verify that the peer certificate
# has been signed by some reputable certificate authority known to you, then
# you should use ServiceNow_SSL_CA_FILE to locate the file containing the
# certificate(s) of the reputable certificate authorities if it is not already
# in the file "certs/my-ca.pem", relative to the working directory of the
# ServiceNow integration scripting.  (However, we don't specify the working
# directory of the script, so that filepath is not of use.)
#
# If you definitely want no ServiceNow_SSL_CA_FILE used, you should set it to an
# empty string.
#
# For ServiceNow_SSL_CA_PATH:  If you are unusually friendly with the OpenSSL
# documentation, you might have set yourself up a directory containing
# several trusted certificates as separate files as well as an index of the
# certificates.  If you want to use that directory for validation purposes,
# and that directory is not "ca/" (relative to the working directory of
# the ServiceNow integration scripting), then use this option to point
# IO::Socket::SSL to the right place to look.  (We don't specify the working
# directory of the script, so that filepath is not of use.)  Note that it is not
# sufficient to simply load the specified directory with several certificates;
# the index is critical, too.  But the openssl commands to use to create and
# maintain the proper index are beyond the scope of the comments here.
#
# If you definitely want no ServiceNow_SSL_CA_PATH used, you should set it to an
# empty string.
#
# To guarantee that the expected root certificate is the one controlling
# access to ServiceNow, use of the ServiceNow_SSL_CA_FILE option is
# the standard way to specify how the SSL certificate provided by
# ServiceNow will be validated.  The /usr/local/groundwork/servicenow/doc
# /groundwork-servicenow-integration-2.0.0/SERVICENOW_INTEGRATION_INSTALL_NOTES
# file included with this integration has lots more detail on how to obtain and
# install this root certificate.
#
# Note:  As of this writing, access to the ServiceNow site via SSL is
# validated via a certificate chain starting from Entrust, and it is
# the "Entrust.net Premium 2048 Secure Server CA" certificate from the
# Mozilla::CA package that works to validate the ServiceNow SSL connection.
# See http://www.entrust.net/developer/ for further details on downloading
# root certificates from this Certificate Authority, as well as the
# SERVICENOW_INTEGRATION_INSTALL_NOTES file for the complete procedure.  The
# particular root certificate of interest may currently be found here:
# https://www.entrust.net/downloads/binary/entrust_2048_ca.cer

ServiceNow_SSL_CA_FILE = "/usr/local/groundwork/servicenow/config/entrust_2048_ca.cer"
# ServiceNow_SSL_CA_PATH = ""

# This fixed string is used to populate the "Caller" field in a new ServiceNow
# incident.  It also populates the "Opened by" field if the Send_opened_by flag
# is enabled below.  This constitutes a fixed override for using the name of the
# logged-in GroundWork user for these incident fields.  If you wish to use the
# logged-in username, either set this to an empty string or comment it out.
NewIncidentCaller = "GroundWork"

# This fixed string is used to populate the Company field in a new ServiceNow
# incident, subject to the Send_company flag below.
NewIncidentCompany = "Commonwealth Financial Network"

# The Severity, Impact, and Urgency fields in a ServiceNow incident can be set
# to fixed values for all new incidents, via the option values specified here.
#
# By experiment on a ServiceNow test system, we see the following enumerations
# used for these fields:
#
#    1 - High
#    2 - Medium
#    3 - Low
#    4 - Request    (for Severity only; undefined for Impact and Urgency)
#
# To set them all to "LOW", we use "3" here.
#
# These options are subject to the Send_severity, Send_impact, and Send_urgency
# flags below.  Also, the static NewIncidentUrgency value is subject to being
# ignored in favor of a dynamic value if the Calculate_urgency option is enabled.
NewIncidentSeverity = 3
NewIncidentImpact   = 3
NewIncidentUrgency  = 3

# An alternative construction is available for the Urgency field.  If you set
# the Calculate_urgency option to "yes", the code will inspect the monitoring
# status for each of the selected events, and choose the worst-case (lowest)
# mapped value using the <monitorstatus_urgency> mapping specified below.  In
# this case, the fixed value specified in NewIncidentUrgency will be ignored.
Calculate_urgency = yes

# We have a fairly large set of possible monitoring status values.  Rather than
# hardcode the associations of those values into corresponding Urgency values,
# we specify the mapping here.  This will allow us to modify the mapping as
# desired, and to extend the mapping in the future if new monitoring-status
# values are added to the system.  The monitor-status values shown here are
# taken from the monitorstatus.name field in the gwcollagedb database.  Any
# value found for an event that is not defined here will be taken as 1 (High),
# more or less as a means of suggesting that the value should be entered here
# and adjusted as needed.
#
# To create a key in this table, take the monitorstatus.name value, convert
# all space characters to underscores, and drop all other non-alphanumeric
# characters.
<monitorstatus_urgency>
    UP				= 3
    OK				= 3
    UNKNOWN			= 2
    SCHEDULED_CRITICAL		= 3
    PENDING			= 2
    SCHEDULED_DOWN		= 3
    UNREACHABLE			= 2
    UNSCHEDULED_DOWN		= 1
    WARNING			= 2
    UNSCHEDULED_CRITICAL	= 1
    ACKNOWLEDGEMENT_WARNING	= 3
    ACKNOWLEDGEMENT_CRITICAL	= 3
    ACKNOWLEDGEMENT_DOWN	= 3
    ACKNOWLEDGEMENT_UP		= 3
    ACKNOWLEDGEMENT_OK		= 3
    ACKNOWLEDGEMENT_UNREACHABLE	= 3
    ACKNOWLEDGEMENT_UNKNOWN	= 3
    ACKNOWLEDGEMENT_PENDING	= 3
    ACKNOWLEDGEMENT_MAINTENANCE	= 3
    CRITICAL			= 1
    DOWN			= 1
    MAINTENANCE			= 3
    SUSPENDED			= 2
    START_DOWNTIME		= 3
    IN_DOWNTIME			= 3
    END_DOWNTIME		= 3
</monitorstatus_urgency>

# By experiment on a ServiceNow test system, we see the following possible
# contact types:
#
#     Email
#     Phone
#     Self-service
#     Voicemail
#     Walk-in
#
# We have in the past used "System Alert" for our standard new-incident setting.
# This option is subject to the Send_contact_type flag below.
NewIncidentContactType = "Email"

# By experiment on a ServiceNow test system which is claimed to mirror the
# production system, we see the following possible incident states and
# corresponding display values:
#
#     State  State Display Value
#     =====  ===================
#     1      New
#     2      Active
#     5      Awaiting User Info
#     6      Resolved
#     7      Closed
#
# On a different (demo) system, we have seen:
#
#     State  State Display Value  Incident State  Incident State Display Value
#     =====  ===================  ==============  ============================
#     1      Open                 1               New
#     1      Open                 2               Active
#     1      Open                 3               Awaiting Problem
#     1      Open                 4               Awaiting User Info
#     1      Open                 5               Awaiting Evidence
#     1      Open                 6               Resolved
#     1      Open                 100             Help
#     3      Closed Complete      7               Closed
#
# We intend to use "New" for our standard new-incident setting.
#
# Upon programmatic retrieval of an incident, the <state> attribute contains
# a numeric enumeration value, while the <dv_state> attribute contains the
# corresponding string (display value) from the list above.  By experiment,
# we find that using a string here (one of the possible display values)
# seems to work just fine when creating an incident.  So since the display
# values are more descriptive, we use them.
NewIncidentState = "New"

# The values to be filled in for certain incident fields, if these values
# cannot be unambiguously determined from the events in the incident.  For
# the UnknownCategory and UnknownSubcategory values, "" corresponds to
# "-- None --" within ServiceNow.
#
# These options are subject to the Send_category and Send_subcategory flags below.
UnknownCategory        = ""
UnknownSubcategory     = ""
UnknownAssignmentGroup = "Unknown Assignment Group"

# The GroundWork Server to be assumed if a given event is not found to be
# associated with a Child Server (Monarch Group).  This will be used to look up
# the incident Location in the MonarchGroupLocationMapFile defined below.  This
# default GroundWork server can be set to an empty string if a default Location
# is not desired.
DefaultGroundWorkServer = "monitor.commonwealth.com"

# A flat file that contains a mapping from GroundWork servers (defined as Monarch
# Groups, and defaulted to DefaultGroundWorkServer) to corresponding locations.
MonarchGroupLocationMapFile = "/usr/local/groundwork/servicenow/config/monarch_group_to_location_mapping.conf"

# A flat file that contains a mapping from hostgroups to corresponding category+subcategory
# pairs.  This option is subject to the Send_category and Send_subcategory flags below.
HostgroupCategorySubcategoryMapFile = "/usr/local/groundwork/servicenow/config/hostgroup_to_category_and_subcategory_mapping.conf"

# The type of mapping to be done to calculate the Assignment Group in a ServiceNow
# Incident.  Valid values are:
#   "HostgroupService"  map hostgroup+service pairs to corresponding assignment groups
#   "ServiceGroup"      map servicegroups to corresponding assignment groups
AssignmentGroupMappingType = ServiceGroup

# A flat file that contains a mapping from hostgroup+service pairs to corresponding assignment groups.
# This option is in play when AssignmentGroupMappingType is "HostgroupService".
HostgroupServiceAssignmentGroupMapFile = "/usr/local/groundwork/servicenow/config/hostgroup_and_service_to_assignment_group_mapping.conf"

# A flat file that contains a mapping from servicegroup names to corresponding assignment groups.
# This option is in play when AssignmentGroupMappingType is "ServiceGroup".
ServiceGroupAssignmentGroupMapFile = "/usr/local/groundwork/servicenow/config/servicegroup_to_assignment_group_mapping.conf"

#-----------------------------------------------------------------------------------------------------
# Options for determining which fields get populated in a new ServiceNow Incident.
#-----------------------------------------------------------------------------------------------------

# We wish to support a single ServiceNow integration code base which is common
# between multiple GroundWork customers, even though their respective ServiceNow
# Incident structures might be configured somewhat differently.  To that end,
# we support options here to choose whether certain ServiceNow Incident fields,
# specified by their low-level WSDL XML names, are to be included in a new
# Incident.  These settings will determine whether or not some of the options
# above have any utility.

Send_category     = no
Send_cmdb_ci      = yes
Send_company      = yes
Send_contact_type = yes
Send_impact       = no
Send_opened_by    = yes
Send_severity     = no
Send_subcategory  = no
Send_urgency      = yes

#-----------------------------------------------------------------------------------------------------
# Options for sending acknowledgement commands to Nagios.
#-----------------------------------------------------------------------------------------------------

# Send the passive service check results to Nagios?
# In normal production operation, you want this to happen, but during a
# debugging session you might want to disable it so as not to create
# confusing results on the production monitoring screens.
# [yes/no]
send_to_nagios = yes

# Use NSCA to send results to a (generally remote) Nagios command pipe?
#  no = write directly to a local Nagios command pipe
# yes = use send_nsca to write to a (generally remote) Nagios command pipe
# FIX LATER:  Using NSCA here is not yet supported in ServiceNow::HelpDesk.
use_nsca = no 

# Absolute pathname of the Nagios command pipe.
nagios_command_pipe = "/usr/local/groundwork/nagios/var/spool/nagios.cmd"

# The maximum size in bytes for any single write operation to the Nagios
# command pipe.  The value chosen here must be no larger than PIPE_BUF
# (getconf -a | fgrep PIPE_BUF) on your platform, unless you have an absolute
# guarantee that no other process will ever write to the command pipe.
max_command_pipe_write_size = 4096

# The maximum time in seconds to wait for any single write to the Nagios
# command pipe to complete.
max_command_pipe_wait_time = 180

#   
#   NSCA Options
#

# The maximum number of messages that will be passed to one call of send_nsca.
max_messages_per_send_nsca = 500

# The number of seconds to delay between successive calls to send_nsca.
# This is used to spread out sending of results over some period of time,
# to reduce the chances of the receiver being overloaded with a sudden
# inrush of results, and thereby also to reduce the chances that this
# script will not be able to successfully send the results.  It will,
# however, directly introduce a corresponding amount of latency between 
# the sensing and reporting of status.  Set to 0 if no such delay is
# desired, though then watch out for possible send failures.
#
# You should calculate the total time this delay will introduce into
# the sending of results at your site, given the total number of hosts
# being processed, and make sure it fits within the cycle_time specified
# earlier in this file.
delay_between_sends = 6

# Host of target (generally remote) NSCA.
nsca_host = "127.0.0.1"

# NSCA port to send_nsca results to (usually port 5667).
nsca_port = 5667

# The number of seconds before send_nsca times out.
nsca_timeout = 10

# Whether to also send a copy of the Cacti threshold data to a secondary server.
send_to_secondary_NSCA = no

# Host of secondary target NSCA.
secondary_nsca_host = "127.0.0.1"

# Secondary-host NSCA port to send_nsca results to (usually port 5667).
secondary_nsca_port = 5667

# The number of seconds before secondary-host send_nsca times out.
secondary_nsca_timeout = 10

