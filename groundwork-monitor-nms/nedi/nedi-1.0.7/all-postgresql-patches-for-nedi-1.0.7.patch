--- nedi-std/contrib/CheckNewMac.pl	2012-04-20 21:11:49.000000000 -0700
+++ nedi-gw/contrib/CheckNewMac.pl	2012-04-09 19:20:17.000000000 -0700
@@ -1,8 +1,10 @@
-#!/usr/bin/perl
+#!/usr/bin/perl -w
 
 ###############################################################################
 # CheckNewMac.pl
 # 2009-11-03
+# Upgraded to NeDi 1.0.7 and ported to PostgreSQL by
+# GroundWork Open Source, Inc.,  April 2012.
 ###############################################################################
 # A tiny add-On for Nedi release 1.0.4 by josef kierberger
 # j.kierberger@gmx.at
@@ -21,64 +23,91 @@
 # Moreover the arp aging time in your switches should be one hour.
 ###############################################################################
 
+use strict;
 
 
 # PERL MODULES
 use DBI;
-use DBD::mysql;
 use Net::SMTP;
 
 # CONFIG VARIABLES
-$database = "nedi";
-$host = "localhost";
-$port = "3306";
-$user = "nedi";
-$pw = "dbpa55";
-$emailAddress = 'support@yourdomain.com';
+# FIX MINOR:  draw the credentials from the nedi.conf file instead of hardcoding them here
+my $dbtype = "postgresql";	# "mysql" or "postgresql"
+my $dbname = "nedi";
+my $dbhost = "localhost";
+my $dbport = "5432";		# "3306" or "5432"
+my $dbuser = "nedi";
+my $dbpass = "dbpa55";
+my $emailAddress = 'support@yourdomain.com';
 
 
 ###############################################################################
 # OPEN DATABASE
 
-$dsn = "dbi:mysql:$database:$host:$port";
-$connect = DBI->connect($dsn, $user, $pw);
-$query = "SELECT firstseen,mac,name,ip FROM nodes";
-$query_handle = $connect->prepare($query);
-$query_handle->execute();
-$query_handle->bind_columns(\$firstseen,\$mac,\$name,\$ip);
-
-# LOOP THROUGH RESULTS
-
-while($query_handle->fetch()) {
-
-   ($sec,$min,$hour,$day,$month,$year) = localtime();
-   $year = 1900 + $year;
-   $month++;
-   $thisHour = sprintf ("%02d/%02d/%02d/%02d", $year, $month, $day,$hour);
-
-   ($sec,$min,$hour,$day,$month,$year) = localtime($firstseen);
-   $year = 1900 + $year;
-   $month++;
-   $myfirstseen = sprintf ("%02d/%02d/%02d/%02d", $year, $month, $day, $hour);
-
-   if ($myfirstseen eq $thisHour){
-        $a = $ip>>24;
-        $b = $ip<<8>>24;
-        $c = $ip<<16>>24;
-        $d = $ip<<24>>24;
-        $myIP = $a.".".$b.".".$c.".".$d;
-        $smtp = Net::SMTP->new('localhost');
-        $smtp->mail($ENV{USER});
-        $smtp->to($emailAddress);
-        $smtp->data();
-        $smtp->datasend("To: support\n");
-        $smtp->datasend("\n");
-        $smtp->datasend("New MAC found in network!\n");
-        $smtp->datasend("MAC: ",$mac,"\n");
-        $smtp->datasend("IP: ",$myIP,"\n");
-        $smtp->datasend("Name: ",$name,"\n");
-        $smtp->dataend();
-        $smtp->quit;
+my $dsn = '';
+if ( defined($dbtype) && $dbtype eq 'postgresql' ) {
+    $dsn = "DBI:Pg:dbname=$dbname;host=$dbhost;port=$dbport";
+}
+else {
+    $dsn = "DBI:mysql:database=$dbname;host=$dbhost;port=$dbport";
+}
+my $dbh = undef;
+eval {
+    $dbh = DBI->connect( $dsn, $dbuser, $dbpass, {  RaiseError => 1, PrintError => 0, AutoCommit => 1 } );
+};
+if ($@) {
+    chomp $@;
+    die "ERROR:  $@\n";  
+}
 
-   }
+eval {
+    my $query = "SELECT firstseen,mac,name,nodip FROM nodes";
+    my $sth = $dbh->prepare($query);
+    my $firstseen;
+    my $mac;
+    my $name;
+    my $ip;
+
+    $sth->execute();
+    $sth->bind_columns(\$firstseen,\$mac,\$name,\$ip);
+
+    # LOOP THROUGH RESULTS
+
+    while($sth->fetch()) {
+	my ($sec,$min,$hour,$day,$month,$year) = localtime();
+	$year = 1900 + $year;
+	$month++;
+	my $thisHour = sprintf ("%02d/%02d/%02d/%02d", $year, $month, $day,$hour);
+     
+	($sec,$min,$hour,$day,$month,$year) = localtime($firstseen);
+	$year = 1900 + $year;
+	$month++;
+	my $myfirstseen = sprintf ("%02d/%02d/%02d/%02d", $year, $month, $day, $hour);
+
+	if ($myfirstseen eq $thisHour){
+	    my $a = $ip>>24;
+	    my $b = $ip<<8>>24;
+	    my $c = $ip<<16>>24;
+	    my $d = $ip<<24>>24;
+	    my $myIP = $a.".".$b.".".$c.".".$d;
+	    my $smtp = Net::SMTP->new('localhost');
+	    $smtp->mail($ENV{USER});
+	    $smtp->to($emailAddress);
+	    $smtp->data();
+	    $smtp->datasend("To: support\n");
+	    $smtp->datasend("\n");
+	    $smtp->datasend("New MAC found in network!\n");
+	    $smtp->datasend("MAC: ",$mac,"\n");
+	    $smtp->datasend("IP: ",$myIP,"\n");
+	    $smtp->datasend("Name: ",$name,"\n");
+	    $smtp->dataend();
+	    $smtp->quit;
+	}
+    }
+    $sth->finish if $sth;
+};
+if ($@) {
+    chomp $@;
+    die "ERROR:  $@\n";  
 }
+
--- nedi-std/contrib/Reports-Inventory.php	2012-02-11 04:14:22.000000000 -0800
+++ nedi-gw/contrib/Reports-Inventory.php	2012-04-10 19:49:32.000000000 -0700
@@ -15,14 +15,14 @@
 		echo "<script>document.location.href='index.php?goto=".rawurlencode($_SERVER["REQUEST_URI"])."';</script>\n";
 		die;
 	}
-	require_once ("inc/libdb-msq.php");
+	require_once ("inc/libdb-" . strtolower($backend) . ".php");
 	//start capture for pdf conversion
 	ob_start();
 	echo "<link href=\"themes/{$_SESSION['theme']}.css\" type=\"text/css\" rel=\"stylesheet\">";
 	// special tag for html2pdf
 	echo "<page orientation=\"paysage\" footer=\"\" style=\"font-size: 8px\">";
 }else{
-	//stabdard header
+	//standard header
 	include_once ("inc/header.php");
 }
 if (isset($_GET['os']) and is_array($_GET['os'])) $os = $_GET['os']; 
@@ -52,7 +52,7 @@
 				</table></center>
 			</th>
 			<th width=80>
-				<input type="submit" name="submit" value="<?=$shobtn?>">
+				<input type="submit" name="submit" value="<?=$sholbl?>">
 				<input type="submit" name="export" value="pdf">
 			</th>
 		</tr>
@@ -77,20 +77,22 @@
 			from devices d, stock s 
 			where
 			d.serial !='-' 
-			and d.serial regexp s.serial 
-			and s.state = 100 $osfilter
-			order by d.services,d.name";
+			and ".DbRegexpClause(DbEscapeIdentifier('d.serial'), 'regexpCI', DbEscapeIdentifier('s.serial'))."
+			and s.state = 100 $osfilter";
+			# We removed this clause, because it makes no sense, given that only one row of the result is being retrieved.
+			# If you think you need it back, you'll also need to add ", max(d.services), max(d.device)" or some other
+			# innocuous aggregation functions on these fields to the select list.
+			"order by d.services,d.device";
 $res	= @DbQuery($query,$link);
 $cpt 	= @DbFetchArray($res);
 // Query data from active devices
-$query = "select d.name,d.serial,d.type,d.bootimage,d.location,d.description, inet_ntoa(d.ip) as ip  
+$query = "select d.device,d.serial,d.type,d.bootimage,d.location,d.description, inet_ntoa(d.devip) as devip  
 			from devices d, stock s 
 			where
 			d.serial !='-' 
-			and 
-			d.serial regexp s.serial 
+			and ".DbRegexpClause(DbEscapeIdentifier('d.serial'), 'regexpCI', DbEscapeIdentifier('s.serial'))."
 			and s.state = 100 $osfilter
-			order by d.services,d.name";
+			order by d.services,d.device";
 $res	= @DbQuery($query,$link);
 if($res){
 	echo "<table class=\"content\" CELLSPACING=2 COLS=4 RULES=NONE BORDER=0>";
@@ -98,7 +100,7 @@
 		while( $dev = @DbFetchArray($res) ){
 			// retreive links of device
 			$liens = '';
-			$query2 = "SELECT concat('<b style=\'color: green\'>',ifname, '</b> --> [', neighbour, ' - ', nbrifname, ']') as link 
+			$query2 = "SELECT concat('<b style=''color: green''>', ifname, '</b> --> [', neighbor, ' - ', nbrifname, ']') as link 
 						FROM links 
 						where 
 						device='{$dev['name']}' 
@@ -133,7 +135,7 @@
 		</tr>
 		<tr>
 			<td class="imgb" >
-				<b>Adresse|&nbsp;</b> <i style="color: red">{$dev['ip']}</i>
+				<b>Adresse|&nbsp;</b> <i style="color: red">{$dev['devip']}</i>
 			</td>
 			<td class="imgb" colspan=3 align=left width=730 >
 				<b>Liens|&nbsp;</b>{$liens}
@@ -151,36 +153,39 @@
 }else{
 	echo "</table><br><br>";
 }
-//quey number of module : count modules that is not present in devices list and have a serial number and slot not a number
-//				for exemple in devices list appear one switch for a stack with a serial number in modules appear other switches that compose the stack
+//query number of module : count modules that are not present in devices list and have a serial number and slot not a number
+//	for example in devices list appear one switch for a stack with a serial number in modules appear other switches that compose the stack
 $query = "select count(*) as cpt 
 			from devices d, stock s, modules m 
 			where
 			d.serial = s.serial
-			and d.name = m.device
+			and d.device = m.device
 			and d.serial != m.serial
 			and m.serial !='-'
 			and m.serial !=''
 			and s.state=100
-			and m.slot not regexp '^[:digit:]'
-			and m.model != '-'  $osfilter 
-			order by d.name, m.description";
+			and ".DbRegexpClause(DbEscapeIdentifier('m.slot'), 'not regexpCI', DbQuotedEscapeString('^[:digit:]'))."
+			and m.model != '-'  $osfilter";
+			# We removed this clause, because it makes no sense, given that only one row of the result is being retrieved.
+			# If you think you need it back, you'll also need to add ", max(d.device), max(m.moddesc)" or some other
+			# innocuous aggregation functions on these fields to the select list.
+			"order by d.device, m.moddesc";
 $res	= @DbQuery($query,$link);
 $cpt = @DbFetchArray($res);
 
 //query data for modules
-$query="select m.device as name, m.model as type, m.serial as serial, m.hw as hw, m.fw as fw, m.description as description
+$query="select m.device as name, m.model as type, m.serial as serial, m.hw as hw, m.fw as fw, m.moddesc as description
 			from devices d, stock s, modules m 
 			where
 			d.serial = s.serial
-			and d.name = m.device
+			and d.device = m.device
 			and d.serial != m.serial
 			and m.serial !='-'
 			and m.serial !=''
 			and s.state=100
-			and m.slot not regexp '^[:digit:]'
+			and ".DbRegexpClause(DbEscapeIdentifier('m.slot'), 'not regexpCI', DbQuotedEscapeString('^[:digit:]'))."
 			and m.model != '-'  $osfilter 
-			order by d.name, m.description";
+			order by d.device, m.moddesc";
 
 $res	= @DbQuery($query,$link);
 if($res){
--- nedi-std/contrib/Reports-Serials.php	2012-02-11 04:14:22.000000000 -0800
+++ nedi-gw/contrib/Reports-Serials.php	2012-04-11 23:17:54.000000000 -0700
@@ -1,131 +1,136 @@
-<?
-# 2011-07-05	Steffen Scholz	Update queries to fix following:
-#						- deleted devices will be removed from all tables and written to devdel-table for delete rrd's clearly (instead of delete only from devices-table and leave trashing rrd/interfaces/links/... behind)
-#						- also serials INCLUDING "-" among other charachters will be proceeded (like MAC-addresses as serials) - only follwing strings will be ignored:	 "-" as single character ,"" (empty), including "noSuch", "err", 
-# 2011-08-30	Steffen Scholz	update to new DB-Structure in nedi-1.0.6.220
-
-	include("inc/header.php");
-
-	$link = @DbConnect($dbhost,$dbuser,$dbpass,$dbname);
-	
-	if ($_POST['rmdevs']){
-		if ($isadmin){
-		foreach ($_POST['delete'] as $dld){
-		$query	= GenQuery('devices','d','','','',array('device'),array('='),array($dld) );
-		if( !@DbQuery($query,$link) ){echo "<h4>Device ".DbError($link)."</h4>";}else{echo "<h5>Device $dld $dellbl OK</h5>";}
-		$query	= GenQuery('interfaces','d','','','',array('device'),array('='),array($dld) );
-		if( !@DbQuery($query,$link) ){echo "<h4>IF ".DbError($link)."</h4>";}else{echo "<h5>IF $dld $dellbl OK</h5>";}
-		$query	= GenQuery('modules','d','','','',array('device'),array('='),array($dld) );
-		if( !@DbQuery($query,$link) ){echo "<h4>Modules ".DbError($link)."</h4>";}else{echo "<h5>Modules $dld $dellbl OK</h5>";}
-		$query	= GenQuery('links','d','','','',array('device'),array('='),array($dld) );
-		if( !@DbQuery($query,$link) ){echo "<h4>Links ".DbError($link)."</h4>";}else{echo "<h5>Links $dld $dellbl OK</h5>";}
-		$query	= GenQuery('links','d','','','',array('neighbor'),array('='),array($dld) );
-		if( !@DbQuery($query,$link) ){echo "<h4>Links ".DbError($link)."</h4>";}else{echo "<h5>Links $dld $dellbl OK</h5>";}
-		$query	= GenQuery('configs','d','','','',array('device'),array('='),array($dld) );
-		if( !@DbQuery($query,$link) ){echo "<h4>Config ".DbError($link)."</h4>";}else{echo "<h5>Config $dld $dellbl OK</h5>";}
-		$query	= GenQuery('monitoring','d','','','',array('name'),array('='),array($dld) );
-		if( !@DbQuery($query,$link) ){echo "<h4>Monitoring ".DbError($link)."</h4>";}else{echo "<h5>Monitoring $dld $dellbl OK</h5>";}
-		$query	= GenQuery('incidents','d','','','',array('name'),array('='),array($dld) );
-		if( !@DbQuery($query,$link) ){echo "<h4>Incidents ".DbError($link)."</h4>";}else{echo "<h5>Incidents $dld $dellbl OK</h5>";}
-		$query	= GenQuery('vlans','d','','','',array('device'),array('='),array($dld) );
-		if( !@DbQuery($query,$link) ){echo "<h4>Vlans ".DbError($link)."</h4>";}else{echo "<h5>Vlans $dld $dellbl OK</h5>";}
-		$query	= GenQuery('networks','d','','','',array('device'),array('='),array($dld) );
-		if( !@DbQuery($query,$link) ){echo "<h4>Networks ".DbError($link)."</h4>";}else{echo "<h5>Networks $dld $dellbl OK</h5>";}
-		$query	= GenQuery('events','d','','','',array('source'),array('='),array($dld) );
-		if( !@DbQuery($query,$link) ){echo "<h4>Events ".DbError($link)."</h4>";}else{echo "<h5>Events $dld $dellbl OK</h5>";}
-		$query	= GenQuery('devdel','i','','','',array('device','user','time'),'',array($dld,$_SESSION['user'],time()) );
-		if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$dellbl $dld $updlbl OK</h5>";}
-		$query = GenQuery('events','i','','','',array('level','time','source','info','class'),'',array('100',time(),$dld,"User $_SESSION[user] deleted this device",'usrd') );
-		if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$msglbl $updlbl OK</h5>";}
-#old:		DbQuery("DELETE FROM devices WHERE device = '".$rmdev."' LIMIT 1", $link);		SteffenScholz-2011-07-05
-			}
-		}
-	}
-	$collisions = array();
-	$coll_serials = array();
-	$devices = DbQuery("SELECT device, devip, serial, firstdis, lastdis FROM devices WHERE serial NOT REGEXP '^$|^-$|noSuch|err|n/a'", $link);
-#old	$devices = DbQuery("SELECT name, ip, serial, firstseen, lastseen FROM devices WHERE serial REGEXP BINARY '^[-() A-Z0-9]{2,}$'", $link);		SteffenScholz-2011-07-05
-	while ($device = DbFetchArray($devices)):
-		if (@!in_array($device['serial'], $coll_serials)):
-			$lookup = DbQuery("SELECT device, devip, firstdis, lastdis FROM devices WHERE serial = '".$device['serial']."' AND NOT device = '".$device['device']."'", $link);
-			while ($colldev = DbFetchArray($lookup)):
-				# determine reason for serial number collision
-				# use 
-				#	1 for change from dev1 to dev2
-				#	2 for change from dev2 to dev1
-				#	0 for unknown collision reason (i.e. devices appearance times overlap)
-				if ($colldev['firstdis'] > $device['lastdis']):
-					$reason = 1;
-				elseif ($colldev['lastdis'] < $device['firstdis']):
-					$reason = 2;
-				else:
-					$reason = 0;
-				endif;
-				$collisions[] = array('serial' => $device['serial'], 'dev1_name' => $device['device'], 'dev1_ip' => $device['devip'], 'dev2_name' => $colldev['device'], 'dev2_ip' => $colldev['devip'], 'reason' => $reason);
-				$coll_serials[] = $device['serial'];
-			endwhile;
-		endif;
-	endwhile;
-?>
-<h1>Serial number collisions</h1>
-<br>
-<?
-	$collnr = count($collisions);
-	if ($collnr): ?>
-<form action="<?= $_SERVER['PHP_SELF'] ?>" method="post">
-<table class="content">
-	<tr class="<?= $modgroup[$self] ?>1">
-		<td rowspan="<?= $collnr + 1 ?>"><img src="img/32/key.png"></td>
-		<th>Serial number</th>
-		<th>Device 1</th>
-		<th>Reason</th>
-		<th>Device 2</th>
-		<th>Action</th>
-	</tr>
-<?
-		foreach ($collisions as $collision): 
-			if ($collision['reason'] == 2):
-				$devOld = 'dev2';
-				$devNew = 'dev1';
-			else:
-				$devOld = 'dev1';
-				$devNew = 'dev2';
-			endif;
-?>
-	<tr class="<?= $modgroup[$self] ?>2">
-		<td><?= $collision['serial'] ?></td>
-		<td><?= $collision[$devOld.'_name']." at ".long2ip($collision[$devOld.'_ip']) ?></td>
-		<td><?= $collision['reason'] == 0 ? "has the same serial number as" : "seems to have become" ?></td>
-		<td><?= $collision[$devNew.'_name']." at ".long2ip($collision[$devNew.'_ip']) ?></td>
-		<td><?
-			switch ($collision['reason']):
-				case 1:
-				case 2: ?>
-			<input type="checkbox" name="delete[]" value="<?= $collision[$devOld.'_name'] ?>"> Delete <?= $collision[$devOld.'_name'] ?><br>		
-<?
-					break;
-				case 0: ?>
-			<input type="checkbox" name="delete[]" value="<?= $collision[$devOld.'_name'] ?>"> Delete <?= $collision[$devOld.'_name'] ?><br>
-			<input type="checkbox" name="delete[]" value="<?= $collision[$devNew.'_name'] ?>"> Delete <?= $collision[$devNew.'_name'] ?><br>
-<?
-					break;
-			endswitch; ?>
-			<a href="Devices-List.php?ina=device&amp;opa=%3D&amp;sta=<?= $collision[$devOld.'_name'] ?>&amp;cop=OR&amp;inb=device&amp;opb=%3D&amp;stb=<?= $collision[$devNew.'_name'] ?>&amp;col%5B%5D=device&amp;col%5B%5D=devip&amp;col%5B%5D=serial&amp;col%5B%5D=location&amp;col%5B%5D=firstdis&amp;col%5B%5D=lastdis">Details</a></td>
-	</tr>
-<?
-		endforeach;
-?>
-</table>
-<br>
-<input type="submit" name="rmdevs" value="Delete selected devices">
-</form>
-<?
-	else: ?>
-<div class="<?= $modgroup[$self] ?>">
-No serial number collisions have been found!
-</div>
-<?
-	endif;
-	
-	include("inc/footer.php");
-?>
+<?
+# 2011-07-05	Steffen Scholz	Update queries to fix following:
+#						- deleted devices will be removed from all tables and written to devdel-table for delete rrd's clearly (instead of delete only from devices-table and leave trashing rrd/interfaces/links/... behind)
+#						- also serials INCLUDING "-" among other charachters will be proceeded (like MAC-addresses as serials) - only follwing strings will be ignored:	 "-" as single character ,"" (empty), including "noSuch", "err", 
+# 2011-08-30	Steffen Scholz	update to new DB-Structure in nedi-1.0.6.220
+
+	include("inc/header.php");
+
+	$link = @DbConnect($dbhost,$dbuser,$dbpass,$dbname);
+	
+	if ($_POST['rmdevs']){
+		if ($isadmin){
+		foreach ($_POST['delete'] as $dld){
+		$query	= GenQuery('devices','d','','','',array('device'),array('='),array($dld) );
+		if( !@DbQuery($query,$link) ){echo "<h4>Device ".DbError($link)."</h4>";}else{echo "<h5>Device $dld $dellbl OK</h5>";}
+		$query	= GenQuery('interfaces','d','','','',array('device'),array('='),array($dld) );
+		if( !@DbQuery($query,$link) ){echo "<h4>IF ".DbError($link)."</h4>";}else{echo "<h5>IF $dld $dellbl OK</h5>";}
+		$query	= GenQuery('modules','d','','','',array('device'),array('='),array($dld) );
+		if( !@DbQuery($query,$link) ){echo "<h4>Modules ".DbError($link)."</h4>";}else{echo "<h5>Modules $dld $dellbl OK</h5>";}
+		$query	= GenQuery('links','d','','','',array('device'),array('='),array($dld) );
+		if( !@DbQuery($query,$link) ){echo "<h4>Links ".DbError($link)."</h4>";}else{echo "<h5>Links $dld $dellbl OK</h5>";}
+		$query	= GenQuery('links','d','','','',array('neighbor'),array('='),array($dld) );
+		if( !@DbQuery($query,$link) ){echo "<h4>Links ".DbError($link)."</h4>";}else{echo "<h5>Links $dld $dellbl OK</h5>";}
+		$query	= GenQuery('configs','d','','','',array('device'),array('='),array($dld) );
+		if( !@DbQuery($query,$link) ){echo "<h4>Config ".DbError($link)."</h4>";}else{echo "<h5>Config $dld $dellbl OK</h5>";}
+		$query	= GenQuery('monitoring','d','','','',array('name'),array('='),array($dld) );
+		if( !@DbQuery($query,$link) ){echo "<h4>Monitoring ".DbError($link)."</h4>";}else{echo "<h5>Monitoring $dld $dellbl OK</h5>";}
+		$query	= GenQuery('incidents','d','','','',array('name'),array('='),array($dld) );
+		if( !@DbQuery($query,$link) ){echo "<h4>Incidents ".DbError($link)."</h4>";}else{echo "<h5>Incidents $dld $dellbl OK</h5>";}
+		$query	= GenQuery('vlans','d','','','',array('device'),array('='),array($dld) );
+		if( !@DbQuery($query,$link) ){echo "<h4>Vlans ".DbError($link)."</h4>";}else{echo "<h5>Vlans $dld $dellbl OK</h5>";}
+		$query	= GenQuery('networks','d','','','',array('device'),array('='),array($dld) );
+		if( !@DbQuery($query,$link) ){echo "<h4>Networks ".DbError($link)."</h4>";}else{echo "<h5>Networks $dld $dellbl OK</h5>";}
+		$query	= GenQuery('events','d','','','',array('source'),array('='),array($dld) );
+		if( !@DbQuery($query,$link) ){echo "<h4>Events ".DbError($link)."</h4>";}else{echo "<h5>Events $dld $dellbl OK</h5>";}
+		$query	= GenQuery('devdel','i','','','',array('device','user','time'),'',array($dld,$_SESSION['user'],time()) );
+		if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$dellbl $dld $updlbl OK</h5>";}
+		$query = GenQuery('events','i','','','',array('level','time','source','info','class'),'',array('100',time(),$dld,"User $_SESSION[user] deleted this device",'usrd') );
+		if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$msglbl $updlbl OK</h5>";}
+# The following "DELETE ... LIMIT 1" doesn't make much sense.  It was commented out
+# when we found this code, so we're not going to touch it, but it wouldn't work under
+# non-MySQL databases.  Even in the MySQL world, a LIMIT clause on a DELETE doesn't
+# make much sense if you don't also have an ORDER BY clause in the same statement.
+#old:		DbQuery("DELETE FROM devices WHERE device = '".$rmdev."' LIMIT 1", $link);		SteffenScholz-2011-07-05
+			}
+		}
+	}
+	$collisions = array();
+	$coll_serials = array();
+	# Note:  'not regexpCI' generates a case-insensitive match.  If you meant to use a case-sensitive match, this must be changed to 'not regexp'.
+	$devices = DbQuery("SELECT device, devip, serial, firstdis, lastdis FROM devices WHERE ".DbRegexpClause(DbEscapeIdentifier('serial'), 'not regexpCI', DbQuotedEscapeString('^$|^-$|noSuch|err|n/a')), $link);
+#old	$devices = DbQuery("SELECT name, ip, serial, firstseen, lastseen FROM devices WHERE serial REGEXP BINARY '^[-() A-Z0-9]{2,}$'", $link);		SteffenScholz-2011-07-05
+	while ($device = DbFetchArray($devices)):
+		if (@!in_array($device['serial'], $coll_serials)):
+			$lookup = DbQuery("SELECT device, devip, firstdis, lastdis FROM devices WHERE serial = '".$device['serial']."' AND NOT device = '".$device['device']."'", $link);
+			while ($colldev = DbFetchArray($lookup)):
+				# determine reason for serial number collision
+				# use 
+				#	1 for change from dev1 to dev2
+				#	2 for change from dev2 to dev1
+				#	0 for unknown collision reason (i.e. devices appearance times overlap)
+				if ($colldev['firstdis'] > $device['lastdis']):
+					$reason = 1;
+				elseif ($colldev['lastdis'] < $device['firstdis']):
+					$reason = 2;
+				else:
+					$reason = 0;
+				endif;
+				$collisions[] = array('serial' => $device['serial'], 'dev1_name' => $device['device'], 'dev1_ip' => $device['devip'], 'dev2_name' => $colldev['device'], 'dev2_ip' => $colldev['devip'], 'reason' => $reason);
+				$coll_serials[] = $device['serial'];
+			endwhile;
+		endif;
+	endwhile;
+?>
+<h1>Serial number collisions</h1>
+<br>
+<?
+	$collnr = count($collisions);
+	if ($collnr): ?>
+<form action="" method="post">
+<table class="content">
+	<tr class="<?= $modgroup[$self] ?>1">
+		<td rowspan="<?= $collnr + 1 ?>"><img src="img/32/key.png"></td>
+		<th>Serial number</th>
+		<th>Device 1</th>
+		<th>Reason</th>
+		<th>Device 2</th>
+		<th>Action</th>
+	</tr>
+<?
+		foreach ($collisions as $collision): 
+			if ($collision['reason'] == 2):
+				$devOld = 'dev2';
+				$devNew = 'dev1';
+			else:
+				$devOld = 'dev1';
+				$devNew = 'dev2';
+			endif;
+?>
+	<tr class="<?= $modgroup[$self] ?>2">
+		<td><?= $collision['serial'] ?></td>
+		<td><?= $collision[$devOld.'_name']." at ".long2ip($collision[$devOld.'_ip']) ?></td>
+		<td><?= $collision['reason'] == 0 ? "has the same serial number as" : "seems to have become" ?></td>
+		<td><?= $collision[$devNew.'_name']." at ".long2ip($collision[$devNew.'_ip']) ?></td>
+		<td><?
+			switch ($collision['reason']):
+				case 1:
+				case 2: ?>
+			<input type="checkbox" name="delete[]" value="<?= $collision[$devOld.'_name'] ?>"> Delete <?= $collision[$devOld.'_name'] ?><br>		
+<?
+					break;
+				case 0: ?>
+			<input type="checkbox" name="delete[]" value="<?= $collision[$devOld.'_name'] ?>"> Delete <?= $collision[$devOld.'_name'] ?><br>
+			<input type="checkbox" name="delete[]" value="<?= $collision[$devNew.'_name'] ?>"> Delete <?= $collision[$devNew.'_name'] ?><br>
+<?
+					break;
+			endswitch; ?>
+			<a href="Devices-List.php?ina=device&amp;opa=%3D&amp;sta=<?= $collision[$devOld.'_name'] ?>&amp;cop=OR&amp;inb=device&amp;opb=%3D&amp;stb=<?= $collision[$devNew.'_name'] ?>&amp;col%5B%5D=device&amp;col%5B%5D=devip&amp;col%5B%5D=serial&amp;col%5B%5D=location&amp;col%5B%5D=firstdis&amp;col%5B%5D=lastdis">Details</a></td>
+	</tr>
+<?
+		endforeach;
+?>
+</table>
+<br>
+<input type="submit" name="rmdevs" value="Delete selected devices">
+</form>
+<?
+	else: ?>
+<div class="<?= $modgroup[$self] ?>">
+No serial number collisions have been found!
+</div>
+<?
+	endif;
+	
+	include("inc/footer.php");
+?>
--- nedi-std/contrib/bulkdelete.sh	2012-04-20 21:11:49.000000000 -0700
+++ nedi-gw/contrib/bulkdelete.sh	2012-04-10 19:07:54.000000000 -0700
@@ -5,38 +5,76 @@
 #
 # Till Elsner <elsner@acm.org>
 #
+# Ported to support PostgreSQL as an alternative to MySQL,
+# and to support NeDi 1.0.7, by GroundWork Open Source, Inc.
+#
+
+# These pathnames must be locally adjusted as necessary.
+mysql=/usr/bin/mysql
+psql=/usr/bin/psql
 
 function usage {
 	echo "Delete multiple devices from NeDi DB"
-	echo "bulkdelete.sh [-u username] [-p password] [-d database] [(-r regexp)|(-e device)]"
+	echo "bulkdelete.sh [-u username] [-p password] [-t dbtype] [-H hostname] [-d database] [(-r regexp)|(-e device)]"
 	echo "bulkdelete.sh -h"
 	echo
 	echo -e "-u username\tuser name for database connection"
 	echo -e "-p password\tpassword for database connection"
+	echo -e "-t dbtype\tdatabase type (optional, defaults to 'mysql'; can be 'postgresql')"
+	echo -e "-H hostname\tdatabase host (optional, defaults to 'localhost')"
 	echo -e "-d database\tdatabase to connect to (optional, defaults to 'nedi')"
-	echo -e "-r expression\tmatch devices to be deleted by regular expression"
+	echo -e "-r expression\tmatch devices to be deleted by (case-insensitive) regular expression"
 	echo -e "-e device\tdelete device with exactly matching name"
 	echo -e "-h\t\thelp"
 }
 
 function getDevices {
-	[ "$2" = 'r' ] && OP="REGEXP" || OP="="
-	mysql -u $DBUSER --password=$DBPASS -BN -e "SELECT name FROM devices WHERE name $OP '$1'" nedi
+	if [ $DBTYPE = mysql ]
+	then
+	    [ "$2" = 'r' ] && OP="REGEXP" || OP="="
+	    $mysql -h "$DBHOST" -u $DBUSER --password=$DBPASS -BN -e "SELECT device FROM devices WHERE device $OP '$1'" $DBNAME
+	fi
+	# psql doesn't allow passing a password on the command line,
+	# for security reasons.  It will prompt for one if necessary.
+	if [ $DBTYPE = postgresql ]
+	then
+	    [ "$2" = 'r' ] && OP="~*" || OP="="
+	    $psql -h "$DBHOST" -U $DBUSER -d $DBNAME -q -t -n -P border=0 -c "SELECT device FROM devices WHERE device $OP '$1'"
+	fi
 }
 
 function deleteDevice {
-	mysql -u $DBUSER --password=$DBPASS -e "DELETE FROM devices WHERE name = '$1'" nedi && \
-	mysql -u $DBUSER --password=$DBPASS -e "DELETE FROM interfaces WHERE device = '$1'" nedi && \
-	mysql -u $DBUSER --password=$DBPASS -e "DELETE FROM modules WHERE device = '$1'" nedi && \
-	mysql -u $DBUSER --password=$DBPASS -e "DELETE FROM links WHERE device = '$1'" nedi && \
-	mysql -u $DBUSER --password=$DBPASS -e "DELETE FROM links WHERE neighbour = '$1'" nedi && \
-	mysql -u $DBUSER --password=$DBPASS -e "DELETE FROM configs WHERE device = '$1'" nedi && \
-	mysql -u $DBUSER --password=$DBPASS -e "DELETE FROM monitoring WHERE device = '$1'" nedi && \
-	mysql -u $DBUSER --password=$DBPASS -e "DELETE FROM incidents WHERE device = '$1'" nedi && \
-	mysql -u $DBUSER --password=$DBPASS -e "DELETE FROM vlans WHERE device = '$1'" nedi && \
-	mysql -u $DBUSER --password=$DBPASS -e "DELETE FROM networks WHERE device = '$1'" nedi && \
-	mysql -u $DBUSER --password=$DBPASS -e "DELETE FROM events WHERE source = '$1'" nedi && \
-	mysql -u $DBUSER --password=$DBPASS -e "INSERT INTO devdel (device, user, time) VALUES ('$1', 'admin', UNIX_TIMESTAMP())" nedi
+	echo "device to delete = '$1'"
+	[ $DBTYPE = mysql ] && \
+	    $mysql -h "$DBHOST" -u $DBUSER --password=$DBPASS -e "DELETE FROM devices    WHERE device   = '$1'" $DBNAME && \
+	    $mysql -h "$DBHOST" -u $DBUSER --password=$DBPASS -e "DELETE FROM interfaces WHERE device   = '$1'" $DBNAME && \
+	    $mysql -h "$DBHOST" -u $DBUSER --password=$DBPASS -e "DELETE FROM modules    WHERE device   = '$1'" $DBNAME && \
+	    $mysql -h "$DBHOST" -u $DBUSER --password=$DBPASS -e "DELETE FROM links      WHERE device   = '$1'" $DBNAME && \
+	    $mysql -h "$DBHOST" -u $DBUSER --password=$DBPASS -e "DELETE FROM links      WHERE neighbor = '$1'" $DBNAME && \
+	    $mysql -h "$DBHOST" -u $DBUSER --password=$DBPASS -e "DELETE FROM configs    WHERE device   = '$1'" $DBNAME && \
+	    $mysql -h "$DBHOST" -u $DBUSER --password=$DBPASS -e "DELETE FROM monitoring WHERE device   = '$1'" $DBNAME && \
+	    $mysql -h "$DBHOST" -u $DBUSER --password=$DBPASS -e "DELETE FROM incidents  WHERE device   = '$1'" $DBNAME && \
+	    $mysql -h "$DBHOST" -u $DBUSER --password=$DBPASS -e "DELETE FROM vlans      WHERE device   = '$1'" $DBNAME && \
+	    $mysql -h "$DBHOST" -u $DBUSER --password=$DBPASS -e "DELETE FROM networks   WHERE device   = '$1'" $DBNAME && \
+	    $mysql -h "$DBHOST" -u $DBUSER --password=$DBPASS -e "DELETE FROM events     WHERE source   = '$1'" $DBNAME && \
+	    $mysql -h "$DBHOST" -u $DBUSER --password=$DBPASS -e "INSERT INTO devdel (device, \`user\`, \`time\`) VALUES ('$1', 'admin', UNIX_TIMESTAMP())" $DBNAME
+	# Partly because we don't want to be prompted multiple times for a password, we run
+	# everything for PostgreSQL deletes in a single go rather than as separate commands.
+	# Also, this makes it easy to wrap everything into a single transcation.
+	[ $DBTYPE = postgresql ] && echo \
+	    "DELETE FROM devices    WHERE device   = '$1';" \
+	    "DELETE FROM interfaces WHERE device   = '$1';" \
+	    "DELETE FROM modules    WHERE device   = '$1';" \
+	    "DELETE FROM links      WHERE device   = '$1';" \
+	    "DELETE FROM links      WHERE neighbor = '$1';" \
+	    "DELETE FROM configs    WHERE device   = '$1';" \
+	    "DELETE FROM monitoring WHERE device   = '$1';" \
+	    "DELETE FROM incidents  WHERE device   = '$1';" \
+	    "DELETE FROM vlans      WHERE device   = '$1';" \
+	    "DELETE FROM networks   WHERE device   = '$1';" \
+	    "DELETE FROM events     WHERE source   = '$1';" \
+	    "INSERT INTO devdel (device, \"user\", \"time\") VALUES ('$1', 'admin', extract(epoch from current_timestamp(0)));" \
+	    | $psql -h "$DBHOST" -U $DBUSER -d $DBNAME --single-transaction -f -
 }
 
 while [ -n "$1" ]
@@ -68,6 +106,28 @@
 			fi
 			shift
 			;;
+		-t)
+			shift
+			if [ -z "`echo "$1" | egrep -o "^[-]"`" ]
+			then
+				DBTYPE=$1
+			else
+				echo "Expected database type with -t"
+				exit 1
+			fi
+			shift
+			;;
+		-H)
+			shift
+			if [ -z "`echo "$1" | egrep -o "^[-]"`" ]
+			then
+				DBHOST=$1
+			else
+				echo "Expected database hostname with -H"
+				exit 1
+			fi
+			shift
+			;;
 		-d)
 			shift
 			if [ -z "`echo "$1" | egrep -o "^[-]"`" ]
@@ -110,6 +170,37 @@
 	esac
 done
 
+if [ -z "$DBTYPE" ]
+then
+	echo -e "Enter database type (mysql or postgresql): \c "
+	read DBTYPE
+	echo
+fi
+if [ -z "$DBTYPE" ]
+then
+	echo "NOTICE:  A MySQL database is being assumed."
+	DBTYPE="mysql"
+	echo
+fi
+if [ "$DBTYPE" != "mysql" -a "$DBTYPE" != "postgresql" ]
+then
+	echo 'ERROR:  Only "mysql" and "postgresql" are supported database types.'
+	exit 1
+fi
+
+if [ -z "$DBHOST" ]
+then
+	echo -e "Enter database hostname: \c "
+	read DBHOST
+	echo
+fi
+if [ -z "$DBHOST" ]
+then
+	echo "NOTICE:  A database on localhost is being assumed."
+	DBHOST="localhost"
+	echo
+fi
+
 if [ -z "$DBUSER" ]
 then
 	echo -e "Enter username for database: \c "
@@ -124,6 +215,7 @@
 	read DBPASS
 	stty echo
 	echo
+	echo
 fi
 
 [ -z "$DBNAME" ] && DBNAME="nedi"
@@ -133,7 +225,9 @@
 	while [ "$MATCHTYPE" != 'r' -a "$MATCHTYPE" != 'e' ]
 	do
 		echo -e "Match devices names (e)xactly or by (r)egular expression? \c "
-		read 1 MATCHTYPE
+		read -n 1 MATCHTYPE
+		echo
+		echo
 	done
 fi
 
--- nedi-std/contrib/ccc.pl	2012-04-20 21:11:49.000000000 -0700
+++ nedi-gw/contrib/ccc.pl	2012-04-09 19:23:37.000000000 -0700
@@ -1,11 +1,12 @@
-#!/usr/bin/perl
+#!/usr/bin/perl -w
 #
 # ccc.pl
-# cisco contract checker v0.2
+# cisco contract checker v0.3
 # get a Cisco Support Contract into nedi.cisco_contracts Table
 #
 # (c)2008 Andreas Wassatsch
 # released under GPLv2
+# Overhauled by GroundWork Open Source, Inc. (2012)
 #
 # This software is provided as-is, without any express or implied
 # warranty. In no event will the author be held liable for any mental
@@ -24,24 +25,43 @@
 #   upgrade from v0.1
 # - eleminated previously required packages: w3m and Perl Module Date::Calc
 # - since we fetch end_date, checking once a month should be enough
+#
+# Changed for v0.3:
+# - Ported to provide support for a PostgreSQL database.
+# - Cleaned up database error handling.
+# - Cleaned up Perl warnings.
+
+use strict;
+
+my $DEBUG = 0;
 
 # Modules
 #--------
 use DBI;
-use DBD::mysql;
+# Explicit mention of the particular driver is not necessary here.
+# You just need to have the one you need installed.  The particular
+# $dbtype you configure below will select the appropriate driver at
+# run time when the database connection is attempted, so we need not
+# tie the source code here to having both drivers installed.
+# use DBD::mysql;
+# use DBD::Pg;
 
-# Credentials for Cisco CCO and Nedi Mysql DB
-#--------------------------------------------
+# Credentials for Cisco CCO and for Nedi DB
+#------------------------------------------
 my $cco_user    = "your_cco_username";
 my $cco_pass    = "your_cco_password";
 
-my $mysql_db    = "nedi";
-my $mysql_user  = "nedi";
-my $mysql_pass  = "dbpa55";
-my $mysql_host  = "localhost";
+# FIX MINOR:  This data should be drawn from nedi.conf instead of being hardcoded here.
+# DB params.  $dbtype can be either "mysql" or "postgresql".
+my $dbtype = "postgresql";
+my $dbname = "nedi";
+my $dbuser = "nedi";
+my $dbpass = "dbpa55";
+my $dbhost = "localhost";
 
 # list your Cisco contracts here
 #----------------------------------------------------------
+my @contract = ();
 $contract[1] = "1234567";	# your Cisco contract number
 # $contract[2] = "";		# optional - 2nd Contract
 # $contract[3] = "";		# optional - 3rd Contract
@@ -49,88 +69,171 @@
 
 # Open DB connection
 #-------------------
-$dsn = "DBI:mysql:database=$mysql_db;host=$mysql_host";
-$dbh = DBI->connect($dsn, $mysql_user, $mysql_pass);
+my $dsn = '';
+if ( defined($dbtype) && $dbtype eq 'postgresql' ) {
+	$dsn = "DBI:Pg:dbname=$dbname;host=$dbhost";
+}
+else {
+	$dsn = "DBI:mysql:database=$dbname;host=$dbhost";
+}
+my $dbh = undef;
+eval {
+	$dbh = DBI->connect( $dsn, $dbuser, $dbpass, { RaiseError => 1, PrintError => 0, 'AutoCommit' => 1 } );
+};
+if ($@) {
+	chomp $@;
+	die "ERROR:  Cannot connect to database $dbname:\n$@\n";
+}
 
 # create contract table if not exists
 #------------------------------------
-$table = ("CREATE TABLE IF NOT EXISTS `cisco_contracts` (
- `contract_number` varchar(16) NOT NULL,
- `service_level` varchar(40) NOT NULL,
- `contract_label` varchar(32) default NULL,
- `bill_to_name` varchar(32) default NULL,
- `address` varchar(40) default NULL,
- `city` varchar(32) default NULL,
- `state` varchar(16) default NULL,
- `zip_code` varchar(16) default NULL,
- `country` varchar(16) default NULL,
- `bill_to_contact` varchar(32) default NULL,
- `phone` varchar(16) default NULL,
- `email` varchar(40) default NULL,
- `site_id` varchar(15) default NULL,
- `site_name` varchar(15) default NULL,
- `site_address` varchar(40) default NULL,
- `address_line2` varchar(40) default NULL,
- `address_line3` varchar(40) default NULL,
- `site_city` varchar(40) default NULL,
- `site_state` varchar(16) default NULL,
- `site_zip` varchar(16) default NULL,
- `site_country` varchar(16) default NULL,
- `site_notes` varchar(40) default NULL,
- `site_label` varchar(40) default NULL,
- `site_contact` varchar(40) default NULL,
- `site_phone` varchar(16) default NULL,
- `site_email` varchar(40) default NULL,
- `product_number` varchar(32) NOT NULL,
- `serial_number` varchar(40) NOT NULL,
- `name_ip_address` varchar(32) default NULL,
- `description` varchar(64) default NULL,
- `product_type` varchar(32) default NULL,
- `begin_date` varchar(16) default NULL,
- `end_date` varchar(16) default NULL,
- `po_number` varchar(16) default NULL,
- `so_number` varchar(16) default NULL,
- PRIMARY KEY  (`serial_number`)
-) ENGINE=MyISAM DEFAULT CHARSET=latin1");
-$dbh->do($table);
+my @table = ();
+if ( defined($dbtype) && $dbtype eq 'postgresql' ) {
+	@table = (
+	    "CREATE TABLE IF NOT EXISTS cisco_contracts (
+		contract_number character varying(16) NOT NULL,
+		service_level character varying(40) NOT NULL,
+		contract_label character varying(32),
+		bill_to_name character varying(32),
+		address character varying(40),
+		city character varying(32),
+		state character varying(16),
+		zip_code character varying(16),
+		country character varying(16),
+		bill_to_contact character varying(32),
+		phone character varying(16),
+		email character varying(40),
+		site_id character varying(15),
+		site_name character varying(15),
+		site_address character varying(40),
+		address_line2 character varying(40),
+		address_line3 character varying(40),
+		site_city character varying(40),
+		site_state character varying(16),
+		site_zip character varying(16),
+		site_country character varying(16),
+		site_notes character varying(40),
+		site_label character varying(40),
+		site_contact character varying(40),
+		site_phone character varying(16),
+		site_email character varying(40),
+		product_number character varying(32) NOT NULL,
+		serial_number character varying(40) NOT NULL,
+		name_ip_address character varying(32),
+		description character varying(64),
+		product_type character varying(32),
+		begin_date character varying(16),
+		end_date character varying(16),
+		po_number character varying(16),
+		so_number character varying(16),
+		CONSTRAINT cisco_contracts_pkey PRIMARY KEY (serial_number)
+	    )",
+	    "ALTER TABLE public.cisco_contracts OWNER TO $dbuser"
+	);
+}
+else {
+	@table = (
+	    "CREATE TABLE IF NOT EXISTS `cisco_contracts` (
+		`contract_number` varchar(16) NOT NULL,
+		`service_level` varchar(40) NOT NULL,
+		`contract_label` varchar(32) default NULL,
+		`bill_to_name` varchar(32) default NULL,
+		`address` varchar(40) default NULL,
+		`city` varchar(32) default NULL,
+		`state` varchar(16) default NULL,
+		`zip_code` varchar(16) default NULL,
+		`country` varchar(16) default NULL,
+		`bill_to_contact` varchar(32) default NULL,
+		`phone` varchar(16) default NULL,
+		`email` varchar(40) default NULL,
+		`site_id` varchar(15) default NULL,
+		`site_name` varchar(15) default NULL,
+		`site_address` varchar(40) default NULL,
+		`address_line2` varchar(40) default NULL,
+		`address_line3` varchar(40) default NULL,
+		`site_city` varchar(40) default NULL,
+		`site_state` varchar(16) default NULL,
+		`site_zip` varchar(16) default NULL,
+		`site_country` varchar(16) default NULL,
+		`site_notes` varchar(40) default NULL,
+		`site_label` varchar(40) default NULL,
+		`site_contact` varchar(40) default NULL,
+		`site_phone` varchar(16) default NULL,
+		`site_email` varchar(40) default NULL,
+		`product_number` varchar(32) NOT NULL,
+		`serial_number` varchar(40) NOT NULL,
+		`name_ip_address` varchar(32) default NULL,
+		`description` varchar(64) default NULL,
+		`product_type` varchar(32) default NULL,
+		`begin_date` varchar(16) default NULL,
+		`end_date` varchar(16) default NULL,
+		`po_number` varchar(16) default NULL,
+		`so_number` varchar(16) default NULL,
+		PRIMARY KEY  (`serial_number`)
+	    ) ENGINE=MyISAM DEFAULT CHARSET=latin1"
+	);
+}
+my $query = '';
+eval {
+	foreach my $stmt (@table) {
+		$query = $stmt;  # Unaliased copy, so an error message below will work as intended.
+		$dbh->do($query);
+	}
+};
+if ($@) {
+	chomp $@;
+	die "ERROR:  Cannot create the cisco_contracts table:\n$query\n$@\n";
+}
 
 # try to get contracts from Cisco Web Site
 #-----------------------------------------
-for ($i=1; $i<($#contract+1) ; $i++) {
+for (my $i=1; $i<($#contract+1) ; $i++) {
 
 	print "\nContract=$contract[$i]\n";
 
-	$post = "AppName=ContractAgent&Form=ConManager&Function=DownloadContract&UserId=$cco_user&Auth=null&ConNum=$contract[$i]&ContractOrSite=Contract&Type=Summary&Download=Screen&Submit=Download";
+	my $post = "AppName=ContractAgent&Form=ConManager&Function=DownloadContract&UserId=$cco_user&Auth=null&ConNum=$contract[$i]&ContractOrSite=Contract&Type=Summary&Download=Screen&Submit=Download";
 
-	open(CISCO, "wget -q --keep-session-cookies --user=$cco_user --password=$cco_pass http://www.cisco.com/cgi-bin/front.x/scccibdispatch --post-data \'$post\' -O - |");
+	my @cisco = ();
+	if (open(CISCO, "wget -q --keep-session-cookies --user=$cco_user --password=$cco_pass http://www.cisco.com/cgi-bin/front.x/scccibdispatch --post-data \'$post\' -O - |")) {
 		@cisco = grep(!/^Contract Number/, <CISCO>);
-	close(CISCO);
+		close(CISCO);
+	}
+	else {
+		die "Sorry, could not connect to Cisco to access contract $contract[$i].\n"; 
+	}
 
-	if (grep(/\<html\>/, @cisco)) {
-		print "sorry, couldn't download contract $contract[$i] - check your CCO access rights.\n"; 
+	if (@cisco == 0 || grep(/\<html\>/, @cisco)) {
+		print "Sorry, couldn't download contract $contract[$i] -- check your CCO access rights.\n"; 
 	} else {
 
-		foreach $line (@cisco) {
-			(@val) = split(/\t/, $line);
-
-			print "\t$val[26]\t$val[27]\t$val[1]\t$val[32]\n";
-
-			$sql = "DELETE FROM cisco_contracts WHERE serial_number=\"$val[27]\"";
-			$sth = $dbh->prepare($sql);
-			$sth->execute();
-	
-			$sql = "INSERT INTO cisco_contracts VALUES (\'$val[0]\'";
-			for($j=1; $j<($#val+1); $j++) {
-				$sql .= ", \'$val[$j]\'";
-			}
-			$sql .= ")";
-			
-			if ($DEBUG) {
-				print "$sql\n";
+		my $query = '';
+		eval {
+			foreach my $line (@cisco) {
+				(my @val) = split(/\t/, $line);
+
+				print "\t$val[26]\t$val[27]\t$val[1]\t$val[32]\n";
+
+				$query = "DELETE FROM cisco_contracts WHERE serial_number='$val[27]'";
+				my $sth = $dbh->prepare($query);
+				$sth->execute();
+		
+				$query = "INSERT INTO cisco_contracts VALUES ('$val[0]'";
+				for(my $j=1; $j<($#val+1); $j++) {
+					$query .= ", '$val[$j]'";
+				}
+				$query .= ")";
+				
+				if ($DEBUG) {
+					print "$query\n";
+				}
+		
+				$sth = $dbh->prepare($query);
+				$sth->execute();
 			}
-	
-			$sth = $dbh->prepare($sql);
-			$sth->execute();
+		};
+		if ($@) {
+			chomp $@;
+			die "ERROR:  Cannot populate the cisco_contracts table:\n$query\n$@\n";
 		}
 	}
 }
--- nedi-std/contrib/libSpreadsheet.php	2012-02-11 04:14:22.000000000 -0800
+++ nedi-gw/contrib/libSpreadsheet.php	2012-04-11 12:25:19.000000000 -0700
@@ -5,66 +5,69 @@
 # used to export NeDi lists to the Excel spreadsheet format (.xls)	
 # only device list and nodes list implemented yet	
 #	
-# This script takes the same arguments that are used by the web interface to fetch lists. As	
-# additinal parameter, $_GET['page'] holds the name of the list page.	
+# This script takes the same arguments that are used by the web interface to fetch lists.
+# An additional parameter, $_GET['page'], holds the name of the list page.	
 #	
 # This script requires the PEAR package Spreadsheet_Excel_Writer to be installed.	
 #	
 # written by gumba, 2008
+# Somewhat improved by GroundWork, 2012
 #################################################################################################
 
-require_once("libmisc.php");
-require_once("libmsq.php");
+# FIX MINOR:  The "msq" string should be derived from the "backend" specification in the nedi.conf file.
+require_once("inc/libmisc.php");
+require_once("inc/libdb-msq.php");
 
 # specify handling for different pages here
 switch ($_GET['page']):
-case "Devices-List":
-$tblname = "devices";
-$colName['name'] = "Name";
-$colName['ip'] = "Main IP";
-$colName['serial'] = "Serial Number";
-$colName['type'] = "Type";
-$colName['firstseen'] = "First seen";
-$colName['lastseen'] = "Last seen";
-$colName['services'] = "Services";
-$colName['description'] = "Description";
-$colName['os'] = "OS";
-$colName['bootimage'] = "Bootimage";
-$colName['location'] = "Location";
-$colName['contact'] = "Contact";
-$colName['vtpdomain'] = "VTP Domain";
-$colName['vtpmode'] = "VTP Mode";
-$colName['snmpversion'] = "SNMP Version";
-$colName['community'] = "Community";
-$colName['cliport'] = "CLI port";
-$colName['login'] = "Login";
-$colName['icon'] = "Icon";
-$colName['origip'] = "Original IP";
-$colName['cpu'] = "% CPU";
-$colName['memcpu'] = "Available CPU Mem";
-$colName['memio'] = "Available IO Mem";
-$colName['temp'] = "Temperature";
-break;
-case "Nodes-List":
-$tblname = "nodes";
-$colName['name'] = "Name";
-$colName['ip'] = "IP Address";
-$colName['mac'] = "MAC Update";
-$colName['oui'] = "OUI Vendor";
-$colName['firstseen'] = "First seen";
-$colName['lastseen'] = "Last seen";
-$colName['device'] = "Device";
-$colName['ifname'] = "IF Name";
-$colName['vlanid'] = "Vlan";
-$colName['ifmetric'] = "IF Metric";
-$colName['ifupdate'] = "IF Update";
-$colName['ifchanges'] = "IF Changes";
-$colName['ipupdate'] = "IP Update";
-$colName['ipchanges'] = "IP Changes";
-$colName['iplost'] = "IP Lost";
-$colName['arp'] = "ARP Values";
-break;
-default: ?>
+    case "Devices-List":
+	$tblname = "devices";
+	$colName['name'] = "Name";
+	$colName['ip'] = "Main IP";
+	$colName['serial'] = "Serial Number";
+	$colName['type'] = "Type";
+	$colName['firstseen'] = "First seen";
+	$colName['lastseen'] = "Last seen";
+	$colName['services'] = "Services";
+	$colName['description'] = "Description";
+	$colName['os'] = "OS";
+	$colName['bootimage'] = "Bootimage";
+	$colName['location'] = "Location";
+	$colName['contact'] = "Contact";
+	$colName['vtpdomain'] = "VTP Domain";
+	$colName['vtpmode'] = "VTP Mode";
+	$colName['snmpversion'] = "SNMP Version";
+	$colName['community'] = "Community";
+	$colName['cliport'] = "CLI port";
+	$colName['login'] = "Login";
+	$colName['icon'] = "Icon";
+	$colName['origip'] = "Original IP";
+	$colName['cpu'] = "% CPU";
+	$colName['memcpu'] = "Available CPU Mem";
+	$colName['memio'] = "Available IO Mem";
+	$colName['temp'] = "Temperature";
+	break;
+    case "Nodes-List":
+	$tblname = "nodes";
+	$colName['name'] = "Name";
+	$colName['ip'] = "IP Address";
+	$colName['mac'] = "MAC Update";
+	$colName['oui'] = "OUI Vendor";
+	$colName['firstseen'] = "First seen";
+	$colName['lastseen'] = "Last seen";
+	$colName['device'] = "Device";
+	$colName['ifname'] = "IF Name";
+	$colName['vlanid'] = "Vlan";
+	$colName['ifmetric'] = "IF Metric";
+	$colName['ifupdate'] = "IF Update";
+	$colName['ifchanges'] = "IF Changes";
+	$colName['ipupdate'] = "IP Update";
+	$colName['ipchanges'] = "IP Changes";
+	$colName['iplost'] = "IP Lost";
+	$colName['arp'] = "ARP Values";
+	break;
+    default:
+?>
 <html>
 <script>
 alert("Lists from page '<?= $_GET['page'] ?>' not supported!"); 
@@ -72,7 +75,7 @@
 </script>
 </html>
 <?php
-die();
+	die();
 endswitch;
 
 require_once("Spreadsheet/Excel/Writer.php");
@@ -96,50 +99,63 @@
 $colnr = 0;
 $colwidth = array();
 foreach ($_GET['col'] as $col):
-$worksheet->write($rownr, $colnr, $colName[$col], $style_bold);
-$colwidth[$colnr] = strlen($colName[$col]);
-$colnr++;
+    $worksheet->write($rownr, $colnr, $colName[$col], $style_bold);
+    $colwidth[$colnr] = strlen($colName[$col]);
+    $colnr++;
 endforeach;
 $rownr++;
 
-$link = DbConnect("localhost", "nedi", "dbpa55", "nedi");
+# Database access credentials are now drawn from the
+# nedi.conf file instead of hardcoding them here.
+ReadConf('');
+
+# If you really, really need to override, you can do so here.
+# This is STRONGLY discouraged.
+# Note:  $dbtype can be either "mysql" or "postgresql"
+# $dbtype = "postgresql";
+# $dbname = "nedi";
+# $dbuser = "nedi";
+# $dbpass = "dbpa55";
+# $dbhost = "localhost";
+
+$link = DbConnect($dbhost, $dbuser, $dbpass, $dbname);
 $query = GenQuery($tblname, 's', '*', $_GET['ord'], '', array($_GET['ina'], $_GET['inb']), array($_GET['opa'], $_GET['opb']), array($_GET['sta'], $_GET['stb']), array($_GET['cop'], ''));
 $result = DbQuery($query, $link);
 while ($dev = DbFetchArray($result)):
-$colnr = 0;
-foreach ($_GET['col'] as $col):
-switch ($col):
-case "ip":
-$value = long2ip($dev['ip']);
-$style = $style_none;
-break;
-case "lastseen":
-$value = date("j. M. Y, H:i:s", $dev['lastseen']);
-if ($dev['lastseen'] < time() - 2419200):
-$style = $color_critical;
-elseif ($dev['lastseen'] < time() - 1209600):
-$style = $color_warning;
-else:
-$style = $style_none;
-endif;
-break;
-case "firstseen":
-$value = date("j. M. Y, H:i:s", $dev['firstseen']);
-break;
-default:
-$value = $dev[$col];
-$style = $style_none;
-break;
-endswitch;
-$worksheet->write($rownr, $colnr, $value, $style);
-$colwidth[$colnr] = max($colwidth[$colnr], strlen($value) + 2);
-$colnr++;
-endforeach;
-$rownr++;
+    $colnr = 0;
+    foreach ($_GET['col'] as $col):
+	switch ($col):
+	    case "ip":
+		$value = long2ip($dev['ip']);
+		$style = $style_none;
+		break;
+	    case "lastseen":
+		$value = date("j. M. Y, H:i:s", $dev['lastseen']);
+		if ($dev['lastseen'] < time() - 2419200):
+		    $style = $color_critical;
+		elseif ($dev['lastseen'] < time() - 1209600):
+		    $style = $color_warning;
+		else:
+		    $style = $style_none;
+		endif;
+		break;
+	    case "firstseen":
+		$value = date("j. M. Y, H:i:s", $dev['firstseen']);
+		break;
+	    default:
+		$value = $dev[$col];
+		$style = $style_none;
+		break;
+	endswitch;
+	$worksheet->write($rownr, $colnr, $value, $style);
+	$colwidth[$colnr] = max($colwidth[$colnr], strlen($value) + 2);
+	$colnr++;
+    endforeach;
+    $rownr++;
 endwhile;
 
 foreach ($colwidth as $i => $width):
-$worksheet->setColumn($i, $i, $width);
+    $worksheet->setColumn($i, $i, $width);
 endforeach;
 
 $workbook->close();
--- nedi-std/html/Devices-Config.php	2012-02-11 04:14:22.000000000 -0800
+++ nedi-gw/html/Devices-Config.php	2012-04-12 21:14:45.000000000 -0700
@@ -119,7 +119,7 @@
 
 if ($dch){
 	if($isadmin){
-		$query	= GenQuery('configs','u',"device=\"$dch\"",'','',array('changes'),'',array('') );
+		$query	= GenQuery('configs','u',"device='$dch'",'','',array('changes'),'',array('') );
 		if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5> $dch $dellbl $chglbl $lstlbl OK</h5>";}
 	}else{
 		echo $nokmsg;
@@ -249,7 +249,7 @@
 				echo "<tr class=\"$bg\" onmouseover=\"this.className='imga'\" onmouseout=\"this.className='$bg'\"><th class=\"$bi\">\n";
 				echo "<a href=Devices-Status.php?dev=$ud><img src=\"img/dev/$img.png\" title=\"$typ\"></a><br>$con[0]</td>\n";
 				echo "<td>".Devcli($devip[$con[0]],$devpo[$con[0]])."</td><td>".$devos[$con[0]]."</td>\n";
-				echo "<td><a href=$_SERVER[PHP_SELF]?shc=$ud><div class=\"code\">\n";
+				echo "<td><a href=?shc=$ud><div class=\"code\">";
 				echo substr(implode("\n",preg_grep("/$str/i",explode("\n",$con[1]) ) ),0,$lim);
 				echo "</div></a></td><td>$con[4]</td>\n";
 				$cu  = date($_SESSION['date'],$con[3]);
@@ -289,6 +289,13 @@
 	$charr	= preg_replace("/^#(.*)$/","<span class='gry'>#$1</span>",$charr);
 	$charr	= preg_replace("/(^\s*[0-9]{1,3}\-.*)$/","<span class='drd'>$1</span>",$charr);
 	$charr	= preg_replace("/(^\s*[0-9]{1,3}\+.*)$/","<span class='olv'>$1</span>",$charr);
+	# FIX MINOR:  The notion of using an SQL query straight from a URL (such as the embedded
+	# SELECT below) is a security nightmare.  This is subject to SQL injection vulnerabilities;
+	# see:  http://en.wikipedia.org/wiki/SQL_injection
+	# THIS APPROACH MUST BE COMPLETELY REWORKED TO DISALLOW DIRECT QUERIES.
+	# In the meantime, we work around URL rewriting (' => \') by security layers,
+	# by not including explicit single-quote characters in the SQL if we can avoid it.
+	$quote = (!isset($dbtype) || $dbtype === 'mysql') ? '%27' : '$apos$';
 ?>
 <table class="content"><tr class="<?=$modgroup[$self]?>2">
 <th><img src="img/32/note.png"><br><?=$cfglbl?> (<?=date($_SESSION['date'],$cfg[3])?>)</th>
@@ -296,19 +303,19 @@
 <tr class="txta"><td valign="top">
 <a href="?shc=<?=$ucfg?>&sln=<?=!$sln?>&smo=<?=$smo?>"><img src="img/16/form.png" title="Line #"></a>
 <a href="?shc=<?=$ucfg?>&sln=<?=$sln?>&smo=<?=!$smo?>"><img src="img/16/say.png" title="motd"></a>
-<a href="System-Export.php?action=export&exptbl=configs&query=SELECT+config+FROM+configs+where+DEVICE%3D%22<?=$ucfg?>%22&type=plain"><img src="img/16/flop.png" title="<?=(($verb1)?"$explbl $cfglbl":"$cfglbl $explbl")?>"></a>
+<a href="System-Export.php?action=export&exptbl=configs&query=SELECT+config+FROM+configs+where+DEVICE%3D<?="$quote$ucfg$quote"?>&type=plain"><img src="img/16/flop.png" title="<?=(($verb1)?"$explbl $cfglbl":"$cfglbl $explbl")?>"></a>
 <a href="Devices-Status.php?dev=<?=$ucfg?>"><img src="img/16/sys.png" title="Device-Status"></a>
 <a href="Devices-Doctor.php?dev=<?=$ucfg?>"><img src="img/16/cinf.png" title="<?=$cfglbl?> <?=$sumlbl?>"></a>
 <? if($isadmin){?>
-<a href="<?=$_SERVER[PHP_SELF]?>?dco=$ucfg"><img src="img/16/bcnl.png" onclick="return confirm('$cfg[0]: $dellbl $cfglbl?')" title="$dellbl $cfglbl!"></a>
+<a href="?dco=<?=$ucfg?>"><?="<img src=\"img/16/bcnl.png\" onclick=\"return confirm('$cfg[0]: $dellbl $cfglbl?')\" title=\"$dellbl $cfglbl!\">"?></a>
 <?}?>
 
-<div class="code">
-<?
+<div class="code"><?
 	$lnr = 0;
 	foreach ( explode("\n",$cfg[1]) as $cl ){
 		if ($sln) $lnr++;
-		echo Shoconf($cl,$smo,$lnr);
+		# This text is far more readable if we break it into individual lines on-screen.
+		echo preg_replace('/\\\\n/', '<br>', Shoconf($cl,$smo,$lnr));
 	}
 echo "</div></td><td valign=top>";
 ?>
@@ -327,7 +334,7 @@
 </select>
 <?
 if($isadmin)
-	echo "<a href=$_SERVER[PHP_SELF]?dch=$ucfg><img src=\"img/16/bcnl.png\" onclick=\"return confirm('$cfg[0]: $dellbl $chglbl $lstlbl?')\" title=\"$dellbl $chglbl!\"></a>\n";
+	echo "<a href=?dch=$ucfg><img src=\"img/16/bcnl.png\" onclick=\"return confirm('$cfg[0]: $dellbl $chglbl $lstlbl?')\" title=\"$dellbl $chglbl!\"></a>\n";
 ?>
 </form>
 
--- nedi-std/html/Devices-Doctor.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Devices-Doctor.php	2012-04-02 13:52:23.000000000 -0700
@@ -137,19 +137,23 @@
 	}
 	echo "<h3>Interfaces</h3>";
 	echo "<table class=\"content\"><tr class=\"$modgroup[$self]2\"><td>$namlbl</td><td>IP $adrlbl</td><td>Alias</td><td>$typlbl</td><td>IP Helper</td><td>VRF</td></tr>";
-	foreach($if as $i){
-		$row++;
-		if ($row % 2){$bg = "txta"; $bi = "imga";}else{$bg = "txtb"; $bi = "imgb";}
-		echo "<tr class=\"$bg\" onmouseover=\"this.className='$bi'\" onmouseout=\"this.className='$bg'\">";
-		echo "<td>$i</td><td class=\"blu\">$ipadd[$i]</td><td class=\"gry\">$ifdsc[$i]</td>";
-		echo "<td class=\"grn\">$ifmod[$i]</td><td class=\"gry\">$ifhlp[$i]</td><td>$ifvpn[$i]</td></tr>";
+	if (isset($if)) {
+		foreach($if as $i){
+			$row++;
+			if ($row % 2){$bg = "txta"; $bi = "imga";}else{$bg = "txtb"; $bi = "imgb";}
+			echo "<tr class=\"$bg\" onmouseover=\"this.className='$bi'\" onmouseout=\"this.className='$bg'\">";
+			echo "<td>$i</td><td class=\"blu\">$ipadd[$i]</td><td class=\"gry\">$ifdsc[$i]</td>";
+			echo "<td class=\"grn\">$ifmod[$i]</td><td class=\"gry\">$ifhlp[$i]</td><td>$ifvpn[$i]</td></tr>";
+		}
 	}
 	echo "</table>";
 
 	echo "<h3>Spanning-Tree</h3>";
 	echo "<div class=\"textpad code txta\">\n";
-	foreach($stp as $i){
-		echo "$i\n";
+	if (isset($stp)) {
+		foreach($stp as $i){
+			echo "$i\n";
+		}
 	}
 	echo "</div>\n";
 
--- nedi-std/html/Devices-Interfaces.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Devices-Interfaces.php	2012-03-30 23:19:01.000000000 -0700
@@ -153,7 +153,7 @@
 			$ui = urlencode($if[1]);
 
 			if($isadmin and $trk){
-					$trkst = AddRecord('nodetrack',"device=\"$if[0]\" AND ifname=\"$if[1]\"","device,ifname,value,source,user,time","\"$if[0]\",\"$if[1]\",\"-\",\"-\",\"$_SESSION[user]\",\"".time()."\"");
+				$trkst = AddRecord('nodetrack',"device='$if[0]' AND ifname='$if[1]'","device,ifname,value,source,".DbEscapeIdentifier('user').",".DbEscapeIdentifier('time'),"'$if[0]','$if[1]','-','-','$_SESSION[user]',".time());
 			}
 
 			echo "<tr class=\"$bg\" onmouseover=\"this.className='imga'\" onmouseout=\"this.className='$bg'\">";
--- nedi-std/html/Devices-List.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Devices-List.php	2012-04-06 19:38:56.000000000 -0700
@@ -160,9 +160,9 @@
 
 			if($isadmin and $mon){
 				if($dev[14]){
-					$most = AddRecord('monitoring',"name=\"$dev[0]\"","name,monip,test,device","\"$dev[0]\",\"$dev[1]\",\"uptime\",\"$dev[0]\"");
+					$most = AddRecord('monitoring',"name='$dev[0]'","name,monip,test,device","'$dev[0]',$dev[1],'uptime','$dev[0]'");
 				}else{
-					$most = AddRecord('monitoring',"name=\"$dev[0]\"","name,monip,test,device","\"$dev[0]\",\"$dev[1]\",\"ping\",\"$dev[0]\"");
+					$most = AddRecord('monitoring',"name='$dev[0]'","name,monip,test,device","'$dev[0]',$dev[1],'ping','$dev[0]'");
 				}
 			}
 
--- nedi-std/html/Devices-Status.php	2012-04-20 21:11:49.000000000 -0700
+++ nedi-gw/html/Devices-Status.php	2012-04-08 17:20:06.000000000 -0700
@@ -49,8 +49,9 @@
 	}
 	@DbFreeResult($res);
 }else{
-	print @DbError($link);
-	die ( mysql_error() );
+	# There's no sense in emitting the same message twice.
+	# print @DbError($link);
+	die ( DbError($link) );
 }
 ?>
 </select>
@@ -211,7 +212,7 @@
 if($isadmin){
 	if ($rtl){
 		$cliport = 0;
-		$query	= GenQuery('devices','u',"device=\"$shd\"",'','',array('cliport'),'',array('0') );
+		$query	= GenQuery('devices','u',"device='$shd'",'','',array('cliport'),'',array('0') );
 		if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>CLI $reslbl OK</h5>";}
 	}elseif ($cif){
 		$s = substr($cif,0,1);
@@ -219,7 +220,7 @@
 		$i = substr($cif,1);
 		if( Set($ip, $wver, $dev[26], "1.3.6.1.2.1.2.2.1.7.$i", 'i', ($s)?1:2 ) ){
 			echo "<h5>SNMP IF $chglbl OK</h5>";
-			$query	= GenQuery('interfaces','u',"device=\"$shd\" AND ifname=\"$ifn[$i]\"",'','',array('ifstat'),'',array($s) );
+			$query	= GenQuery('interfaces','u',"device='$shd' AND ifname='$ifn[$i]'",'','',array('ifstat'),'',array($s) );
 			if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>DB $ifn[$i] $act OK</h5>";$ifa[$i] = $s;}
 			$query = GenQuery('events','i','','','',array('level','time','source','info','class','device'),'',array('100',time(),$shd,"User $_SESSION[user] $act interface $ifn[$i]",'usrd',$shd) );
 			if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$msglbl $updlbl OK</h5>";}
@@ -230,7 +231,7 @@
 		if( Set($ip, $wver, $dev[26], "1.3.6.1.2.1.1.6.0", 's', $loc ) ){
 			echo "<h5>SNMP $loclbl $chglbl OK</h5>";
 			$dev[10] = $loc;
-			$query	= GenQuery('devices','u',"device=\"$shd\"",'','',array('location'),'',array($loc) );
+			$query	= GenQuery('devices','u',"device='$shd'",'','',array('location'),'',array($loc) );
 			if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>DB $loclbl $chglbl OK</h5>";}
 			$query = GenQuery('events','i','','','',array('level','time','source','info','class','device'),'',array('100',time(),$shd,"User $_SESSION[user] changed location to $loc",'usrd',$shd) );
 			if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$msglbl $updlbl OK</h5>";}
@@ -241,7 +242,7 @@
 		if( Set($ip, $wver, $dev[26], "1.3.6.1.2.1.1.4.0", 's', $con ) ){
 			$dev[11] = $con;
 			echo "<h5>SNMP $conlbl $chglbl OK</h5>";
-			$query	= GenQuery('devices','u',"device=\"$shd\"",'','',array('contact'),'',array($con) );
+			$query	= GenQuery('devices','u',"device='$shd'",'','',array('contact'),'',array($con) );
 			if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>DB $conlbl $chglbl OK</h5>";}
 			$query = GenQuery('events','i','','','',array('level','time','source','info','class','device'),'',array('100',time(),$shd,"User $_SESSION[user] changed contact to $con",'usrd',$shd) );
 			if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$msglbl $updlbl OK</h5>";}
@@ -281,9 +282,9 @@
 	if(!is_array($most) ){
 		if ($mon == 1){
 			if($dev[14]){
-				echo AddRecord('monitoring',"name=\"$dev[0]\"","name,monip,test,device","\"$dev[0]\",\"$dev[1]\",\"uptime\",\"$dev[0]\"");
+				echo AddRecord('monitoring',"name='$dev[0]'","name,monip,test,device","'$dev[0]',$dev[1],'uptime','$dev[0]'");
 			}else{
-				echo AddRecord('monitoring',"name=\"$dev[0]\"","name,monip,test,device","\"$dev[0]\",\"$dev[1]\",\"ping\",\"$dev[0]\"");
+				echo AddRecord('monitoring',"name='$dev[0]'","name,monip,test,device","'$dev[0]',$dev[1],'ping','$dev[0]'");
 			}
 		}else{
 			echo "<a href=\"?dev=$ud&mon=1\"><img src=\"img/16/bino.png\" title=\"Monitor $addlbl\"></a>";
@@ -491,7 +492,7 @@
 		echo sprintf("%d D %d:%02d:%02d",$upd,$uph,$upm,$ups);
 	}else{
 		echo "$toumsg";
-		if($_SESSION['vol']){echo "<embed src=\"inc/enter2.mp3\" volume=\"$_SESSION[vol]\" hidden=\"true\">\n";}
+		if($_SESSION['vol']){echo "<embed src=\"inc/enter2.mp3\" volume=\"$_SESSION[vol]\" hidden=\"true\" pluginspage='missing_plugin.php?type=MP3'>\n";}
 	}
 	echo "</th></tr>\n";
 }
--- nedi-std/html/Devices-Stock.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Devices-Stock.php	2012-04-12 18:37:02.000000000 -0700
@@ -110,9 +110,9 @@
 	$query	= GenQuery('stock','i','','','',array('serial','type','user','time','location','state','comment','lastwty','source'),'',array($ser,$typ,$_SESSION['user'],time(),$loc,$sta,$com,$wint,$src) );
 	if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$serlbl $ser $updlbl OK</h5>";}
 }elseif ($upd and $ser and $typ and $loc){
-	$query	= GenQuery('stock','u',"serial=\"$ser\"",'','',array('type','user','time','location','state','comment','lastwty','source'),array(''),array($typ,$_SESSION['user'],time(),$loc,$sta,$com,$wint,$src ) );
+	$query	= GenQuery('stock','u',"serial='$ser'",'','',array('type','user','time','location','state','comment','lastwty','source'),array(''),array($typ,$_SESSION['user'],time(),$loc,$sta,$com,$wint,$src ) );
 	if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$serlbl $ser $updlbl OK</h5>";}
-	$query = GenQuery('events','i','','','',array('level','time','source','info','type'),'',array('100',time(),$ser,"User $_SESSION[user] changed stock item: source=$src, loc=$loc, $com",'usrs') );
+	$query = GenQuery('events','i','','','',array('level','time','source','info','class'),'',array('100',time(),$ser,"User $_SESSION[user] changed stock item: source=$src, loc=$loc, $com",'usrs') );
 	if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$msglbl $updlbl OK</h5>";}
 
 }elseif($del ){
--- nedi-std/html/Monitoring-Events.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Monitoring-Events.php	2012-04-09 16:51:20.000000000 -0700
@@ -41,12 +41,19 @@
 }elseif( isset($_GET['n']) ){
 	$nof = $off + $lim;
 }
-$dlim = ($lim)?"$nof,$lim":0;
+$dlim = ($lim)?"$lim OFFSET $nof":0;
 
 $link	= @DbConnect($dbhost,$dbuser,$dbpass,$dbname);
 if( isset($_GET['del']) ){
 	if($isadmin){
-		$query	= GenQuery('events','d','*','id desc',$lim,$in,$op,$st,$co );
+		# This has been changed so the events being deleted are those that are currently displayed
+		# (i.e., respecting the "OFFSET $nof" clause if $nof is non-zero), instead of just the first ones
+		# satisfying the WHERE clause.  This design is much more intuitive to the user.  It takes special
+		# support in GenQuery(), which now requires that we specify a unique identifier in each row to be
+		# deleted (the "id" column, in the case here) if we want to apply a LIMIT clause to a DELETE.
+		# We have also changed this query to join to the devices table, so the $_SESSION['view'] gets
+		# applied the same way as it gets applied in the call to Events() that selects rows to display.
+		$query	= GenQuery('events','d','id','id desc',$dlim,$in,$op,$st,$co,'LEFT JOIN devices USING (device)');
 		if(@DbQuery($query,$link) ){
 			echo "<h5> $msglbl $dellbl OK </h5>";
 		}else{
--- nedi-std/html/Monitoring-Health.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Monitoring-Health.php	2012-04-08 17:20:01.000000000 -0700
@@ -82,17 +82,22 @@
 <img src="img/32/dev.png" title="Checking <?=$nmon?> <?=$totlbl?>">
 <?
 }
+# We specify the pluginspage attribute not because we supply the plugin on that page, but because having that attribute
+# present causes Firefox to display the MIME type of the plugin (audio/x-mpeg, in this case) if you ask it to install a
+# missing plugin.  Otherwise, you really have no clue as to what plugin is being requested.  We provide a minimal page
+# behind that filename to just provide an explanatory message.  The specified plugin type, displayed on our simple page,
+# provides a more-specific description of exactly what type of object the plugin is intended to handle.
 if($mal == 0){
 	if($monok){
 		if(!$_SESSION['gsiz']){echo "<img src=\"img/32/bchk.png\" title=\"$nmon $tgtlbl Monitored, $ndis[1] Device $laslbl $dsclbl\">";}
 	}else{
 		if(!$_SESSION['gsiz']){echo "<img src=\"img/32/bcls.png\" title=\"$nonlbl Monitored, $ndis[1] Device $laslbl $dsclbl\">";}
-		if($_SESSION['vol']){echo "<embed src=\"inc/enter2.mp3\" volume=\"$_SESSION[vol]\" hidden=\"true\">\n";}
+		if($_SESSION['vol']){echo "<embed src=\"inc/enter2.mp3\" volume=\"$_SESSION[vol]\" hidden=\"true\" pluginspage='missing_plugin.php?type=MP3'>\n";}
 	}
 }else{
 	if($mal == 1){
 		if(!$_SESSION['gsiz']){echo "<img src=\"img/32/fobl.png\" title=\"1 $mlvl[200]\">";}
-		if($_SESSION['vol']){echo "<embed src=\"inc/alarm1.mp3\" volume=\"$_SESSION[vol]\" hidden=\"true\">\n";}
+		if($_SESSION['vol']){echo "<embed src=\"inc/alarm1.mp3\" volume=\"$_SESSION[vol]\" hidden=\"true\" pluginspage='missing_plugin.php?type=MP3'>\n";}
 	}elseif($mal < 10){
 		if($ni[0] < 3){
 			$ico = "fovi";
@@ -102,10 +107,10 @@
 			$ico = "foor";
 		}
 		if(!$_SESSION['gsiz']){echo "<img src=\"img/32/$ico.png\" title=\"$mal $mlvl[200]\">";}
-		if($_SESSION['vol']){echo "<embed src=\"inc/alarm2.mp3\" volume=\"$_SESSION[vol]\" hidden=\"true\">\n";}
+		if($_SESSION['vol']){echo "<embed src=\"inc/alarm2.mp3\" volume=\"$_SESSION[vol]\" hidden=\"true\" pluginspage='missing_plugin.php?type=MP3'>\n";}
 	}else{
 		if(!$_SESSION['gsiz']){echo "<img src=\"img/32/ford.png\" title=\"$mal $mlvl[200]!\">";}
-		if($_SESSION['vol']){echo "<embed src=\"inc/alarm3.mp3\" volume=\"$_SESSION[vol]\" hidden=\"true\">\n";}
+		if($_SESSION['vol']){echo "<embed src=\"inc/alarm3.mp3\" volume=\"$_SESSION[vol]\" hidden=\"true\" pluginspage='missing_plugin.php?type=MP3'>\n";}
 	}
 
 ?>
--- nedi-std/html/Monitoring-Incidents.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Monitoring-Incidents.php	2012-03-30 21:47:56.000000000 -0700
@@ -25,18 +25,18 @@
 }elseif( isset($_GET['n']) ){
 	$nof = $off + $lim;
 }
-$dlim = ($lim)?"$nof,$lim":0;
+$dlim = ($lim)?"$lim OFFSET $nof":0;
 
 $link	= @DbConnect($dbhost,$dbuser,$dbpass,$dbname);
 if($dli){
 	$query	= GenQuery('incidents','d','','','',array('id'),array('='),array($dli) );
 	if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>Incident $dli $dellbl OK</h5>";}
 }elseif($ugr){
-	$query	= GenQuery('incidents','u',"id=\"$ugr\"",'','',array('user','time','grp'),'',array($_GET['usr'],$_GET['tme'],$grp) );
+	$query	= GenQuery('incidents','u',"id=$ugr",'','',array('user','time','grp'),'',array($_GET['usr'],$_GET['tme'],$grp) );
 	if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5> Incident $ugr $updlbl OK</h5>";}
 	$grp = "";
 }elseif($ucm){
-	$query	= GenQuery('incidents','u',"id=\"$ucm\"",'','',array('user','comment'),'',array($_GET['usr'],$cmt) );
+	$query	= GenQuery('incidents','u',"id=$ucm",'','',array('user','comment'),'',array($_GET['usr'],$cmt) );
 	if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5> Incident $ucm $updlbl OK</h5>";}
 }
 ?>
@@ -86,7 +86,7 @@
 
 <?
 if(strpos($grp,'0') ){
-	$query	= GenQuery('incidents','s','*','id desc',$dlim,array('grp'),array('regexp'),array("^".substr($grp,0,1)."."));
+	$query	= GenQuery('incidents','s','*','id desc',$dlim,array('grp'),array('string regexp'),array("^".substr($grp,0,1)."."));
 }elseif($grp){
 	$query	= GenQuery('incidents','s','*','id desc',$dlim,array('grp'),array('='),array($grp));
 }elseif($id){
--- nedi-std/html/Monitoring-Setup.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Monitoring-Setup.php	2012-04-01 18:06:56.000000000 -0700
@@ -96,6 +96,7 @@
 <option value="telnet">telnet
 <option value="ssh">ssh
 <option value="mysql">mysql
+<option value="postgresql">postgresql
 <option value="cifs">cifs
 </select>
 
@@ -211,7 +212,7 @@
 			if($upd){
 				if($adp){
 					if(count(array_keys($neb) ) == 1){
-						$dquery	= GenQuery('monitoring','u',"name=\"$mon[0]\"",'','',array('depend'),'',array( key($neb) ) );
+						$dquery	= GenQuery('monitoring','u',"name='$mon[0]'",'','',array('depend'),'',array( key($neb) ) );
 						if( !@DbQuery($dquery,$link) ){
 							$depst = "<img src=\"img/16/bcnl.png\" title=\"" .DbError($link)."\">";
 						}else{
@@ -225,7 +226,7 @@
 				}
 
 				if($rav){
-					$uquery	= GenQuery('monitoring','u',"name=\"$mon[0]\"",'','',array('lastok','status','lost','ok','latency','latmax','latavg'),'',array(0,0,0,0,0,0,0) );
+					$uquery	= GenQuery('monitoring','u',"name='$mon[0]'",'','',array('lastok','status','lost','ok','latency','latmax','latavg'),'',array(0,0,0,0,0,0,0) );
 					if( !@DbQuery($uquery,$link) ){
 						$ravst = "<img src=\"img/16/bcnl.png\" title=\"" .DbError($link)."\">";
 					}else{
@@ -242,7 +243,7 @@
 
 				if($tst){
 					$c = ($tst == "-")?"":$tst;
-					$equery	= GenQuery('monitoring','u',"name=\"$mon[0]\"",'','',array('test'),'',array($c) );
+					$equery	= GenQuery('monitoring','u',"name='$mon[0]'",'','',array('test'),'',array($c) );
 					if( !@DbQuery($equery,$link) ){
 						$testst = "<img src=\"img/16/bcnl.png\" title=\"" .DbError($link)."\">";
 					}else{
@@ -260,7 +261,7 @@
 						$c = "eventdel";
 						$mon[14] = $i;
 					}
-					$equery	= GenQuery('monitoring','u',"name=\"$mon[0]\"",'','',array($c),'',array($i) );
+					$equery	= GenQuery('monitoring','u',"name='$mon[0]'",'','',array($c),'',array($i) );
 					if( !@DbQuery($equery,$link) ){
 						$infst = "<img src=\"img/16/bcnl.png\" title=\"" .DbError($link)."\">";
 					}else{
@@ -268,7 +269,7 @@
 					}
 				}
 				if($al){
-					$fquery	= GenQuery('monitoring','u',"name=\"$mon[0]\"",'','',array('alert'),'',array($al-1) );				# Adding 1 in the form, so it's true with $al=0
+					$fquery	= GenQuery('monitoring','u',"name='$mon[0]'",'','',array('alert'),'',array($al-1) );				# Adding 1 in the form, so it's true with $al=0
 					if( !@DbQuery($fquery,$link) ){
 						$alst = "<img src=\"img/16/bcnl.png\" title=\"" .DbError($link)."\">";
 					}else{
@@ -278,7 +279,7 @@
 				}
 			}elseif($des and $des ==  $mon[0] and ($dps or $dpt) ){
 				$dpt = ($dps)?$dps:$dpt;
-				$dquery	= GenQuery('monitoring','u',"name=\"$des\"",'','',array('depend'),'',array($dpt) );
+				$dquery	= GenQuery('monitoring','u',"name='$des'",'','',array('depend'),'',array($dpt) );
 				if( !@DbQuery($dquery,$link) ){
 					$depst = "<img src=\"img/16/bcnl.png\" title=\"" .DbError($link)."\">";
 				}else{
--- nedi-std/html/Nodes-Create.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Nodes-Create.php	2012-03-26 18:00:17.000000000 -0700
@@ -57,8 +57,9 @@
 	}
 	@DbFreeResult($res);
 }else{
-	print @DbError($link);
-	die ( mysql_error() );
+	# There's no sense in emitting the same message twice.
+	# print @DbError($link);
+	die ( DbError($link) );
 }
 ?>
 </select>
@@ -86,8 +87,9 @@
 		}
 		@DbFreeResult($res);
 	}else{
-		print @DbError($link);
-		die ( mysql_error() );
+		# There's no sense in emitting the same message twice.
+		# print @DbError($link);
+		die ( DbError($link) );
 	}
 }
 ?>
--- nedi-std/html/Nodes-List.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Nodes-List.php	2012-03-30 22:24:03.000000000 -0700
@@ -205,7 +205,7 @@
 
 			if($isadmin and $mon and $n[1]){
 				$mona = ($n[0])?$n[0]:$ip;
-				$most = AddRecord('monitoring',"name=\"$mona\"","name,monip,class,test,device,depend","\"$mona\",\"$n[1]\",\"node\",\"ping\",\"$n[6]\",\"$n[6]\"");
+				$most = AddRecord('monitoring',"name='$mona'","name,monip,class,test,device,depend","'$mona',$n[1],'node','ping','$n[6]','$n[6]'");
 			}
 
 			echo "<tr class=\"$bg\" onmouseover=\"this.className='imga'\" onmouseout=\"this.className='$bg'\"><th class=\"$bi\">\n";
--- nedi-std/html/Nodes-Status.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Nodes-Status.php	2012-04-11 22:41:53.000000000 -0700
@@ -39,9 +39,9 @@
 if ($trk){
 	$mac = $trk;
 	if($isadmin){
-		$query	= GenQuery('nodes','u',"mac=\"$mac\"",'','',array('ipchanges'),'',array('0') );
+		$query	= GenQuery('nodes','u',"mac='$mac'",'','',array('ipchanges'),'',array('0') );
 		if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$mac ipchanges $updlbl OK</h5>";}
-		$query	= GenQuery('nodes','u',"mac=\"$mac\"",'','',array('ifchanges'),'',array('0') );
+		$query	= GenQuery('nodes','u',"mac='$mac'",'','',array('ifchanges'),'',array('0') );
 		if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$mac ifchanges $updlbl OK</h5>";}
 		$query	= GenQuery('iptrack','d','','','',array('mac'),array('='),array($mac) );
 		if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$mac iptrack $dellbl OK</h5>";}
@@ -126,7 +126,7 @@
 <?
 if(preg_match("/dsk/",$_SESSION['group']) ){
 	echo "<a href=Nodes-Stolen.php?na=$n[0]&ip=$ip&stl=$n[2]&dev=$ud&ifn=$ui><img src=\"img/16/hat.png\" title=\"Mark as stolen!\"></a>";
-	echo "<a href=$_SERVER[PHP_SELF]?wol=$n[2]><img src=\"img/16/exit.png\" title=\"WOL $srvlbl\"></a>";
+	echo "<a href=\"?wol=$n[2]\"><img src=\"img/16/exit.png\" title=\"WOL $srvlbl\"></a>";
 }
 $src = $mac.(($n[0] == "" or $n[0] == "-")?"":"|$n[0]").(($ip)?"|^$ip$":"");
 ?>
@@ -140,7 +140,7 @@
 		if(!isset($most) ){
 			if ($mon == 1){
 				$mona  = ($n[0])?$n[0]:$ip;
-				echo AddRecord('monitoring',"name=\"$mona\"","name,monip,class,test,device,depend","\"$mona\",\"$n[1]\",\"node\",\"ping\",\"$n[6]\",\"$n[6]\"");
+				echo AddRecord('monitoring',"name='$mona'","name,monip,class,test,device,depend","'$mona',$n[1],'node','ping','$n[6]','$n[6]'");
 			}else{
 				echo "<a href=\"?mac=$mac&mon=1\"><img src=\"img/16/bino.png\" title=\"Monitor $addlbl?\"></a>";
 			}
@@ -333,7 +333,7 @@
 		}
 		Wake("255.255.255.255",$wol, 9);
 		#Wake($ip,$wol, 9); Shouldn't be necessary with this (use directed bcast, rather than relying IP's still in router's ARP):
-		$bres = @DbQuery("SELECT inet_ntoa(ifip|(4294967295 - mask)) as bcast FROM networks WHERE $n[1] & mask = ifip & mask and mask",$link);
+		$bres = @DbQuery("SELECT inet_ntoa(ifip|(4294967295 - mask)) as bcast FROM networks WHERE $n[1] & mask = ifip & mask and mask > 0",$link);
 		$bcst = @DbFetchRow($bres);
 		Wake($bcst[0],$wol, 9);
 	}else{
--- nedi-std/html/Nodes-Stolen.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Nodes-Stolen.php	2012-03-22 17:54:18.000000000 -0700
@@ -9,7 +9,7 @@
 
 $_GET = sanitize($_GET);
 $na = isset($_GET['na']) ? $_GET['na'] : "-";
-$ip = isset($_GET['ip']) ? $_GET['ip'] : "";
+$ip = isset($_GET['stlip']) ? $_GET['stlip'] : "";
 $stl = isset($_GET['stl']) ? strtolower(preg_replace("/[^0-9a-f]/i", "",$_GET['stl'])) : "";
 $dev = isset($_GET['dev']) ? $_GET['dev'] : "";
 $ifn = isset($_GET['ifn']) ? $_GET['ifn'] : "";
@@ -19,7 +19,13 @@
 $link	= @DbConnect($dbhost,$dbuser,$dbpass,$dbname);
 
 if ($stl){
-	$query	= GenQuery('stolen','i','','','',array('name','stlip','mac','device','ifname','user','time'),'',array($na,ip2long($ip),$stl,$dev,$ifn,$_SESSION['user'],time()) );
+	$longip = ip2long($ip);
+	if ($longip == '') {
+		# We need to either recode the invalid IP address to something valid,
+		# even if it's useless, or throw an error.  For now, we choose the former.
+		$longip = 0;
+	}
+	$query	= GenQuery('stolen','i','','','',array('name','stlip','mac','device','ifname','user','time'),'',array($na,$longip,$stl,$dev,$ifn,$_SESSION['user'],time()) );
 	if( !@DbQuery($query,$link) ){echo "<h4 align=center>".DbError($link)."</h4>";}else{echo "<h5>$stl $updlbl OK</h5>";}
 }elseif ($del){
 	$query	= GenQuery('stolen','d','','','',array('mac'),array('='),array($del) );
--- nedi-std/html/Nodes-Toolbox.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Nodes-Toolbox.php	2012-04-12 21:38:18.000000000 -0700
@@ -54,10 +54,10 @@
 	system("whois $dest");
 }elseif($do == "Scan"){
 	echo "<h2>Nmap Scan of $dest</h2><div class=\"textpad code txtb\">";
-	system("nmap -sSU -F $dest");
+	system("$nmapcmd -sSU -F $dest");
 }elseif($do == "Ping Range"){
 	echo "<h2>Nmap Ping Range of $dest</h2><div class=\"textpad code txtb\">";
-	system("nmap -sP $dest");
+	system("$nmapcmd -sP $dest");
 }elseif($do == "Traceroute"){
 	echo "<h2>Traceroute to $dest</h2><div class=\"textpad code txtb\">";
 	if(preg_match("/OpenBSD|Linux/",PHP_OS) ){
--- nedi-std/html/Nodes-Track.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Nodes-Track.php	2012-04-10 22:24:07.000000000 -0700
@@ -2,7 +2,8 @@
 # Program: Nodes-Track.php
 # Programmer: Remo Rickli
 
-# load data local infile '/home/rickli/Downloads/switchprot_delta_report2010-08-18 21-10-33.csv' into table nodetrack fields terminated by ',' enclosed by '"' lines terminated by '\n' IGNORE 1 LINES (device,Ifname,Realname,alias,Name,@dip,preferred,manual,switchport,finalname) SET IP = INET_ATON(@dip)
+# FIX LATER:  the field names listed here do not reflect the structure of the nodetrack table
+# load data local infile '/home/rickli/Downloads/switchprot_delta_report2010-08-18 21-10-33.csv' into table nodetrack fields terminated by ',' enclosed by '"' lines terminated by '\n' IGNORE 1 LINES (device,ifname,Realname,alias,Name,@dip,preferred,manual,switchport,finalname) SET IP = INET_ATON(@dip)
 
 error_reporting(E_ALL ^ E_NOTICE);
 
@@ -148,7 +149,7 @@
 ?>
 </tr>
 <?
-	$query	= GenQuery('nodetrack','s','nodetrack.device as device,nodetrack.ifname as ifname,value,source,alias,comment,name,nodes.mac as mac,oui,nodes.vlanid as vlanid,user,time',$ord,'',array($ina,$inb),array($opa,$opb),array($sta,$stb),array($cop), 'JOIN interfaces USING (device,ifname) LEFT JOIN nodes USING (device,ifname)');
+	$query	= GenQuery('nodetrack','s','nodetrack.device as device,nodetrack.ifname as ifname,value,source,alias,comment,name,nodes.mac as mac,oui,nodes.vlanid as vlanid,'.DbEscapeIdentifier('user').','.DbEscapeIdentifier('time'),$ord,'',array($ina,$inb),array($opa,$opb),array($sta,$stb),array($cop), 'JOIN interfaces USING (device,ifname) LEFT JOIN nodes USING (device,ifname)');
 	$res	= @DbQuery($query,$link);
 	if($res){
 		$usta = urlencode($sta);
@@ -167,11 +168,11 @@
 						$setd = '';
 					}elseif($src == 'comment'){
 						$trk[$src] = preg_replace('/.+DP:(.+),.+/','$1',$trk[$src]);
-						$setd = "value=\"$trk[$src]\",";
+						$setd = "value='$trk[$src]',";
 					}else{
-						$setd = "value=\"$trk[$src]\",";
+						$setd = "value='$trk[$src]',";
 					}
-					if( !@DbQuery("UPDATE nodetrack SET ${setd}source=\"$src\",user=\"$_SESSION[user]\",time=\"$time\" WHERE device = \"$dev\" AND Ifname = \"$ifn\";",$link) ){
+					if( !@DbQuery("UPDATE nodetrack SET ${setd}source='$src',".DbEscapeIdentifier('user')."='$_SESSION[user]',".DbEscapeIdentifier('time')."=$time WHERE device = '$dev' AND ifname = '$ifn';",$link) ){
 						$cfgst = "<img src=\"img/16/bcnl.png\" title=\"" .DbError($link)."\">";
 					}else{
 						$cfgst = "<img src=\"img/16/bchk.png\" title=\"$srclbl = $src OK\">";
@@ -181,7 +182,7 @@
 						}
 					}
 				}elseif($val){
-					if( !@DbQuery("UPDATE nodetrack SET value=\"$val\",user=\"$_SESSION[user]\",time=\"$time\" WHERE device = \"$dev\" AND Ifname = \"$ifn\";",$link) ){
+					if( !@DbQuery("UPDATE nodetrack SET value='$val',".DbEscapeIdentifier('user')."='$_SESSION[user]',".DbEscapeIdentifier('time')."=$time WHERE device = '$dev' AND ifname = '$ifn';",$link) ){
 						$cfgst = "<img src=\"img/16/bcnl.png\" title=\"" .DbError($link)."\">";
 					}else{
 						$cfgst = "<img src=\"img/16/bchk.png\" title=\"$vallbl = $val OK\">";
--- nedi-std/html/Other-Defgen.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Other-Defgen.php	2012-03-20 22:45:47.000000000 -0700
@@ -402,16 +402,18 @@
 		$df[] = "$defbase.$deftyp";
 	}
 }
-sort($df);
-foreach ($df as $f){
-	if($f == $so){
+if (isset($df)) {
+	sort($df);
+	foreach ($df as $f){
+		if($f == $so){
 ?>
 <img src="img/16/brld.png" title="<?=$reslbl?> Form" onClick="document.location.href='?ip='+document.bld.ip.value+'&co='+document.bld.co.value+'&so='+document.bld.so.value;">
 <?			
-	}else{
+		}else{
 ?>
 <a href="<?=$self?>.php?ip=<?=$ip?>&co=<?=$co?>&so=<?=$so?>&sc=<?=$f?>"><img src="img/16/geom.png" title="<?=$coplbl?> <?=$srclbl?> <?=$f?>" <?=$wrw?>"></a>
 <?
+		}
 	}
 }
 
--- nedi-std/html/Other-Nagios.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Other-Nagios.php	2012-04-10 17:25:46.000000000 -0700
@@ -6,13 +6,13 @@
 		if (!( $_POST['device'] == 0 && $_POST['location'] == 0 && $_POST['exttype'] == "a" || $_POST['exptype'] == "r" && $_POST['expression'] == "")):
 			switch ($_POST['exptype']):
 				case "d": 
-					$WHERE1 = "name = '".$_POST['device']."'";
+					$WHERE1 = "device = '".$_POST['device']."'";
 					break;
 				case "l": 
-					$WHERE1 = "location REGEXP BINARY '^".$_POST['location']."'";
+					$WHERE1 = DbRegexpClause(DbEscapeIdentifier('location'), 'regexp', DbQuotedEscapeString("^".$_POST['location']));
 					break;
 				case "r":
-					$WHERE1 = "name REGEXP BINARY '".$_POST['expression']."'";
+					$WHERE1 = DbRegexpClause(DbEscapeIdentifier('device'), 'regexp', DbQuotedEscapeString($_POST['expression']));
 					break;
 			endswitch;
 			switch ($_POST['limit']):
@@ -32,50 +32,56 @@
 					break;
 			endswitch;
 			($WHERE1 || $WHERE2) ? ($WHERE = " WHERE ".$WHERE1.($WHERE1 && $WHERE2 ? " AND " : NULL).$WHERE2) : $WHERE = "";
-			$query = "SELECT name, ip, description FROM devices".$WHERE;
+			$query = "SELECT device, devip, description FROM devices".$WHERE;
 			$result = DbQuery($query, $link);
-			echo mysql_error();
+			echo DbError($link);
 			while ($row = DbFetchArray($result)):
-				//deternime device type
+				//determine device type
 				switch (TRUE):
 					case preg_match('#[C|c]isco|WS-C|AIR-(AP|BR)|[C|c]at#', $row['description']):
 						if (preg_match('#C[0-9]{4}-K9W7#', $row['description'])):
-							$type['alias'] = $row['name']." (Cisco Access Point)";
+							$type['alias'] = $row['device']." (Cisco Access Point)";
 							$type['group'] = "switches";
 						elseif (preg_match('#Version [2-7]\.#', $row['description'])):
-							$type['alias'] = $row['name']." (Cisco, old firmware)";
+							$type['alias'] = $row['device']." (Cisco, old firmware)";
 							$type['group'] = "switches";
 						else:
-							$type['alias'] = $row['name']." (Cisco)";
+							$type['alias'] = $row['device']." (Cisco)";
 							$type['group'] = "switches_cisco";
 						endif;
 						break;
 					case preg_match('#[P|p]ro[C|c]urve#', $row['description']):
-						$type['alias'] = $row['name']." (HP ProCurve)";
+						$type['alias'] = $row['device']." (HP ProCurve)";
 						$type['group'] = "switches_hp";
 						break;
 					default:
-						$type['alias'] = $row['name']." (Switch)";
+						$type['alias'] = $row['device']." (Switch)";
 						$type['group'] = "switches";
 				endswitch;
 				$replace_array = array("&" => "+");
 				$config = "define host {\n";
 				$config .= "	use			generic-switch\n";
-				$config .= "	host_name		".strtr($row['name'], $replace_array)."\n";
+				$config .= "	host_name		".strtr($row['device'], $replace_array)."\n";
 				$config .= "	alias			".$type['alias']."\n";
-				$config .= "	address			".long2ip($row['ip'])."\n";
+				$config .= "	address			".long2ip($row['devip'])."\n";
 				$config .= "	hostgroups		".$type['group']."\n";
 				$config .= "	notifications_enabled	".($_POST['en'] ? "1" : "0")."\n";
 				$config .= "	}";
 				if ($_POST['tofile']):
-					$file = fopen("/usr/local/nagios/etc/switches/".$row['name'].".cfg", "w");
-					$bytes_written = fputs($file, $config);
-					fclose($file);
+					# FIX LATER:  This pathname should be generalized to support other Nagios install
+					# base directories, based on some configuration path drawn from nedi.conf.
+					$filename= "/usr/local/nagios/etc/switches/".$row['device'].".cfg";
+					if ($file = fopen($filename, "w")):
+						$bytes_written = fputs($file, $config);
+						fclose($file);
+					else:
+						$ERR = "Could not open $filename for writing!";
+					endif;
 				endif;
 				if ($_POST['toscreen']):
-					$configScreenOut .= " ##################################".str_repeat("#", strlen($row['name']))."##<br>";
-					$configScreenOut .= " # configuration script for device ".$row['name']." #<br>";
-					$configScreenOut .= " ##################################".str_repeat("#", strlen($row['name']))."##<br><br>";
+					$configScreenOut .= " ##################################".str_repeat("#", strlen($row['device']))."##<br>";
+					$configScreenOut .= " # configuration script for device ".$row['device']." #<br>";
+					$configScreenOut .= " ##################################".str_repeat("#", strlen($row['device']))."##<br><br>";
 					$configScreenOut .= str_replace("\n", "<br>", $config)."<br><br>";
 				endif;
 			endwhile;
@@ -103,9 +109,9 @@
 <input type="radio" checked name="exptype" value="d"> Device: <select name="device">
 	<option value="0" selected>Select a device:</option>
 <?php
-	$result = DbQuery("SELECT name FROM devices ORDER BY UPPER(name)", $link);
+	$result = DbQuery("SELECT device FROM devices ORDER BY UPPER(device)", $link);
 	while ($row = DbFetchArray($result)): ?>
-	<option<?= $row['name'] == $_POST['device'] ? " selected" : NULL ?>><?= $row['name'] ?></option>
+	<option<?= $row['device'] == $_POST['device'] ? " selected" : NULL ?>><?= $row['device'] ?></option>
 <?php
 	endwhile;
 ?>
@@ -115,27 +121,30 @@
 <input type="radio" name="exptype" value="l"<?= $_POST['exptype'] == "l" ? " checked" : NULL ?>> All devices of location: <select name="location">
 	<option value="0" selected>Select a location:</option>
 <?php
-	$result = DbQuery("SELECT DISTINCT SUBSTRING_INDEX(location, ';', 1) AS region FROM devices WHERE location REGEXP BINARY '[A-Z]{2,3};[A-Za-z]+;[A-Za-z0-9]+;.*' ORDER BY location", $link);
-	while ($row = DbFetchArray($result)):
-#		$locations[] = $row['region'];
+	# 'regexp' here generates a case-sensitive match operator.
+	$result = DbQuery("SELECT DISTINCT SUBSTRING_INDEX(location, ';', 1) AS region FROM devices WHERE ".DbRegexpClause(DbEscapeIdentifier('location'), 'regexp', DbQuotedEscapeString('[A-Z]{2,3};[A-Za-z]+;[A-Za-z0-9]+;.*'))." ORDER BY region", $link);
+	if ($result):
+		while ($row = DbFetchArray($result)):
+#			$locations[] = $row['region'];
 ?>
 	<option><?= $row['region'] == $_POST['location'] ? " selected" : NULL ?><?= $row['region'] ?></option>
 <?php
-		$region_result = DbQuery("SELECT DISTINCT SUBSTRING_INDEX(SUBSTRING_INDEX(location, ';', 2), ';', -1) AS city FROM devices WHERE SUBSTRING_INDEX(location, ';', 1) = '".$row['region']."' ORDER BY location", $link);
-		while ($region_row = DbFetchArray($region_result)):
-#			$locations[$row['region']][] = $region_row['city'];
+			$region_result = DbQuery("SELECT DISTINCT SUBSTRING_INDEX(SUBSTRING_INDEX(location, ';', 2), ';', -1) AS city FROM devices WHERE SUBSTRING_INDEX(location, ';', 1) = '".$row['region']."' ORDER BY city", $link);
+			while ($region_row = DbFetchArray($region_result)):
+#				$locations[$row['region']][] = $region_row['city'];
 ?>
 	<option value="<?= $row['region'] ?>;<?= $region_row['city'] ?>"<?= $row['region'].";".$region_row['city'] == $_POST['location'] ? " selected" : NULL ?>> - <?= $region_row['city'] ?> (<?= $row['region'] ?>)</option>
 <?php
-			$city_result = DbQuery("SELECT DISTINCT SUBSTRING_INDEX(SUBSTRING_INDEX(location, ';', 3), ';', -1) AS building FROM devices WHERE SUBSTRING_INDEX(location, ';', 2) = '".$row['region'].";".$region_row['city']."' ORDER BY location", $link);
-			while ($city_row = DbFetchArray($city_result)):
-#				$locations[$row['region']][$region_row['city']][] = $city_row['building'];
+				$city_result = DbQuery("SELECT DISTINCT SUBSTRING_INDEX(SUBSTRING_INDEX(location, ';', 3), ';', -1) AS building FROM devices WHERE SUBSTRING_INDEX(location, ';', 2) = '".$row['region'].";".$region_row['city']."' ORDER BY building", $link);
+				while ($city_row = DbFetchArray($city_result)):
+#					$locations[$row['region']][$region_row['city']][] = $city_row['building'];
 ?>
 	<option value="<?= $row['region'] ?>;<?= $region_row['city'] ?>;<?= $city_row['building'] ?>"<?= $row['region'].";".$region_row['city'].";".$city_row['building'] == $_POST['location'] ? " selected" : NULL ?>> -- <?= $city_row['building'] ?> (<?= $region_row['city'] ?>, <?= $row['region'] ?>)</option>
 <?php
+				endwhile;
 			endwhile;
 		endwhile;
-	endwhile;
+	endif;
 ?>
 </select><br>
 <br>
@@ -168,18 +177,20 @@
 	endif;
 
 	if ($_POST['regexp']):
-		$result = DbQuery("SELECT name, ip FROM devices WHERE name REGEXP BINARY '".$_POST['expression']."'", $link);
+		# 'regexp' here generates a case-sensitive match operator.
+		$result = DbQuery("SELECT device, devip FROM devices WHERE ".DbRegexpClause(DbEscapeIdentifier('device'), 'regexp', DbQuotedEscapeString($_POST['expression'])), $link);
 ?>
-<div class="textpad devConf">
+<div class="textpad warn">
 <?php
 		if (DbNumRows($result)): ?>
 <b>Hosts matching regular expression '<?= $_POST['expression'] ?>':</b><br>
 <?php
 			while ($row = DbFetchArray($result)): ?>
-<br><?= $row['name'] ?> (<?= long2ip($row['ip']) ?>)
+<br><?= $row['device'] ?> (<?= long2ip($row['devip']) ?>)
 <?php
 			endwhile;
-		else: ?>
+		else:
+?>
 Regular expression '<?= $_POST['expression'] ?>': No hosts found!
 <?php
 		endif;
@@ -195,7 +206,7 @@
 	endif;
 
 	if ($_POST['toscreen'] && $configScreenOut): ?>
-<div class="textpad devConf">
+<div class="textpad code txta">
 <pre>
 <?= $configScreenOut ?>
 </pre>
--- nedi-std/html/Reports-Modules.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/Reports-Modules.php	2012-04-11 14:45:36.000000000 -0700
@@ -31,6 +31,10 @@
 		"moddesc"=>"Module $deslbl"
 		);
 
+# NOTE:  This DB connection was moved here from down below to ensure
+# that it is always already available when it is needed, in particular
+# when we probe for the existence of the cisco_contracts table.
+$link	= @DbConnect($dbhost,$dbuser,$dbpass,$dbname);
 ?>
 <h1>Module Reports</h1>
 <?
@@ -46,7 +50,7 @@
 <option value=""><?=$fltlbl?>->
 <?
 foreach ($cols as $k => $v){
-       echo "<option value=\"$k\"".( ($ina == $k)?"selected":"").">$v\n";
+	echo "<option value=\"$k\"".( ($ina == $k)?"selected":"").">$v\n";
 }
 ?>
 </select>
@@ -66,8 +70,14 @@
 <option value="prt" <? if(in_array("prt",$rep)){echo "selected";} ?> >Print Supplies
 <option value="vms" <? if(in_array("vms",$rep)){echo "selected";} ?> >Virtual Machines
 <?
-$tquery = GenQuery("cisco_contracts", "t");					# Not printable yet :-(
-$res    = DbQuery($tquery, $link);
+# NOTE:  This query has been changed to look for table columns as a way of determining whether
+# the cisco_contracts table exists ("c"), rather than truncating the table ("t").  Truncating
+# the table seems ridiculous if you're trying to report below on its current content, without
+# any intervening code to repopulate the table.  The reason this wasn't fixed before is because
+# the truncation was failing because $link was not yet established, and that fact was made
+# invisible because the DbXxx() routines tend to suppress error messages.
+$cquery = GenQuery("cisco_contracts", "c");
+$res    = DbQuery($cquery, $link);
 if( DbFetchRow($res) ){								# Show item only, if cisco_contracts table exists
 ?>
 <OPTION VALUE="ves" <?=(in_array("ves",$rep))?"selected":""?> ><?=$wtylbl?> <?=$stalbl?>
@@ -88,7 +98,6 @@
 if($rep){
 	ConHead($ina, $opa, $sta, $cop, $inb, $opb, $stb);
 
-	$link	= @DbConnect($dbhost,$dbuser,$dbpass,$dbname);
 	if ( in_array("sum",$rep) ){
 		ModDist($ina,$opa,$sta,$lim,$ord);
 	}
@@ -121,11 +130,13 @@
 	if($ord){
 		$sort = "type";
 	}else{
-		$sort = "name";
+		$sort = "device";
 	}
-	$query	= GenQuery('devices','s','name,type,serial,devos,bootimage',$sort,'',array('type'),array('regexp'),array($flt) );
+	$query	= GenQuery('devices','s','device,type,serial,devos,bootimage',$sort,'',array('type'),array('regexp'),array($flt) );
 	$res	= @DbQuery($query,$link);
 
+	# FIX MINOR:  DbConnect() is not equipped to open a second connection; this just returns the
+	# original $link connection.  So whether or not it works as-is, this code looks confused.
 	$link_ccc = @DbConnect($dbhost,$dbuser,$dbpass,$dbname);
 
 	if($res){
@@ -137,24 +148,25 @@
 			echo "<tr class=\"imgb\" class=\"blu\"><th>\n";
 			echo "<a href=\"Devices-Status.php?dev=$ud\"><b>$d[0]</b></a></th>\n";
 
-	//$query_ccc = GenQuery('cisco_contracts','s','service_level,contract_number,end_date,DATEDIFF(STR_TO_DATE(end_date, '%d-%b-%Y'),CURDATE())','','',array('serial'),array('='),array($d[2]));
-	$query_ccc = "SELECT service_level,contract_number,end_date,DATEDIFF(STR_TO_DATE(end_date, '%d-%b-%Y'),CURDATE()) FROM cisco_contracts WHERE serial_number=\"$d[2]\"";
-	$res_ccc = @DbQuery($query_ccc,$link_ccc);
-	$ccc = @DbFetchRow($res_ccc);
-	if ($ccc[3] > 30) {
-		$color = "green";
-		$ccc_message = "$ccc[0]<br>Contract #$ccc[1] valid till $ccc[2]";
-	} elseif ($ccc[3] > 1) {
-		$color = "darkyellow";
-		$ccc_message = "$ccc[0]<br>Contract #$ccc[1] valid till $ccc[2]";
-	} else {
-		$color = "red";
-		$ccc_message = "$ccc[0]<br>Contract #$ccc[1] expired since $ccc[2] !";
-	}
-	if ($ccc[1] == "") {
-		$color = "blue";
-		$ccc_message = "Unknown";
-	}
+			# FIX LATER:  We should be able to go back to a GenQuery() formulation here.
+			//$query_ccc = GenQuery('cisco_contracts','s','service_level,contract_number,end_date,DATEDIFF(STR_TO_DATE(end_date, '%d-%b-%Y'),CURDATE())','','',array('serial'),array('='),array($d[2]));
+			$query_ccc = "SELECT service_level,contract_number,end_date,DATEDIFF(STR_TO_DATE(end_date, '%d-%b-%Y'),CURDATE()) FROM cisco_contracts WHERE serial_number='$d[2]'";
+			$res_ccc = @DbQuery($query_ccc,$link_ccc);
+			$ccc = @DbFetchRow($res_ccc);
+			if ($ccc[3] > 30) {
+				$color = "green";
+				$ccc_message = "$ccc[0]<br>Contract #$ccc[1] valid till $ccc[2]";
+			} elseif ($ccc[3] > 1) {
+				$color = "darkyellow";
+				$ccc_message = "$ccc[0]<br>Contract #$ccc[1] valid till $ccc[2]";
+			} else {
+				$color = "red";
+				$ccc_message = "$ccc[0]<br>Contract #$ccc[1] expired since $ccc[2] !";
+			}
+			if ($ccc[1] == "") {
+				$color = "blue";
+				$ccc_message = "Unknown";
+			}
 			echo "<td align=right>-</td><td><b>$d[1]</b></td><td>$d[2]</td><td><font color=$color>$ccc_message</font></td></tr>\n";
 
 			$mquery	= GenQuery('modules','s','*','slot','',array('device'),array('='),array($d[0]));
@@ -164,7 +176,11 @@
 					if ($row % 2){$bg = "txta";}else{$bg = "txtb";}
 					$row++;
 					echo "<tr class=\"$bg\"><th>\n";
-					$query_ccc = "SELECT service_level,contract_number,end_date,DATEDIFF(STR_TO_DATE(end_date, '%d-%b-%Y'),CURDATE()) FROM cisco_contracts WHERE serial_number=\"$m[2]\"";
+					# This used to say "WHERE serial_number='$m[2]'".  But $m[2] is modules.model, not the
+					# modules.serial column.  For modules.serial, you want "serial_number='$m[4]'" instead.
+					# So we have changed that.  This change has not been tested.  If you see this note and are
+					# in a position to test, please do so and report the results back to the NeDi maintainer.
+					$query_ccc = "SELECT service_level,contract_number,end_date,DATEDIFF(STR_TO_DATE(end_date, '%d-%b-%Y'),CURDATE()) FROM cisco_contracts WHERE serial_number='$m[4]'";
 					$res_ccc = @DbQuery($query_ccc,$link_ccc);
 					$ccc = @DbFetchRow($res_ccc);
 					if ($ccc[3] > 30) {
--- nedi-std/html/System-Export.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/System-Export.php	2012-04-13 15:30:48.000000000 -0700
@@ -288,7 +288,7 @@
 	// This is the beginning of the output table
 	echo "<h2>Log</h2><div class=\"textpad txta\">\n";
 
-	// The MySQL dump file is created by calling DbDump()
+	// The database dump file is created by calling DbDump()
 	$dump = DbDump($sqltbl, $dblink, "./log/nedi.sql");
 	echo "Created file ./log/nedi.sql from table".(count($sqltbl)>1?"s":"")."<br>\n";
 	foreach($sqltbl as $tbl) { echo "&nbsp;&nbsp;&nbsp;&nbsp;".$tbl."<br>\n"; }
@@ -338,6 +338,11 @@
 		}
 		$recs = @DbFetchRow(DbQuery(GenQuery($tab[0], 's','count(*)'), $dblink));
 		
+		# FIX MINOR:  The notion of using an SQL query straight from a URL is a security nightmare.
+		# This is subject to SQL injection vulnerabilities; see:  http://en.wikipedia.org/wiki/SQL_injection
+		# Also, with proper modsecurity protection in place (http://www.modsecurity.org/), you won't
+		# be able to pass unescaped single-quote characters in from the browser to enclose literal
+		# strings in an SQL query.  THIS APPROACH MUST BE COMPLETELY REWORKED TO DISALLOW DIRECT QUERIES.
 	?>
 </table>
 <table class="content" >
@@ -371,9 +376,17 @@
 include_once("inc/footer.php");
 
 //================================================================================
+// FIX LATER:  This code should be migrated to libdb-msq.php.
+// FIX LATER:  The whole notion of dumping individual tables only works at all
+// because the "nedi" database is not defined to have a variety of foreign key
+// constraints that would form cross-links between tables.  But without those
+// foreign key constraints, there is no documentation as to what cross-table
+// links are being maintained by the application, and no automatic cleanup
+// in other tables when a given row in a primary table is deleted.
+//
 // Name: DbDump()
 // 
-// Description: Creates a MySQL dump of a given set of database tables.
+// Description: Creates a database dump of a given set of database tables.
 //              The dump is written to a file, whose name has to be passed to the function
 //              when calling it
 //
@@ -387,6 +400,113 @@
 //     none
 //
 function DbDump($tables, $link, $outfile) {
+	global $dbtype;
+        if (!isset($dbtype) || $dbtype === 'mysql') {
+		return DbMySQLDump($tables, $link, $outfile);
+        } else {
+		return DbPostgreSQLDump($tables, $link, $outfile);
+        }
+}
+
+//================================================================================
+// FIX LATER:  This code should be migrated to libdb-msq.php.
+//
+// We don't use $dbpass because we don't think that it should ever be passed to
+// commands like this in the environment -- that's a security risk.  Instead, we
+// depend on having a ~/.pgpass file previously established, containing appropriate
+// database-access credentials, and with properly restricted file permissions.
+
+function DbPostgreSQLDump($tables, $link, $outfile) {
+	global $pg_dump_path;
+	global $dbhost, $dbuser, $dbname;
+
+	# Here we delete environment variables we don't want the child process to see.
+	# FIX LATER:  We should also do the equivalent of what in Perl would be:
+	#     local %ENV = %ENV; 
+	# so these values potentially get restored after executing this routine.
+	putenv('LD_LIBRARY_PATH');
+	putenv('PGCLIENTENCODING');
+	putenv('PGDATABASE');
+	putenv('PGDATESTYLE');
+	putenv('PGGEQO');
+	putenv('PGHOST');
+	putenv('PGHOSTADDR');
+	putenv('PGLOCALEDIR');
+	putenv('PGOPTIONS');
+	putenv('PGPASSFILE');
+	putenv('PGPASSWORD');
+	putenv('PGPORT');
+	putenv('PGSERVICE');
+	putenv('PGSERVICEFILE');
+	putenv('PGSYSCONFDIR');
+	putenv('PGTZ');
+	putenv('PGUSER');
+
+	# Add some settings we do want the child process to see.
+	putenv('PGCONNECT_TIMEOUT=20');
+	putenv('PGREQUIREPEER=postgres');
+	putenv('PATH=/bin:/sbin:/usr/bin:/usr/sbin');
+
+	# Note:  We would like to filter the pg_dump output file to make the following
+	# transforms, which would make the dump file more robust:
+	#   "DROP INDEX"                                  => "DROP INDEX IF EXISTS"
+	#   "ALTER TABLE .* DROP CONSTRAINT"              => "-- $1" (will be dropped when table is dropped)
+	#   "ALTER TABLE .* ALTER COLUMN .* DROP DEFAULT" => "-- $1" (will be dropped when table is dropped)
+	#   "DROP SEQUENCE"                               => "-- $1" (will be dropped when table is dropped)
+	#   "DROP TABLE"                                  => "DROP TABLE IF EXISTS"
+	# We don't make those changes because we have no good way to intervene if we
+	# use the --file option.  But if we don't use that option, we have no good way
+	# to capture any output messages, unless we perhaps use "(dump > file) 2>&1".
+	$cmd = array(
+		escapeshellarg($pg_dump_path),           '--host=' . escapeshellarg($dbhost),
+		'--username=' . escapeshellarg($dbuser), '--no-password',
+		'--file=' . escapeshellarg($outfile),    '--format=plain',
+		'--clean',                               '--encoding=LATIN1',
+		'--blobs',                               '--lock-wait-timeout=20',
+		'--serializable-deferrable'
+	);
+	foreach($tables as $tbl) {
+		$cmd[] = "--table=$tbl";
+	}
+	$cmd[] = $dbname;
+	$cmd[] = '2>&1';
+	$dump_command = implode(' ', $cmd);
+
+	$result = exec($dump_command, $output, $status);
+	if ($status != 0) {
+		print ("$dump_command<br>");
+		foreach ($output as $line) {
+			print "$line<br>";
+		}
+		die("ERROR:  Dump command failed (return status $status).");
+	}
+}
+
+//================================================================================
+// FIX LATER:  This code should be migrated to libdb-msq.php (as an internal
+// routine, to be accessed through DbDump(), which should also be moved
+// there) and then modified to call mysqldump instead of trying to do all
+// this detailed work manually.  There are a variety of issues that mysqldump
+// handles that the current code here does not, and it's just not worth
+// thinking about those issues and upgrading the code here.
+// Hint:  $dump_command = "$mysqldump_path -u$dbuser -r$outfile $dbname $table1 $table2 ...";
+//
+// Name: DbMySQLDump()
+// 
+// Description: Creates a MySQL dump of a given set of database tables.
+//              The dump is written to a file, whose name has to be passed to the function
+//              when calling it
+//
+// Parameters:
+//     $tables	- An array containing the names of the database tables that
+//            	  should be included in the dump
+//     $link	- A valid database connection identifier
+//     $outfile	- The name of the file that should be created
+//
+// Return value:
+//     none
+//
+function DbMySQLDump($tables, $link, $outfile) {
 	// The dump file is created and opened
 	$sqlfile = fopen($outfile, "w");
 
@@ -411,6 +531,11 @@
 
 		// This query gives us the complete SQL query to create the table structure
 		$res = DbQuery("SHOW CREATE TABLE `$tbl`;", $link);
+		if (!$res) {
+			# This is here mainly to protect against thinking that this code
+			# will apply to any databases other than just MySQL.
+			die("ERROR:  Cannot find the structure of the $tbl table.");
+		}
 
 		$field = array();
 		while($field = DbFetchArray($res)) {
@@ -452,14 +577,24 @@
 
 		// Now we want to have all the data from the table
 		$res = DbQuery(GenQuery($tbl, "s", "*"), $link);
+		# FIX LATER:  We should be calling DbEscapeIdentifier($tbl)
+		# instead of trying to quote the table name manually here.
 // 		$res = DbQuery("SELECT * FROM `".$tbl."`;", $link);
 
 		$field = array();
 		while($field = DbFetchRow($res)) {
 			// For each record a new INSERT command is created
+			# FIX LATER:  We should be calling DbEscapeIdentifier($tbl)
+			# instead of trying to quote the table name manually here.
 			$sql .= "INSERT INTO `".$tbl."` VALUES (";
 			// The fields of the record are inserted one after the other
 			for($i=0; $i<count($field); $i++) {
+				// FIX LATER:  The portable way to write SQL is to use
+				// single quotes for literal values, not double quotes.
+				// So this code ought to be doing so as well, and it
+				// should call DbEscapeString() instead of performing
+				// special-character (e.g., quote) escaping by hand.
+				//
 				// If the current field is a "varchar()" or "text" field
 				// then it is surrounded by "". The array $chfields[]
 				// tells us, if the current field is numeric (0) or not (1).
@@ -495,14 +630,14 @@
 //================================================================================
 // Name: DbCsv()
 // 
-// Description: Creates a CSV file of a given MySQL query result.
+// Description: Creates a CSV file of a given database query result.
 //              When calling the function you can choose if you want
 //              to have quotes around the elements of the CSV file.
 //              The separator between the elements has to be provided when
 //              calling DbCsv()
 //
 // Parameters:
-//     $res		- A valid MySQL result identifier
+//     $res		- A valid database result identifier
 //     $sep		- The separator to put between the elements
 //         		  This can also be longer than one character
 //     $quotes	- "on" to have quotes around the elements
@@ -524,7 +659,7 @@
 		for ($i = 0; $i < @DbNumFields($res); ++$i) {
 			if($quotes == "on") $csv .= "\"";
 			$csv .= @DbFieldName($res, $i);
-			echo "$csv ";
+			echo "$csv<br>";
 			if($quotes == "on") $csv .= "\"";
 			$csv .= $sep;
 		}
--- nedi-std/html/System-Files.php	2012-02-11 04:14:23.000000000 -0800
+++ nedi-gw/html/System-Files.php	2012-03-27 17:56:29.000000000 -0700
@@ -129,11 +129,11 @@
 <?
 $plen = strlen($nedipath);
 foreach (glob("$nedipath/conf/*") as $d){
-        if (is_dir($d)){
+	if (is_dir($d)){
 		$cfgd = substr($d,$plen+6);
 		echo "<option value=\"\" style=\"color: blue\">- $cfgd -\n";
 		foreach (glob("$d/*.cfg") as $f) {
- 			$l = substr($f,strlen($d)+1);
+			$l = substr($f,strlen($d)+1);
 			echo "<option value=\"$cfgd/$l\" ".( ($file == $f)?"selected":"").">$l\n";
 		}
 	}
@@ -322,13 +322,105 @@
 	if(array_key_exists('tgz',$_FILES)){
 		if(file_exists($_FILES['tgz']['tmp_name'])) {
 			echo "$realbl ".$_FILES['tgz']['name']."\n\n";
-			echo system("gzcat ".$_FILES['tgz']['tmp_name']." | mysql $dbname --user=$dbuser --password=$dbpass", $stat);
+			if (!isset($dbtype) || $dbtype === 'mysql') {
+				# We can't use gzcat because it might be known as zcat instead.
+				echo system('gunzip -c '.escapeshellarg($_FILES['tgz']['tmp_name']).' | '.
+				    escapeshellarg($mysql_path).' '.escapeshellarg($dbname).
+				    ' --user='.escapeshellarg($dbuser).' --password='.escapeshellarg($dbpass), $stat);
+			} else {
+				# Here we delete environment variables we don't want the child process to see. 
+				# FIX LATER:  We should also do the equivalent of what in Perl would be:
+				#     local %ENV = %ENV; 
+				# so these values potentially get restored after executing this routine.
+				putenv('LD_LIBRARY_PATH');
+				putenv('PGCLIENTENCODING');
+				putenv('PGDATABASE');
+				putenv('PGDATESTYLE');
+				putenv('PGGEQO');
+				putenv('PGHOST');
+				putenv('PGHOSTADDR');
+				putenv('PGLOCALEDIR');
+				putenv('PGOPTIONS');
+				putenv('PGPASSFILE');
+				putenv('PGPASSWORD');
+				putenv('PGPORT');
+				putenv('PGSERVICE');
+				putenv('PGSERVICEFILE');
+				putenv('PGSYSCONFDIR');
+				putenv('PGTZ');
+				putenv('PGUSER');
+
+				# Disable possible \! escapes in the psql input file.
+				putenv('SHELL=/bin/false');
+
+				# Add some settings we do want the child process to see. 
+				putenv('PGCONNECT_TIMEOUT=20');
+				putenv('PGREQUIREPEER=postgres');
+				putenv('PATH=/bin:/sbin:/usr/bin:/usr/sbin');
+
+				# NOTE:  We use "--variable=ON_ERROR_STOP=" to get psql to halt and report a problem in its
+				# exit code if an error occurs.  Otherwise, we have to depend on !empty($output) to find
+				# out if the import actually worked.  However, that also means that it might be impossible
+				# to recover after an error occurs where certain tables have been dropped and are no longer
+				# present.  The dump file starts with commands that try to drop secondary objects (indexes,
+				# sequences, etc.) associated with a table, before the table itself is dropped.  If the
+				# table is already gone, these initial DROP commands will necessarily fail, which could make
+				# it impossible to restore from the dump file if we previously stopped on the first error.
+				# We consider that situation less likely than other ordinary errors, so we continue to use
+				# ON_ERROR_STOP here.  (We ought to file a bug report and get pg_dump fixed so its "--clean"
+				# output uses IF EXISTS clauses and other logic, so it can be restored to an empty database
+				# without generating any errors.)  If there is a serious problem that cannot be overcome any
+				# other way, you can comment out that option and --single-transaction on a temporary basis,
+				# and ignore the error messages that appear during that one import run.
+
+				# Because gunzip operates on a temporary file, there's no point in
+				# reflecting that filename in the command we print if an error occurs.
+				# So we keep the gunzip part out of the $cmd array.
+				$cmd = array(
+					escapeshellarg($psql_path),
+					'--host=' . escapeshellarg($dbhost),
+					'--username=' . escapeshellarg($dbuser),
+					'--no-password',
+					'--dbname=' . escapeshellarg($dbname),
+					'--file=-',
+					'--quiet',
+					'--output=/dev/null',
+					'--single-transaction',
+					'--variable=ON_ERROR_STOP=',
+					'2>&1'
+				);
+				$import_command = implode(' ', $cmd);
+
+				$result = exec(
+					'gunzip -c ' . escapeshellarg($_FILES['tgz']['tmp_name']) . ' | ' .
+					$import_command, $output, $stat
+				);
+				if ($stat != 0 || !empty($output)) {
+					# If we disable ON_ERROR_STOP, this ($output is not empty)
+					# is how we find out we had a script error.
+					if ($stat == 0) {
+						$stat = 3;
+					}
+					print ("$import_command<br>");
+					foreach ($output as $line) {
+						print "$line<br>";
+					}
+					# Work around the stupid PHP wrong associativity of the ?: operator.
+					print("ERROR:  Import command failed (".
+					    ( ($stat == 1) ? 'fatal psql error' :
+					    ( ($stat == 2) ? 'connection to server went bad' :
+					    ( ($stat == 3) ? 'error occurred in script' :
+							     'Unknown error.'
+					    ) ) )
+					.").");
+				}
+			}
+
 			if($stat){
-				echo "<h4>$errlbl $wrtlbl ".$_FILES['tgz']['name']."</h4>\n";
+				echo "<h4>$errlbl $realbl ".$_FILES['tgz']['name']."</h4>\n";
 			}else{
-				echo "$wrtlbl ".$_FILES['tgz']['name']."\n\n";
+				echo "<h5>$implbl OK</h5>";
 			}
-			echo "<h5>$implbl OK</h5>";
 		}else{
 			echo "<h4>$errlbl $realbl ".$_FILES['tgz']['name']."</h4>";
 		}
--- nedi-std/html/System-Services.php	2012-02-11 04:14:22.000000000 -0800
+++ nedi-gw/html/System-Services.php	2012-03-28 20:11:57.000000000 -0700
@@ -72,9 +72,9 @@
 		echo "<h4>$stop not running!</h4>";
 	}
 }elseif($clear and $isadmin){
-	$query	= GenQuery('system','u',"name=\"threads\"",'','',array('value'),'',array('0') );
+	$query	= GenQuery('system','u',"name='threads'",'','',array('value'),'',array('0') );
 	if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$dellbl threads OK</h5>";}
-	$query	= GenQuery('system','u',"name=\"nodlock\"",'','',array('value'),'',array('0') );
+	$query	= GenQuery('system','u',"name='nodlock'",'','',array('value'),'',array('0') );
 	if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$reslbl nodlock OK</h5>";}
 
 	if( $pid = GetPID('nedi.pl') ){
--- nedi-std/html/Topology-Map.php	2012-02-11 04:14:22.000000000 -0800
+++ nedi-gw/html/Topology-Map.php	2012-04-08 17:19:11.000000000 -0700
@@ -283,7 +283,7 @@
 	Map();
 	WriteSVG($_SESSION['user'],count($dev) );
 ?>
-	<embed width="<?=$xm?>" height="<?=$ym?>" src="log/map_<?=$_SESSION[user]?>.svg" name="SVG Map" type="image/svg+xml" style="border:1px solid black">
+	<embed width="<?=$xm?>" height="<?=$ym?>" src="log/map_<?=$_SESSION[user]?>.svg" name="SVG Map" type="image/svg+xml" pluginspage='missing_plugin.php?type=SVG' style="border:1px solid black">
 <?
 }else{
 	if($fmt){
--- nedi-std/html/Topology-Multicast.php	2012-02-11 04:14:22.000000000 -0800
+++ nedi-gw/html/Topology-Multicast.php	2012-03-20 18:53:56.000000000 -0700
@@ -36,10 +36,12 @@
 <SELECT size="1" name="rtr">
 <OPTION VALUE=""><?=$sellbl?> ->
 <?
-foreach (array_keys($devtyp) as $r ){
-	echo "<OPTION VALUE=\"$r\" ";
-	if($rtr == $r){echo "selected";}
-	echo " >$r\n";
+if (isset($devtyp)) {
+	foreach (array_keys($devtyp) as $r ){
+		echo "<OPTION VALUE=\"$r\" ";
+		if($rtr == $r){echo "selected";}
+		echo " >$r\n";
+	}
 }
 echo "</select>";
 ?>
--- nedi-std/html/Topology-Routes.php	2012-02-11 04:14:22.000000000 -0800
+++ nedi-gw/html/Topology-Routes.php	2012-04-08 17:20:24.000000000 -0700
@@ -366,7 +366,7 @@
 			}
 			if(!$ix ){							#no OIDs for route info, timeout or route do not exist. 
 				echo "</table><h4>$toumsg</h4>";
-				if($_SESSION['vol']){echo "<embed src=\"inc/enter2.mp3\" volume=\"$_SESSION[vol]\" hidden=\"true>\"\n";}
+				if($_SESSION['vol']){echo "<embed src=\"inc/enter2.mp3\" volume=\"$_SESSION[vol]\" hidden=\"true\" pluginspage='missing_plugin.php?type=MP3'>\n";}
 				die;
 			}
 			#metric inetCidrRouteMetric1
--- nedi-std/html/Topology-Spanningtree.php	2012-02-11 04:14:22.000000000 -0800
+++ nedi-gw/html/Topology-Spanningtree.php	2012-04-08 17:20:38.000000000 -0700
@@ -28,7 +28,7 @@
 <option value=""><?=$sellbl?> ->
 <?
 $link	= @DbConnect($dbhost,$dbuser,$dbpass,$dbname);
-$query	= GenQuery('devices','s','device,devip,services,snmpversion,readcomm,location,contact,cliport,icon','device','',array('services & 2','snmpversion'),array('=','!='),array('2','0'),array('AND') );
+$query	= GenQuery('devices','s','device,devip,services,snmpversion,readcomm,location,contact,cliport,icon','device','',array('services','snmpversion'),array('COL & 2 =','!='),array(2,'0'),array('AND') );
 $res	= @DbQuery($query,$link);
 if($res){
 	while( ($d = @DbFetchRow($res)) ){
@@ -138,7 +138,7 @@
 		echo "$braddr</td></tr>\n";
 	}else{
 		echo "<h4>$toumsg</h4></td></tr></table></th></tr></table>\n";
-		if($_SESSION['vol']){echo "<embed src=\"inc/enter2.mp3\" volume=\"$_SESSION[vol]\" hidden=\"true>\"\n";}
+		if($_SESSION['vol']){echo "<embed src=\"inc/enter2.mp3\" volume=\"$_SESSION[vol]\" hidden=\"true\" pluginspage='missing_plugin.php?type=MP3'>\n";}
 		include_once ("inc/footer.php");
 		die;
 	}
--- nedi-std/html/User-Accounts.php	2012-02-11 04:14:22.000000000 -0800
+++ nedi-gw/html/User-Accounts.php	2012-04-12 18:20:11.000000000 -0700
@@ -101,17 +101,19 @@
 	}
 }elseif(isset($_GET['psw']) ){
 	$pass = md5( $_GET['psw'] );
-	$query	= GenQuery('users','u',"user=\"$_GET[psw]\"",'','',array('password'),'',array($pass) );
+	# Here we presumably cannot use the GenQuery() $ord parameter, because $_GET[psw] might be empty (not sure how or why that might happen,
+	# or if it's even really possible).  So we must provide all identifier and string escaping for the WHERE clause ourselves.
+	$query	= GenQuery('users','u',DbEscapeIdentifier('user')."='".DbEscapeString($_GET[psw])."'",'','',array('password'),'',array($pass) );
 	if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$usrlbl $_GET[psw]: $reslbl password OK</h5>";}
 }elseif(isset($_GET['gup']) ){
-	$query	= GenQuery('users','u',"user=\"$_GET[usr]\"",'','',array('groups'),'',array($_GET['gup']) );
+	$query	= GenQuery('users','u','user',$_GET[usr],'',array('groups'),'',array($_GET['gup']) );
 	if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$usrlbl $grplbl $updlbl OK</h5>";}
 }elseif($del){
 	$query	= GenQuery('users','d','','','',array('user'),array('='),array($_GET['del']) );
 	if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$usrlbl $_GET[del]: $dellbl OK</h5>";}
 }elseif($stv){
-	$viewdev = ($stv == '-')?"":DbEscapeString("$inv $opv \"$stv\"");
-	$query	= GenQuery('users','u',"user=\"$_GET[usr]\"",'','',array('viewdev'),'',array($viewdev) );
+	$viewdev = ($stv == '-')?"":EncodeViewdev($inv,$opv,$stv);
+	$query	= GenQuery('users','u','user',$_GET[usr],'',array('viewdev'),'',array($viewdev) );
 	if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>Device $acslbl $updlbl OK</h5>";}
 }
 ?>
@@ -130,7 +132,7 @@
 echo "<th>$grplbl</th><th>GUI</th><th>$cmdlbl</th></tr>\n";
 
 if ($grp){
-	$query	= GenQuery('users','s','*',$ord,'',array('groups'),array('&'),array($grp) );
+	$query	= GenQuery('users','s','*',$ord,'',array('groups'),array("COL & $grp ="),array($grp) );
 }else{
 	$query	= GenQuery('users','s','*',$ord );
 }
@@ -157,7 +159,8 @@
 <select size="1" name="inv">
 <?
 
-list($inv,$opv,$stv) = explode(" ",str_replace('"','',$usr[15]) );
+# We had to rework this decoding because some operators contain spaces.
+list($inv,$opv,$stv) = DecodeViewdev($usr[15]);
 foreach ($dcol as $k => $v){
        echo "<option value=\"$k\"".( ($inv == $k)?"selected":"").">$v\n";
 }
@@ -167,8 +170,8 @@
 <select size="1" name="opv">
 <? selectbox("oper",$opv);?>
 </select><br>
-<input type="text" name="stv" size="16" value="<?=$stv?>" onfocus="select();"  onchange="this.form.submit();" title="Device <?=$acslbl?> <?=$limlbl?>">
-<?=(($stv)?"<a href=\"Devices-List.php?ina=$inv&opa=$opv&sta=$stv\"><img src=\"img/16/eyes.png\" title=\"Device $lstlbl\"></a>":"")?>
+<input type="text" name="stv" size="16" value="<?=htmlspecialchars($stv)?>" onfocus="select();"  onchange="this.form.submit();" title="Device <?=$acslbl?> <?=$limlbl?>">
+<?=(($stv)?"<a href=\"Devices-List.php?ina=$inv&opa=$opv&sta=".urlencode($stv)."\"><img src=\"img/16/eyes.png\" title=\"Device $lstlbl\"></a>":"")?>
 </form> 
 <?}?>
 
--- nedi-std/html/User-Guests.php	2012-02-11 04:14:22.000000000 -0800
+++ nedi-gw/html/User-Guests.php	2012-03-26 17:46:24.000000000 -0700
@@ -27,7 +27,7 @@
 Device <SELECT size="1" name="ip" onchange="this.form.submit();">
 <OPTION VALUE="">------------
 <?
-$query	= GenQuery('devices','s','device,devip','','',array('os'),array('='),array('MSM') );
+$query	= GenQuery('devices','s','device,devip','','',array('devos'),array('='),array('MSM') );
 $res	= @DbQuery($query,$link);
 if($res){
 	while( $d = @DbFetchRow($res) ){
@@ -35,8 +35,9 @@
 	}
 	@DbFreeResult($res);
 }else{
-	print @DbError($link);
-	die ( mysql_error() );
+	# There's no sense in emitting the same message twice.
+	# print @DbError($link);
+	die ( DbError($link) );
 }
 ?>
 </SELECT>
--- nedi-std/html/User-Profile.php	2012-02-11 04:14:22.000000000 -0800
+++ nedi-gw/html/User-Profile.php	2012-04-12 17:24:47.000000000 -0700
@@ -19,14 +19,20 @@
 	if($_POST['pass'] AND $_POST['ackpass']){
 		if($_POST['pass'] == $_POST['ackpass']){
 			$pass = md5( $_POST['pass'] );
-			$query	= GenQuery('users','u',"user=\"$name\"",'','',array('password'),array('='),array($pass) );
+			# FIX MINOR:  This query is oddly written, by including an explicit "=" comparison in the $col parameter.
+			# Shouldn't it be rewritten to use the $ord parameter instead?  This construction should only be necessary
+			# if $name might be empty.
+			$query	= GenQuery('users','u',DbEscapeIdentifier('user')."='$name'",'','',array('password'),array('='),array($pass) );
 			if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>Password $updlbl OK</h5>";}
 		}else{
 			echo "<h4>Password: $mullbl $vallbl!</h4>";
 		}
 	}
 	$graphs = $_POST['gsiz'] + ($_POST['gbit']?8:0) + ($_POST['gfar']?16:0) + ($_POST['olic']?32:0) + ($_POST['gmap']?64:0);
-	$query	= GenQuery('users','u',"user=\"$name\"",'','',array('email','phone','comment','language','theme','volume','columns','msglimit','graphs','dateformat'),array(''),array($_POST['email'],$_POST['phone'],$_POST['cmt'],$_POST['lang'],$_POST['theme'],$_POST['vol'] + $_POST['lsiz']*4,$_POST['col'],$_POST['lim'],$graphs,$_POST['date']) );
+	# FIX MINOR:  This query is oddly written, by including an explicit "=" comparison in the $col parameter.
+	# Shouldn't it be rewritten to use the $ord parameter instead?  This construction should only be necessary
+	# if $name might be empty.
+	$query	= GenQuery('users','u',DbEscapeIdentifier('user')."='$name'",'','',array('email','phone','comment','language','theme','volume','columns','msglimit','graphs','dateformat'),array(''),array($_POST['email'],$_POST['phone'],$_POST['cmt'],$_POST['lang'],$_POST['theme'],$_POST['vol'] + $_POST['lsiz']*4,$_POST['col'],$_POST['lim'],$graphs,$_POST['date']) );
 	if( !@DbQuery($query,$link) ){echo "<h4>".DbError($link)."</h4>";}else{echo "<h5>$name $updlbl OK</h5>";}
 	$_SESSION['lang'] = $_POST['lang'];
 	$_SESSION['theme']= $_POST['theme'];
--- nedi-std/html/inc/libdb-msq.php	2012-02-11 04:14:24.000000000 -0800
+++ nedi-gw/html/inc/libdb-msq.php	2012-04-15 18:42:11.000000000 -0700
@@ -1,56 +1,316 @@
 <?PHP
 //===============================
-// mySQL functions.
+// Database-access functions.
 //===============================
 
+# For simplicity, these routines now depend on the global $dbtype
+# variable instead of having all their function signatures changed.
+
 function DbConnect($host,$user,$pass,$db){
-	$l = @mysql_connect($host,$user,$pass) or die("Could not connect to $db@$host with $user");
-	mysql_select_db($db) or die("could not select $db");
+	global $dbtype;
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		$l = @mysql_connect($host,$user,$pass) or die("Could not connect to $db@$host with user $user.");
+		mysql_select_db($db) or die("could not select $db");
+	} else {
+		$qpass = preg_replace("/\\\\/", "\\\\\\\\", $pass);	# \ => \\  (too many levels of interpretation for this to be obvious)
+		$qpass = preg_replace("/'/",    "\\\\'",   $qpass);	# ' => \'
+		$l = pg_connect("host='$host' dbname='$db' user='$user' password='$qpass'") or die("Could not connect to $db@$host with user $user.");
+	}
 	return $l;
 }
 
-function DbQuery($q,$l){
-	return @mysql_query($q,$l);
+function DbQuery($q,$l,$c=0){
+	global $debug, $dbtype;
+
+	# Enable this echo only for development debugging.  It will spill the query to the screen.
+	# Note:  This output might get suppressed by the browser if the page being generated is in the middle of a <select>
+	# list, or maybe under other conditions.  In such cases, you can look at the page or frame source to find this detail.
+	# echo "query is: $q;<br>";
+
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		return @mysql_query($q,$l);
+	} else {
+		# We leave off a possible leading @ because we don't want to suppress PostgreSQL warning messages
+		# during our porting effort.  (And even after that, we don't want to hide malfunctions from the
+		# user.)  Note that the reported code coordinates will be from this function rather than the
+		# calling code, so we also provide the caller's coordinates (below).  We might consider putting in
+		# a leading @ when we get done, and disabling the extra detail reporting here -- but that really
+		# seems pointless.
+		$result = pg_query($l,$q);
+
+		# FIX LATER:  We might want to put this printing under $debug control, if there are really some
+		# queries that do try to detect some expected errors such as duplicate key inserts and already
+		# warn about them (though we have not seen that yet).  The question is whether those cases warrant
+		# suppression of unexpected errors in all the many other places they might pop up.
+		if (!$result) {
+		    # Sometimes the text shows up against a dark background and is nearly unreadable.
+		    # $color allows you to adjust the text color as need be for the situation you are
+		    # trying to address.  One of these two colors is usually sufficient.
+		    $color = '#00EEEE';
+		    $color = '#000000';
+
+		    print "<span style='font-family: monospace; font-weight: bold; color: $color;'>$q</span><br>";
+		    $dberror = DbError($l);
+		    $dberror = preg_replace('/&/', '&amp;',  $dberror);
+		    $dberror = preg_replace('/"/', '&quot;', $dberror);
+		    $dberror = preg_replace("/'/", '&#39;',  $dberror);
+		    $dberror = preg_replace('/</', '&lt;',   $dberror);
+		    $dberror = preg_replace('/>/', '&gt;',   $dberror);
+
+		    # &#x200B; is an HTML zero-width breaking space.
+		    $dberror = preg_replace('/\n/', '<br>', $dberror);
+		    $dberror = preg_replace('/ /', '&nbsp;&#x200B;', $dberror);
+
+		    # Below, we could have used either the pre-wrap or the <pre>, and skipped the \n and space
+		    # substitutions just above.  The pre-wrap is really what we want, but may not work in some older
+		    # browsers (IE).  A <pre> gives us better (half-line) vertical spacing between successive message
+		    # components, but doesn't wrap long lines within the current column.  So we stick with the odd
+		    # setup for a sequence of (non-breaking full-width space, breaking zero-width space) pairs.
+		    # print '<span style="white-space: pre-wrap">';
+		    # print '<pre>';
+		    print "<span style='font-family: monospace; font-weight: bold; color: $color;'>$dberror</span>";
+		    print '<br>';
+		    # print '</pre>';
+		    # print '<br></span>';
+		    $trace = debug_backtrace();
+		    $caller = array_shift($trace);
+		    print("<span style='color: $color;'>Error arose from ".$caller['function'].' call at '.$caller['file'].' line '.$caller['line'].'.</span><br>');
+		    if ($c) {
+			    $caller = array_shift($trace);
+			    print("<span style='color: $color;'>from ".$caller['function'].' call at '.$caller['file'].' line '.$caller['line'].'.</span><br>');
+		    }
+		}
+		return $result;
+	}
 }
 
 function DbClose($l){
-        return @mysql_close($l);
+	global $dbtype;
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		return @mysql_close($l);
+	} else {
+		return pg_close($l);
+	}
 }
 
 function DbFieldName($r, $f){
-        return @mysql_field_name($r, $f);
+	global $dbtype;
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		return @mysql_field_name($r, $f);
+	} else {
+		return pg_field_name($r, $f);
+	}
 }
 
 function DbNumFields($r){
-        return @mysql_num_fields($r);
+	global $dbtype;
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		return @mysql_num_fields($r);
+	} else {
+		return pg_num_fields($r);
+	}
 }
 
 function DbNumRows($r){
-        return @mysql_num_rows($r);
+	global $dbtype;
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		return @mysql_num_rows($r);
+	} else {
+		return pg_num_rows($r);
+	}
 }
 
 function DbFetchRow($r){
-        return @mysql_fetch_row($r);
+	global $dbtype;
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		return @mysql_fetch_row($r);
+	} else {
+		return pg_fetch_row($r);
+	}
 }
 
 function DbFetchArray($r){
-        return mysql_fetch_assoc($r);
+	global $dbtype;
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		return mysql_fetch_assoc($r);
+	} else {
+		return pg_fetch_assoc($r);
+	}
 }
 
 function DbFreeResult($r){
-        return @mysql_free_result($r);
+	global $dbtype;
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		return @mysql_free_result($r);
+	} else {
+		return pg_free_result($r);
+	}
 }
 
+# If you want to call this, note the differing values returned
+# for different database types if the last query failed:
+# http://www.php.net/manual/en/function.mysql-affected-rows.php
+# http://www.php.net/manual/en/function.pg-affected-rows.php
 function DbAffectedRows($r){
-        return @mysql_affected_rows($r);
+	global $dbtype;
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		return @mysql_affected_rows($r);
+	} else {
+		return pg_affected_rows($r);
+	}
+}
+
+function DbEscapeString($s){
+	global $dbtype;
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		return @mysql_real_escape_string($s);
+	} else {
+		return pg_escape_string($s);
+	}
 }
 
-function DbEscapeString($r){
-        return @mysql_real_escape_string($r);
+# FIX LATER:  This function should eventually replace DbEscapeString(), once all
+# calls to that function have been eradicated from the ported NeDi code (and the
+# quotes around the returned values in the calling code also eliminated).  But we
+# cannot do that until pg_escape_literal() is widely available in PHP.
+function DbQuotedEscapeString($s){
+	global $dbtype;
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		$e = @mysql_real_escape_string($s);
+		$e = "'$e'";
+	} else {
+		# We want:
+		#     $e = pg_escape_literal($s);
+		# because it can handle strict escaping (e.g., it can generate
+		# E'escaped string'), but we have to settle for the following
+		# because pg_escape_literal() is not available in PHP 5.2.17.
+		$e = pg_escape_string($s);
+		$e = "'$e'";
+	}
+	return $e;
+}
+
+# We might get 'table.column' sent to this function, not just a bare column name.
+#
+# Do not further quote the result of this function.
+function DbEscapeIdentifier($i){
+	global $dbtype;
+	$c = explode(".", $i);
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		# PHP appears to have no standard MySQL-related function for this,
+		# so we approximate it as best we can.
+		return "`" . implode("`.`", array_map(mysql_real_escape_string, $c)) . "`";
+	} else {
+		# We actually want:
+		#     return pg_escape_identifier($i);
+		# or perhaps some similar code that also invokes implode() and
+		# array_map(0, but pg_escape_identifier() is not available in PHP
+		# 5.2.17.  So we have to settle for the following approximation.
+		return '"' . implode('"."', array_map(pg_escape_string, $c)) . '"';
+	}
 }
 
 function DbError($r){
-        return @mysql_error($r);
+	global $dbtype;
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		return @mysql_error($r);
+	} else {
+		return pg_last_error($r);
+	}
+}
+
+# We take 3 parameters instead of just converting $o in a routine called DbRegexpOperator()
+# because some databases (such as Oracle 10g) don't have regexp operators; they have only
+# functions (like REGEXP_LIKE()) instead, that would require access to all 3 arguments to
+# return the proper construction.
+#
+# Both $c and $v are assumed to have been appropriately quoted before being passed to this routine.
+function DbRegexpClause($c,$o,$v){
+	global $dbtype;
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		# MySQL operators
+		if (preg_match('/^not\s+regexpCI$/',$o)) {
+			# Note:  The original formulation for this case was effectively:
+			#     return " LCASE($c) not regexp $v";
+			# That formulation assumes that $v is expressed in all-lowercase.  However, that
+			# complexity is not needed, since MySQL regexp is already case-insensitive.
+			return " $c not regexp $v";
+		} elseif (preg_match('/^not\s+regexp$/',$o)) {
+			# Note:  The original formulation for this case was effectively:
+			#     return " $c not regexp $v";
+			# However, if this case is intended to be case-sensitive, then that
+			# formulation is wrong, since MySQL regexp is case-insensitive.
+			return " $c not regexp binary $v";
+		} elseif ($o == 'regexpCI') {
+			# Note:  The original formulation for this case was effectively:
+			#     return " LCASE($c) regexp $v";
+			# That formulation assumes that $v is expressed in all-lowercase.  However, that
+			# complexity is not needed, since MySQL regexp is already case-insensitive.
+			return " $c regexp $v";
+		} elseif ($o == 'regexp') {
+			# Note:  The original formulation for this case was effectively: 
+			#     return " $c regexp $v";
+			# However, if this case is intended to be case-sensitive, then that
+			# formulation is wrong, since MySQL regexp is case-insensitive.
+			return " $c regexp binary $v";
+		} elseif ($o == 'string regexp') {
+			# This case is for use in a "number regexp pattern" match, so we
+			# generally don't worry about case sensitivity in this situation.
+			# MySQL already implicitly casts numbers in string context to BINARY
+			# strings, so we don't force it explicitly here (though we could).
+			# return " cast ($c as binary) ~ $v";
+			return " $c regexp $v";
+		} else {
+			die("ERROR:  Invalid regexp operator.");
+		}
+	} else {
+		# PostgreSQL operators
+		if (preg_match('/^not\s+regexpCI$/',$o)) {
+			return " $c !~* $v";
+		} elseif (preg_match('/^not\s+regexp$/',$o)) {
+			return " $c !~ $v";
+		} elseif ($o == 'regexpCI') {
+			return " $c ~* $v";
+		} elseif ($o == 'regexp') {
+			return " $c ~ $v";
+		} elseif ($o == 'string regexp') {
+			return " cast ($c as text) ~ $v";
+		} else {
+			die("ERROR:  Invalid regexp operator.");
+		}
+	}
+}
+
+function DbStringAsNumeric($c){
+	global $dbtype;
+	if (!isset($dbtype) || $dbtype === 'mysql') {
+		# MySQL version:  use native datatype coercion
+		return $c;
+	} else {
+		# PostgreSQL version:  must use an explicit cast
+		return "cast ($c as bigint)";
+	}
+}
+
+//===============================================================================
+// Functions to handle the users.viewdev field.  These are needed because the
+// old way (separating fields with a single space) did not work correctly with
+// multi-word operators such as "not regexp"; the quoting of the operator value
+// when the field is used in SQL statements must be portable across databases;
+// and regexp operators need recoding for portability across databases.
+
+function EncodeViewdev($inv,$opv,$stv) {
+	return "$inv/$opv/$stv";
+}
+
+function DecodeViewdev($vd) {
+	return explode("/",$vd,3);
+}
+
+function InterpretViewdev($vd) {
+	list($inv,$opv,$stv) = DecodeViewdev($vd);
+	$stv = "'".DbEscapeString($stv)."'";
+	return strstr($opv,'regexp') ? DbRegexpClause($inv,$opv,$stv) : "$inv $opv $stv";
 }
 
 //===================================================================
@@ -59,19 +319,19 @@
 
 	global $link, $alrlbl, $addlbl;
 
-	$mres	= @DbQuery("SELECT * FROM $table WHERE $key",$link);
+	$mres	= @DbQuery("SELECT * FROM $table WHERE $key",$link,1);
 	if($mres){
 		if( @DbNumRows($mres) ){
 			$status = "<img src=\"img/16/bdis.png\" title=\"$alrlbl OK\">";
 		}else{
-			if( !@DbQuery("INSERT INTO $table ($col) VALUES ($val)",$link) ){
+			if( !@DbQuery("INSERT INTO $table ($col) VALUES ($val)",$link,1) ){
 				$status = "<img src=\"img/16/bcnl.png\" title=\"" .DbError($link)."\">";
 			}else{
 				$status = "<img src=\"img/16/bchk.png\" title=\"$addlbl OK\">";
 			}
 		}
 	}else{
-		print @DbError($link);
+		print @DbError($link).'<br>';
 	}
 	return $status;
 }
@@ -107,36 +367,161 @@
 //
 // SELECT and DELETE columns treatment: 
 // * ip:	Input will be converted to decimal, in case of dotted notation and masked if a prefix is set.
-// * time:	Time will be turned into EPOC, if it's not a number already.
+// * time:	Time will be turned into EPOCH, if it's not a number already.
 // * mac:	. : - are removed
 //
 function GenQuery($tbl,$do='s',$col='*',$ord='',$lim='',$in=array(),$op=array(),$st=array(),$co=array(),$jn=""){
-#TODO add sanitization here using mysql_real_escape_string() or addslashes()
-	global $debug;
+#TODO add sanitization here using DbEscapeString()
+	global $debug, $dbtype;
 
 	if($do == 'i'){
-		$qry = "INSERT INTO $tbl (". implode(',',$in) .") VALUES (\"". implode('","',$st) ."\")";
+		$qry = "INSERT INTO $tbl (". implode(',', array_map(DbEscapeIdentifier, $in)) .") VALUES ('". implode("','",$st) ."')";
 	}elseif($do == 'u'){
 		if( $in[0] ){
 			$x = 0;
 			foreach ($in as $c){
-				if($c){$s[]="$c=\"$st[$x]\"";}
+				if($c){$s[]=DbEscapeIdentifier($c)."='".DbEscapeString($st[$x])."'";}
 				$x++;
 			}
-			$w   = ($ord)?" WHERE $col=\"$ord\"":" WHERE $col";
+			# FIX LATER:  Currently, if $ord is not set, the caller must provide all $col escaping.
+			$w   = ($ord)?" WHERE ".DbEscapeIdentifier($col)."='".DbEscapeString($ord)."'":" WHERE $col";
 			$qry = "UPDATE $tbl SET ". implode(',',$s) ." $w";
 		}
 	}elseif($do ==  'h'){
-		$qry = "SHOW TABLES $tbl";
+		# We have removed the $tbl parameter from "SHOW TABLES $tbl" because we
+		# don't know how it was intended to be used with that syntax under MySQL,
+		# we don't know how that syntax should be interpreted in the context of
+		# PostgreSQL, and we don't see any calls in the rest of NeDi that use it.
+		$qry = (!isset($dbtype) || $dbtype === 'mysql')
+			? ('show tables')
+			: ('select table_name from information_schema.tables where table_catalog = current_catalog and table_schema = current_schema order by table_name');
 	}elseif($do ==  't'){
-		$qry = "TRUNCATE $tbl";
+		$qry = (!isset($dbtype) || $dbtype === 'mysql')
+			? "TRUNCATE $tbl"
+			: "TRUNCATE $tbl RESTART IDENTITY";
 	}elseif($do ==  'o'){
-		$qry = "OPTIMIZE TABLE $tbl";
+		$qry = (!isset($dbtype) || $dbtype === 'mysql')
+			? "OPTIMIZE TABLE $tbl"
+			: "VACUUM ANALYZE $tbl";
 	}elseif($do == 'c'){
-		$qry = "SHOW COLUMNS FROM $tbl";
+		# The existing PostgreSQL query below only provides an approximation of what MySQL lists as the Key
+		# field value ('PRI', 'UNI', 'MUL', or ''), though it yields exactly the same values for the nedi
+		# database.  This being PostgreSQL, we don't need to exactly mirror what MySQL does if this result
+		# will only be used for display and not for logic decisions, but some convention similar to what
+		# MySQL does is probably as good as anything we could come up with for summarizing the index status
+		# of a given column in a very short space.  So we model our output after theirs.  Unfortunately
+		# for this work, PostgreSQL does not store information about indexes which are not constraints
+		# in the information_schema views, so we need to dig deeper into the PostgreSQL-specific system
+		# catalogs.  This query has been tested with PostgreSQL 9.1.1; we have not checked compatibility
+		# with earlier releases.
+		#
+		# The (rather messy) rules that MySQL follows are specified here, and abstracted below:
+		# http://dev.mysql.com/doc/refman/5.6/en/show-columns.html
+		#
+		# * If the column is part of a PRIMARY KEY, whether single-column or multi-column, mark the Key for this
+		#   column as PRI, and stop.
+		#
+		# * Otherwise, if the table has no PRIMARY key, this column is the first column of a UNIQUE index, all
+		#   the columns in that index cannot be NULL, and this is the first (or maybe only?) UNIQUE index on
+		#   the table (in some unspecified order of indexes on the table) for which all the columns in the
+		#   index cannot be NULL, mark the Key for this column as PRI, and stop.
+		#
+		# * Otherwise, if the column is the first column of a UNIQUE index, mark the Key for this column as UNI,
+		#   and stop.  (Well, maybe.  If this column is the first in a multi-column UNIQUE index, MySQL allows
+		#   this column to instead be marked as MUL.  It's not at all clear when this special-case handling is
+		#   invoked, nor what benefit accrues from this confusion.)
+		#
+		# * Otherwise, if the column is the first column of a nonunique index, mark the Key for this column as
+		#   MUL, and stop.
+		#
+		# * Otherwise, the column is supposedly either not indexed or it is indexed only as a secondary column
+		#   in a multiple-column, nonunique index.  In these cases, leave the Key as empty.
+		#
+		# * Oops!  What about the case where the column is indexed as a secondary column in a unique index?
+		#   The documentation doesn't say anything about that.
+		#
+		# Our simplified PostgreSQL rules (complicated enough already) are:
+		#
+		# * If the column is part of a PRIMARY KEY, mark it as PRI, and stop.
+		# * Otherwise, if the column is the first column of a UNIQUE index, mark it as UNI, and stop.
+		# * Otherwise, if the column is the first column of a non-UNIQUE index, mark it as MUL, and stop.
+		# * Otherwise, mark the column as ''.
+
+		# For PostgreSQL, we don't bother to pull any information corresponding to the MySQL "Extra" field,
+		# because we believe the calling code won't ever use this field.
+		#
+		# We might have tried to rework the PostgreSQL query to contain only one reference to $tbl, for
+		# the sake of elegance, but that would have made the query less efficient (more work would be done
+		# in the inner queries, only to be thrown away by equivalent WHERE clauses at the outer level to
+		# filter out additional data produced at the inner level).
+		#
+		# We do pull some extra fields in the PostgreSQL key_fields and key_columns subqueries that we
+		# don't actually use in the parent query, simply so that if you want to pull out these subqueries
+		# and look to see what they do, you will have more context to work with.
+
+		# 8-character tabs are helpful for viewing this.
+		$qry = (!isset($dbtype) || $dbtype === 'mysql')
+			? "show columns from $tbl"
+			: "
+			SELECT
+			    pgcol.attname AS \"Field\",
+			    format_type(pgcol.atttypid, pgcol.atttypmod) AS \"Type\", 
+			    CASE pgcol.attnotnull WHEN true THEN 'NO' else 'YES' end AS \"Null\", 
+			    CASE key_enum.key_type WHEN 3 THEN 'PRI' WHEN 2 THEN 'UNI' WHEN 1 THEN 'MUL' ELSE '' END AS \"Key\",
+			    CASE pgcol.atthasdef WHEN true THEN pgdef.adsrc ELSE '' END AS \"Default\"
+			FROM pg_class AS pgtab CROSS JOIN pg_attribute AS pgcol
+			LEFT JOIN (
+			    SELECT  
+				column_name,
+				max(
+				    CASE
+					WHEN key_columns.i_primary IS true THEN 3
+					WHEN key_columns.i_field   != 1    THEN 0  
+					WHEN key_columns.i_unique  IS true THEN 2
+					ELSE                                    1
+				    END
+				) AS key_type
+			    FROM (  
+				SELECT key_fields.table_name, key_fields.t_oid AS table_oid, key_fields.index_name, key_fields.i_oid,
+				    key_fields.i_primary, key_fields.i_unique, key_fields.i_column_count,
+				    row_number() OVER (partition by table_name, t_oid, index_name, i_oid, i_primary, i_unique, i_column_count) AS i_field,
+				    key_fields.t_field, cols.attname AS column_name
+				FROM (
+				    SELECT t_class.relname AS table_name, t_class.oid AS t_oid, i_class.relname AS index_name, pgi.indexrelid AS i_oid,
+					pgi.indisprimary AS i_primary, pgi.indisunique AS i_unique, pgi.indnatts AS i_column_count,
+					unnest(pgi.indkey) AS t_field 
+				    FROM pg_index pgi
+					 JOIN pg_class t_class on t_class.oid = pgi.indrelid
+				    LEFT JOIN pg_class i_class on i_class.oid = pgi.indexrelid
+				    LEFT JOIN pg_namespace AS inner_namespace ON inner_namespace.oid = t_class.relnamespace
+				    LEFT JOIN pg_shdepend AS inner_shdepend ON inner_shdepend.objid = t_class.oid
+				    LEFT JOIN pg_database AS inner_database ON inner_database.oid = inner_shdepend.dbid
+				    WHERE t_class.relname = '$tbl' AND inner_namespace.nspname = current_schema AND inner_database.datname = current_catalog
+				) AS key_fields
+				LEFT JOIN pg_attribute cols ON 
+				    cols.attrelid = key_fields.t_oid
+				AND cols.attnum   = key_fields.t_field
+			    ) AS key_columns
+			    GROUP BY column_name
+			) AS key_enum ON key_enum.column_name = pgcol.attname
+			LEFT JOIN pg_attrdef AS pgdef ON pgdef.adrelid = pgtab.oid AND pgdef.adnum = pgcol.attnum
+			LEFT JOIN pg_namespace AS outer_namespace ON outer_namespace.oid = pgtab.relnamespace
+			LEFT JOIN pg_shdepend AS outer_shdepend ON outer_shdepend.objid = pgtab.oid
+			LEFT JOIN pg_database AS outer_database ON outer_database.oid = outer_shdepend.dbid
+			WHERE pgtab.relname = '$tbl' AND outer_namespace.nspname = current_schema AND outer_database.datname = current_catalog
+			AND pgcol.attrelid = pgtab.oid AND pgcol.attnum > 0
+			ORDER BY pgcol.attnum
+			";
 	}elseif($do == 'r'){
-		$qry = "REPAIR TABLE $tbl";
+		# PostgreSQL doesn't seem to have any command to repair the data pages of a table; the
+		# best we can do is to rebuild any indexes from scratch.  This approach won't rebuild
+		# any indexes on shared system catalogs as a REINDEX DATABASE would do, though.
+		$qry = (!isset($dbtype) || $dbtype === 'mysql')
+			? "REPAIR TABLE $tbl"
+			: "REINDEX TABLE $tbl";
 	}else{
+		# Note:  The MySQL "LIMIT offset,limit" construction must be specified instead as the portable
+		# form "LIMIT limit OFFSET offset".  This affects how upstream code passes $lim to GenQuery().
 		$l = ($lim) ? "LIMIT $lim" : "";
 		if( strstr($ord, 'ifname') ){
 			$desc = strpos($ord, 'desc')?" desc":"";
@@ -144,68 +529,135 @@
 			$colarr = explode(".", $ord);			# Handle table in join queries
 			$icol = ($colarr[0] == 'ifname')?'ifname':"$colarr[0].ifname";
 			$dcol = ($colarr[0] == 'ifname')?'device':"$colarr[0].device";
-			$od = "ORDER BY $dcol $desc,SUBSTRING_INDEX($icol, '/', 1), SUBSTRING_INDEX($icol, '/', -1)*1+0";
+			# FIX LATER:  This ORDER BY is probably NOT doing what it looks like what was intended.
+			# For example, if $icol is interfaces.ifname, then it is likely to contain some mixture of
+			# string values which are entirely numeric (e.g., '42') and some of which are alphanumeric
+			# (e.g., 'VLAN112', 'ESXGuests', 'Trk1').  Strings like this that DO NOT contain a '/'
+			# character will return the entire string for both of the SUBSTRING_INDEX() calls here,
+			# meaning that the second-level sorting will be according to a mixture of seemingly
+			# arbitrary strings, including string values of numbers read left-to-right as digit
+			# characters.  Possibly, some reworking of this clause might be called for.
+			$od = (!isset($dbtype) || $dbtype === 'mysql')
+			    ? "ORDER BY $dcol $desc,SUBSTRING_INDEX($icol, '/', 1), SUBSTRING_INDEX($icol, '/', -1)*1+0"
+			    : "ORDER BY $dcol $desc,SUBSTRING_INDEX($icol, '/', 1), case when SUBSTRING_INDEX($icol, '/', -1) ~ '^\d+$' then cast(SUBSTRING_INDEX($icol, '/', -1) as bigint) else 0 end";
 		}elseif($ord){
 			$od = "ORDER BY $ord";
 		}else{
 			$od = "";
 		}
 
-		if( isset($st[0]) and $st[0] !== ""  ){
+		if( isset($st[0]) and $st[0] !== "" ){
 			$w = "WHERE";
 			$x = 0;
 			do{
 				$cop = ( isset($co[$x]) and $in[$x+1] ) ? $co[$x] : "";
 				if($op[$x] and $in[$x]){
+					$qc = 0;
 					$c = $in[$x];
 					$v = $st[$x];
 					$o = $op[$x];
+					$m = array();
 					if( preg_match("/^(first|last|start|end|time|(if|ip|os)?update)/",$c) and !preg_match("/^[0-9]+$/",$v) ){
+						if(strstr($o,'regexp')){
+							# FIX LATER:  Preventing such a combination should be handled upstream.
+							return "ERROR:  Invalid Query:  You cannot use \"regexp\" against a time value.";
+						}
+						if($o == 'like'){
+							# FIX LATER:  Preventing such a combination should be handled upstream.
+							return "ERROR:  Invalid Query:  You cannot use \"like\" against a time value.";
+						}
 						$v = strtotime($v);
 					}elseif($c == 'mac'){
 						$v = preg_replace("/[.:-]/","", $v);
-					}elseif(preg_match("/^(dev|orig|nod|if|mon)ip$/",$c) and !preg_match('/^[0-9]+$/',$v) ){			# Do we have an dotted IP?
+					}elseif(preg_match("/^(dev|orig|nod|if|mon)ip$/",$c) and !preg_match('/^[0-9]+$/',$v) ){	# Do we have an dotted IP?
 						if( strstr($v,'/') ){									# CIDR?
 							list($ip, $prefix) = explode('/', $v);
 							$dip = sprintf("%u", ip2long($ip));
 							$dmsk = 0xffffffff << (32 - $prefix);
 							$dnet = sprintf("%u", ip2long($ip) & $dmsk );
-							$c = "$c & $dmsk";
+							$qc = 1;
+							$c = DbEscapeIdentifier($c)." & $dmsk";
 							$v = $dnet;
 						}else{
 							if( preg_match('/regexp/',$o)){							# regexp operator?
-								$c = "inet_ntoa($c)";
+								$qc = 1;
+								$c = "inet_ntoa(".DbEscapeIdentifier($c).")";
 							}else{										# converting plain address
 								$v = sprintf("%u", ip2long($v));
 							}
 						}
-					}
-					if( strpos($o,'CI') ){
-						$c = "LCASE($in[$x])";
-						$o = substr($op[$x],0,-2);
+					}elseif(preg_match("/^(\w+)\(([\w.]+)\)$/",$c,$m)){			# quote column name within function call
+						$qc = 1;
+						$c = $m[1].'('.DbEscapeIdentifier($m[2]).')';
 					}
 					if(strstr($o,'regexp') and $v == '' ){$v = '.';}
 					if( strstr($o, 'COL ') ){
 						$o = substr($o,4);
 					}else{
-						$v = "\"$v\"";
+						$v = "'".DbEscapeString($v)."'";
+					}
+					# $c==' ' supports AND/OR precedence workarounds.
+					if(!$qc && $c != ' ') {
+						$c = DbEscapeIdentifier($c);
+					}
+					if(strstr($o,'regexp')) {
+						$w .= DbRegexpClause($c,$o,$v)." $cop";
+					}
+					else {
+						$w .= " $c $o $v $cop";
 					}
-					$w .= " $c $o $v $cop";
 				}
 				$x++;
 			}while($cop);
 		}elseif( isset($co[0]) and $co[0] != "" ){
+			# FIX MINOR:  $in[0] and $in[1] are likely not booleans, so joining them with an AND operator
+			# or an OR operator as $co[0] probably won't make sense (and will throw a PostgreSQL error),
+			# if that is the value of $co[0].  We should probably either test for such conditions here and
+			# disallow them, or (better) do a good job of validating the GenQuery() parameters upstream
+			# (e.g., in the Devices => List, Nodes => Track, and similar screens).
 			$w = "WHERE $in[0] $co[0] $in[1]";
 		}else{
 			$w = "";
 		}
 
 		if(isset($_SESSION['view']) and $_SESSION['view'] and (strstr($jn,'JOIN devices') or $tbl == 'devices')){
-			$w = ($w)?"$w AND $_SESSION[view]":"WHERE $_SESSION[view]";
+			$view = InterpretViewdev($_SESSION[view]);
+			$w = ($w)?"$w AND $view":"WHERE $view";
 		}
 
 		if($do == 'd'){
-			$qry = "DELETE FROM $tbl $w $od $l";
+			# If you specify a limit clause as $lim, you must also specify a particular
+			# unique column as $col.  Otherwise, we may not be able to process the query.
+			$bad = false;
+			if (!isset($dbtype) || $dbtype === 'mysql') {
+				if ($l == '') {
+					$qry = "DELETE FROM $tbl $w";
+				}elseif (!strstr($l, 'OFFSET')){
+					$qry = "DELETE FROM $tbl $w $od $l";
+				}elseif ($col != '*'){
+					# MySQL does not support an OFFSET clause as part of the LIMIT clause on a DELETE statement,
+					# nor does it support a LIMIT clause in an "expr IN (SELECT ... LIMIT ...)" subquery.  So this
+					# complex workaround is necessary.
+					$qry = "DELETE FROM $tbl WHERE $col IN (SELECT * FROM (SELECT $col FROM $tbl $w $od $l) AS alias)";
+				}else{
+					$bad = true;
+				}
+			}else{
+				if ($l == '') {
+					$qry = "DELETE FROM $tbl $w";
+				}elseif ($col != '*'){
+					# This construction lets us impose "LIMIT a OFFSET b" on a DELETE.
+					$qry = "DELETE FROM $tbl WHERE $col IN (SELECT $col FROM $tbl $w $od $l)";
+				}else{
+					$bad = true;
+				}
+			}
+			if ($bad) {
+				$trace = debug_backtrace();
+				$caller = array_shift($trace);
+				print('Error arose from '.$caller['function'].' call at '.$caller['file'].' line '.$caller['line'].'.<br>');
+				die ("ERROR:  Found DELETE with LIMIT and no unique column specified.");
+			}
 		}elseif($do == 's'){
 			$qry = "SELECT $col FROM $tbl $jn $w $od $l";
 		}else{
@@ -218,8 +670,43 @@
 				if($do == 'a'){$cal = ", avg($excol[1]) as avg";}
 				elseif($do == 'm'){$cal = ", sum($excol[1]) as sum";}
 				elseif($do == 'x'){$cal = ", max($excol[1]) as max";}
-				else{$cal = ", $excol[1]";}
+				else{
+					# MySQL:  see http://dev.mysql.com/doc/refman/5.0/en/group-by-hidden-columns.html
+					# PostgreSQL doesn't allow that kind of sloppiness.
+					if (!isset($dbtype) || $dbtype === 'mysql') {
+						$cal = ", $excol[1]";
+					}else{
+						$cals = explode(",",$excol[1]);
+						$gb = array();
+						foreach ($cals as $c){
+							# If some aggregate function is already applied, just pass it through.
+							# Otherwise, apply a safe default aggregate function.
+							$m = array();
+							if(preg_match('/^\w+$/',$c)){
+								$c = 'max('.DbEscapeIdentifier($c).')';
+							}elseif(preg_match("/^(\w+)\((\w+)\)$/",$c,$m)){
+								$c = $m[1].'('.DbEscapeIdentifier($m[2]).')';
+							}elseif(preg_match("/^(\w+)\((\w+)\((\w+)\)\)$/",$c,$m)){
+								$c = $m[1].'('.$m[2].'('.DbEscapeIdentifier($m[3]).'))';
+							}
+							$gb[] = $c;
+						}
+						$cal = ', ' . implode(', ', $gb);
+					}
+				}
+			}
+			$colarr = explode(",",$col);
+			$cols = array();
+			foreach ($colarr as $c) {
+				if(preg_match('/^\w+$/',$c)){
+					$cols[] = DbEscapeIdentifier($c);
+				}
+				else {
+					# FIX LATER:  This could be extended to handle "count(*)", "field as alias", and so forth.
+					$cols[] = $c;
+				}
 			}
+			$col = implode(', ', $cols);
 			$qry = "SELECT $col,count(*) as cnt$cal FROM  $tbl $jn $w GROUP BY $col $hav $od $l";
 		}
 	}
--- nedi-std/html/inc/libmisc.php	2012-04-20 21:11:49.000000000 -0700
+++ nedi-gw/html/inc/libmisc.php	2012-04-12 21:35:27.000000000 -0700
@@ -8,9 +8,10 @@
 function ReadConf($group){
 
 	global $locsep,$lang,$redbuild,$modgroup,$disc,$fahrtmp;
-	global $comms,$mod,$backend,$dbhost,$dbname,$dbuser,$dbpass,$retire;
+	global $comms,$mod,$backend,$dbtype,$dbhost,$dbname,$dbuser,$dbpass,$retire;
 	global $timeout,$ignoredvlans,$useivl,$cpua,$mema,$tmpa,$trfa,$trfw;
-	global $pause,$latw,$rrdcmd,$nedipath,$rrdstep;
+	global $mysql_path, $mysqldump_path, $psql_path, $pg_dump_path;
+	global $pause,$latw,$rrdcmd,$nmapcmd,$nedipath,$rrdstep;
 	global $cacticli,$cactiuser,$cactipass,$cactidb,$cactihost,$cactiurl;
 	global $guiauth,$radsrv, $ldapsrv, $ldapmap;
 
@@ -44,11 +45,17 @@
 				$comms[$v[1]]['ppass'] = (isset($v[5]))?$v[5]:"";
 			}
 			elseif ($v[0] == "backend")	{$backend = $v[1];}
+			elseif ($v[0] == "dbtype")	{$dbtype  = $v[1];}
 			elseif ($v[0] == "dbhost")	{$dbhost  = $v[1];}
 			elseif ($v[0] == "dbname")	{$dbname  = $v[1];}
 			elseif ($v[0] == "dbuser")	{$dbuser  = $v[1];}
 			elseif ($v[0] == "dbpass")	{$dbpass  = $v[1];}
 
+			elseif ($v[0] == "mysql_path")		{$mysql_path     = $v[1];}
+			elseif ($v[0] == "mysqldump_path")	{$mysqldump_path = $v[1];}
+			elseif ($v[0] == "psql_path")		{$psql_path      = $v[1];}
+			elseif ($v[0] == "pg_dump_path")	{$pg_dump_path   = $v[1];}
+
 			elseif ($v[0] == "cpu-alert")	{$cpua = $v[1];}
 			elseif ($v[0] == "mem-alert")	{$mema = $v[1];}
 			elseif ($v[0] == "temp-alert")	{$tmpa = $v[1];}
@@ -63,6 +70,7 @@
 			elseif ($v[0] == "timeout")	{$timeout      = $v[1];}
 
 			elseif ($v[0] == "rrdcmd")	{$rrdcmd   = $v[1];}
+			elseif ($v[0] == "nmapcmd")	{$nmapcmd  = $v[1];}
 			elseif ($v[0] == "nedipath")	{$nedipath = $v[1];}
 			elseif ($v[0] == "rrdstep")	{$rrdstep  = $v[1];}
 
@@ -87,7 +95,7 @@
 
 //===================================================================
 // Avoid directory traversal attacks (../ or ..\)
-// Avoid condition exclusion (e.g. attacking viewdev) with mysql comment --
+// Avoid condition exclusion (e.g. attacking viewdev) with SQL comment --
 // Recursive because array elements can be array as well
 function sanitize( $arr ){
 	if ( is_array($arr) ){
@@ -239,6 +247,13 @@
 	global $cndlbl;
 	
 	if($type == "oper"){
+		# FIX MINOR:  The treatment of "&"=>"and","||"=>"or" is very confused here.  In
+		# MySQL, "&" is a bitwise AND of 64-bit integers, while "||" is a logical OR of what
+		# ought to be boolean operands (though MySQL treats any non-zero integral value as
+		# TRUE).  These operations are clearly do not have complementary semantics.  I suspect
+		# we either want "&" and "|", or we want "&&" and "||" instead (perhaps less likely).
+		# In any case, the chosen interpretation of the ambiguous "and" and "or" terms that
+		# show up on-screen ought to be explained in the documentation, wherever that is.
 		$options = array("regexp"=>"regexp","not regexp"=>"!regexp","regexpCI"=>"reg CI","not regexpCI"=>"!reg CI","like"=>"like",">"=>">","="=>"=","!="=>"!=",">="=>">=","<"=>"<","&"=>"and","||"=>"or","COL IS"=>"is","COL IS NOT"=>"is not");
 	}elseif($type == "comop"){
 		$options = array(""=>"$cndlbl A","AND"=>"A and B","OR"=>"A or B",">"=>"colA > colB","="=>"colA = colB","!="=>"colA != colB","<"=>"colA < colB");
@@ -261,9 +276,9 @@
 	#	echo "<h3>$fltlbl: $nonlbl</h3>";
 	}else{
 		if($cop == ""){ 
-			echo "<h3>$fltlbl: $ina $opa \"$sta\"</h3>";
+			echo "<h3>$fltlbl: $ina $opa '$sta'</h3>";
 		}elseif($cop =="AND" or $cop =="OR"){ 
-			echo "<h3>$fltlbl: $ina $opa \"$sta\" $cop $inb $opb \"$stb\"</h3>";
+			echo "<h3>$fltlbl: $ina $opa '$sta' $cop $inb $opb '$stb'</h3>";
 		}else{
 			echo "<h3>$fltlbl: $ina $cop $inb</h3>";
 		}
--- nedi-std/html/inc/libmon.php	2012-02-11 04:14:24.000000000 -0800
+++ nedi-gw/html/inc/libmon.php	2012-04-11 11:25:29.000000000 -0700
@@ -120,13 +120,21 @@
 		$query	= GenQuery('interfaces','s','device,ifname,speed,iftype,douterr','douterr desc',$_SESSION['lim'],array('douterr','iftype','location'),array('>','!=','regexp'),array("$rrdstep",'71',$loc),array('AND','AND'),'JOIN devices USING (device)');
 	}elseif($mode   == "bbup"){
 		$type = 0;
-		$query	= GenQuery('interfaces','s',"device,ifname,speed,iftype,dinoct*800/speed/$rrdstep",'dinoct/speed desc',$_SESSION['lim'],array("dinoct*800/speed/$rrdstep",'location'),array('>','regexp'),array($trfa,$loc),array('AND'),'JOIN devices USING (device)');
+		# We have chosen to ignore rows with speed=0 to avoid divide-by-zero errors.
+		# If you don't like that, you can use the alternate query here instead, that
+		# will effectively substitute zero for the infinite division.
+		# $query	= GenQuery('interfaces','s',"device,ifname,speed,iftype,case when speed > 0 then dinoct*800.0/speed/$rrdstep else 0 end",'case when speed > 0 then dinoct/speed else 0 end desc',$_SESSION['lim'],array('dinoct','location'),array("COL * 800.0 / speed / $rrdstep >",'regexp'),array($trfa,$loc),array('AND'),'JOIN devices USING (device)');
+		$query	= GenQuery('interfaces','s',"device,ifname,speed,iftype,dinoct*800.0/speed/$rrdstep",'dinoct/speed desc',$_SESSION['lim'],array('speed','dinoct','location'),array('COL >',"COL * 800.0 / speed / $rrdstep >",'regexp'),array(0,$trfa,$loc),array('AND','AND'),'JOIN devices USING (device)');
 	}elseif($mode   == "bbdn"){
 		$type = 0;
-		$query	= GenQuery('interfaces','s',"device,ifname,speed,iftype,doutoct*800/speed/$rrdstep",'doutoct/speed desc',$_SESSION['lim'],array("doutoct*800/speed/$rrdstep",'location'),array('>','regexp'),array($trfa,$loc),array('AND'),'JOIN devices USING (device)');
+		# We have chosen to ignore rows with speed=0 to avoid divide-by-zero errors.
+		# If you don't like that, you can use the alternate query here instead, that
+		# will effectively substitute zero for the infinite division.
+		# $query	= GenQuery('interfaces','s',"device,ifname,speed,iftype,case when speed > 0 then doutoct*800.0/speed/$rrdstep else 0 end",'case when speed > 0 then doutoct/speed else 0 end desc',$_SESSION['lim'],array('doutoct','location'),array("COL * 800.0 / speed / $rrdstep >",'regexp'),array($trfa,$loc),array('AND'),'JOIN devices USING (device)');
+		$query	= GenQuery('interfaces','s',"device,ifname,speed,iftype,doutoct*800.0/speed/$rrdstep",'doutoct/speed desc',$_SESSION['lim'],array('speed','doutoct','location'),array('COL >',"COL * 800.0 / speed / $rrdstep >",'regexp'),array(0,$trfa,$loc),array('AND','AND'),'JOIN devices USING (device)');
 	}elseif($mode   == "bdis"){
 		$type = 2;
-		$query	= GenQuery('interfaces','s','device,ifname,speed,iftype,ifstat','device',$_SESSION['lim'],array('ifstat','location'),array('&','regexp'),array('128',$loc),array('AND'),'JOIN devices USING (device)');
+		$query	= GenQuery('interfaces','s','device,ifname,speed,iftype,ifstat','device',$_SESSION['lim'],array('ifstat','location'),array('COL & 128 =','regexp'),array(128,$loc),array('AND'),'JOIN devices USING (device)');
 	}
 	$res	= @DbQuery($query,$link);
 	if($res){
@@ -599,56 +607,58 @@
 
 	$col = 0;
 	$rec = 0;
-	ksort($dcity);
-	foreach (array_keys($dcity) as $r){
-		if(!$reg or $r == $reg){
-			if ($rec == "1"){ $rec = "0"; $bi = "imga"; }
-			else{ $rec = "1"; $bi = "imgb"; }
-			$ur = urlencode($r);
-			ksort($dcity[$r]);
-			foreach (array_keys($dcity[$r]) as $c){
-				$nd = $dcity[$r][$c]['nd'];
-				$ci = CtyImg($dcity[$r][$c]['nd']);
-				$mn = isset( $dcity[$r][$c]['mn']) ? $dcity[$r][$c]['mn'] : 0;
-				$al = isset( $dcity[$r][$c]['al']) ? $dcity[$r][$c]['al'] : 0;
-				list($statbg,$stat) = StatusBg($nd,$mn,$al,$bi);
-				$uc = urlencode($c);
-				if ($col == $_SESSION['col']){
-					$col = 0;
-					echo "</tr><tr>";
-				}
-			        echo "<td valign=\"top\" class=\"$statbg\">\n";
-			        $mstat = ($mn)?"$mn Monitored $stat":"";
-				if($siz){
-					echo "<center><a href=?reg=$ur&cty=$uc><img src=\"img/$ci.png\" title=\"$nd Devices $mstat\"></a><br>".substr($c,0,$_SESSION['lsiz'])."\n";
-				}else{
-					echo "<a href=\"Devices-List.php?ina=location&opa=regexp&sta=%5E$ur\">".substr($r,0,$_SESSION['lsiz'])."</a><p>\n";
-					$gmap = "$uc+$ur";
-					if($_SESSION['gmap']){
-						$ns = $ew = "";
-						$query	= GenQuery('locations','s','id,x,y,ns,ew,locdesc','','',array('region','city','building'),array('=','=','='),array($r,$c,''),array('AND','AND'));
-						$res	= @DbQuery($query,$link);
-						if (@DbNumRows($res)){
-							list($id,$x,$y,$ns,$ew,$com) = @DbFetchRow($res);
-							$ns /= 10000000;
-							$ew /= 10000000;
-						}
-						$s = ($_SESSION['gsiz'] < 3)?"160x120":"240x160";
-						if($ns and $ew){
-							echo "<center><a href=?reg=$ur&cty=$uc><img src=\"http://maps.google.com/maps/api/staticmap?zoom=12&size=$s&maptype=roadmap&sensor=false&markers=color:purple%7C$ns,$ew\" title=\"$nd Devices $mstat, $com\" style=\"border:1px solid black\"></a><br>\n";
-							$gmap = "$ns,$ew";
+	if (isset($dcity)) {
+		ksort($dcity);
+		foreach (array_keys($dcity) as $r){
+			if(!$reg or $r == $reg){
+				if ($rec == "1"){ $rec = "0"; $bi = "imga"; }
+				else{ $rec = "1"; $bi = "imgb"; }
+				$ur = urlencode($r);
+				ksort($dcity[$r]);
+				foreach (array_keys($dcity[$r]) as $c){
+					$nd = $dcity[$r][$c]['nd'];
+					$ci = CtyImg($dcity[$r][$c]['nd']);
+					$mn = isset( $dcity[$r][$c]['mn']) ? $dcity[$r][$c]['mn'] : 0;
+					$al = isset( $dcity[$r][$c]['al']) ? $dcity[$r][$c]['al'] : 0;
+					list($statbg,$stat) = StatusBg($nd,$mn,$al,$bi);
+					$uc = urlencode($c);
+					if ($col == $_SESSION['col']){
+						$col = 0;
+						echo "</tr><tr>";
+					}
+					echo "<td valign=\"top\" class=\"$statbg\">\n";
+					$mstat = ($mn)?"$mn Monitored $stat":"";
+					if($siz){
+						echo "<center><a href=?reg=$ur&cty=$uc><img src=\"img/$ci.png\" title=\"$nd Devices $mstat\"></a><br>".substr($c,0,$_SESSION['lsiz'])."\n";
+					}else{
+						echo "<a href=\"Devices-List.php?ina=location&opa=regexp&sta=%5E$ur\">".substr($r,0,$_SESSION['lsiz'])."</a><p>\n";
+						$gmap = "$uc+$ur";
+						if($_SESSION['gmap']){
+							$ns = $ew = "";
+							$query	= GenQuery('locations','s','id,x,y,ns,ew,locdesc','','',array('region','city','building'),array('=','=','='),array($r,$c,''),array('AND','AND'));
+							$res	= @DbQuery($query,$link);
+							if (@DbNumRows($res)){
+								list($id,$x,$y,$ns,$ew,$com) = @DbFetchRow($res);
+								$ns /= 10000000;
+								$ew /= 10000000;
+							}
+							$s = ($_SESSION['gsiz'] < 3)?"160x120":"240x160";
+							if($ns and $ew){
+								echo "<center><a href=?reg=$ur&cty=$uc><img src=\"http://maps.google.com/maps/api/staticmap?zoom=12&size=$s&maptype=roadmap&sensor=false&markers=color:purple%7C$ns,$ew\" title=\"$nd Devices $mstat, $com\" style=\"border:1px solid black\"></a><br>\n";
+								$gmap = "$ns,$ew";
+							}else{
+								echo "<center><a href=?reg=$ur&cty=$uc><img src=\"http://maps.google.com/maps/api/staticmap?center=$uc+$ur&zoom=12&size=$s&maptype=roadmap&sensor=false\" title=\"$nd Devices $mstat\" style=\"border:1px solid black\"></a><br>\n";
+							}
+							echo "<a href=\"http://maps.google.com/maps?q=$gmap\" target=\"window\"><img src=\"img/16/map.png\" title=\"Google Maps\"></a>\n";
 						}else{
-							echo "<center><a href=?reg=$ur&cty=$uc><img src=\"http://maps.google.com/maps/api/staticmap?center=$uc+$ur&zoom=12&size=$s&maptype=roadmap&sensor=false\" title=\"$nd Devices $mstat\" style=\"border:1px solid black\"></a><br>\n";
+							echo "<center><a href=?reg=$ur&cty=$uc><img src=\"img/$ci.png\" title=\"$nd Devices $mstat\"></a><br>\n";
+							echo "<a href=\"Topology-Map.php?mod=f&fmt=png&ina=location&opa=regexp&sta=%5E$ur$locsep$uc$locsep\"><img src=\"img/16/paint.png\" title=\"Topology-Map\"></a>\n";				
 						}
-						echo "<a href=\"http://maps.google.com/maps?q=$gmap\" target=\"window\"><img src=\"img/16/map.png\" title=\"Google Maps\"></a>\n";
-					}else{
-						echo "<center><a href=?reg=$ur&cty=$uc><img src=\"img/$ci.png\" title=\"$nd Devices $mstat\"></a><br>\n";
-						echo "<a href=\"Topology-Map.php?mod=f&fmt=png&ina=location&opa=regexp&sta=%5E$ur$locsep$uc$locsep\"><img src=\"img/16/paint.png\" title=\"Topology-Map\"></a>\n";				
+						echo "<a href=\"Devices-List.php?ina=location&opa=regexp&sta=%5E$ur$locsep$uc$locsep\"><b>".substr($c,0,$_SESSION['lsiz'])."</b></a>";
 					}
-					echo "<a href=\"Devices-List.php?ina=location&opa=regexp&sta=%5E$ur$locsep$uc$locsep\"><b>".substr($c,0,$_SESSION['lsiz'])."</b></a>";
+					echo "</center></td>\n";
+					$col++;
 				}
-				echo "</center></td>\n";
-			        $col++;
 			}
 		}
 	}
@@ -668,56 +678,58 @@
 	echo "<table class=\"content fixed\"><tr>\n";
 
 	$col = 0;
-	ksort($dbuild[$r][$c]);
-	foreach (array_keys($dbuild[$r][$c]) as $b){
-		$nr =  $dbuild[$r][$c][$b]['nr'];
-		$nd =  $dbuild[$r][$c][$b]['nd'];
-		$mn = isset( $dbuild[$r][$c][$b]['mn']) ? $dbuild[$r][$c][$b]['mn'] : 0;
-		$al = isset( $dbuild[$r][$c][$b]['al']) ? $dbuild[$r][$c][$b]['al'] : 0;
-		$bi = BldImg($nd,$b);
-		list($statbg,$stat) = StatusBg($nd,$mn,$al,"imga");
-		$ub = urlencode($b);
-		if ($col == $_SESSION['col']){
-			$col = 0;
-			echo "</tr><tr>";
-		}
-	        echo "<td valign=\"top\" class=\"$statbg\">\n";
-	        $mstat = ($mn)?"$mn Monitored $stat":"";
-		if($siz){
-			echo "<center><a href=?reg=$ur&cty=$uc&bld=$ub><img src=\"img/$bi.png\" title=\"$nd Devices $mstat\"></a><br>".substr($b,0,$_SESSION['lsiz'])."\n";
-		}else{
-			$gmap = "$ub+$uc+$ur";
-			if($_SESSION['gmap']){
-				$ns = $ew = "";
-				$query	= GenQuery('locations','s','id,x,y,ns,ew,locdesc','','',array('region','city','building'),array('=','=','='),array($r,$c,$b),array('AND','AND'));
-				$res	= @DbQuery($query,$link);
-				if (@DbNumRows($res)){
-					list($id,$x,$y,$ns,$ew,$com) = @DbFetchRow($res);
-					$ns /= 10000000;
-					$ew /= 10000000;
-				}
-				$s = ($_SESSION['gsiz'] < 3)?"160x120":"240x160";
-				if($ns and $ew){
-					echo "<center><a href=?reg=$ur&cty=$uc&bld=$ub><img src=\"http://maps.google.com/maps/api/staticmap?zoom=16&size=$s&maptype=roadmap&sensor=false&markers=color:".((strpos($bi,"r"))?"red":"brown")."%7C$ns,$ew\" title=\"$nd Devices $mstat, $com\" style=\"border:1px solid black\"></a><br>\n";
-					$gmap = "$ns,$ew";
-				}else{
-					echo "<center><a href=?reg=$ur&cty=$uc&bld=$ub><img src=\"http://maps.google.com/maps/api/staticmap?center=$ub+$uc+$ur&zoom=16&size=$s&maptype=roadmap&sensor=false\" title=\"$nd Devices $mstat\" style=\"border:1px solid black\"></a><br>\n";
-				}
-				echo "<a href=\"http://maps.google.com/maps?q=$gmap\" target=\"window\"><img src=\"img/16/map.png\" title=\"Google Maps\"></a>\n";
+	if ( is_array($dbuild[$r][$c]) ){
+		ksort($dbuild[$r][$c]);
+		foreach (array_keys($dbuild[$r][$c]) as $b){
+			$nr =  $dbuild[$r][$c][$b]['nr'];
+			$nd =  $dbuild[$r][$c][$b]['nd'];
+			$mn = isset( $dbuild[$r][$c][$b]['mn']) ? $dbuild[$r][$c][$b]['mn'] : 0;
+			$al = isset( $dbuild[$r][$c][$b]['al']) ? $dbuild[$r][$c][$b]['al'] : 0;
+			$bi = BldImg($nd,$b);
+			list($statbg,$stat) = StatusBg($nd,$mn,$al,"imga");
+			$ub = urlencode($b);
+			if ($col == $_SESSION['col']){
+				$col = 0;
+				echo "</tr><tr>";
+			}
+			echo "<td valign=\"top\" class=\"$statbg\">\n";
+			$mstat = ($mn)?"$mn Monitored $stat":"";
+			if($siz){
+				echo "<center><a href=?reg=$ur&cty=$uc&bld=$ub><img src=\"img/$bi.png\" title=\"$nd Devices $mstat\"></a><br>".substr($b,0,$_SESSION['lsiz'])."\n";
 			}else{
-				echo "<center><a href=?reg=$ur&cty=$uc&bld=$ub><img src=\"img/$bi.png\" title=\"$nd Devices $mstat\"></a>\n";
-				if($nr > 1){
-					echo "<img src=\"img/rtr2.png\" title=\"$nr routers\">";
-				}elseif($nr == 1){
-					echo "<img src=\"img/rtr1.png\" title=\"1 router\">";
+				$gmap = "$ub+$uc+$ur";
+				if($_SESSION['gmap']){
+					$ns = $ew = "";
+					$query	= GenQuery('locations','s','id,x,y,ns,ew,locdesc','','',array('region','city','building'),array('=','=','='),array($r,$c,$b),array('AND','AND'));
+					$res	= @DbQuery($query,$link);
+					if (@DbNumRows($res)){
+						list($id,$x,$y,$ns,$ew,$com) = @DbFetchRow($res);
+						$ns /= 10000000;
+						$ew /= 10000000;
+					}
+					$s = ($_SESSION['gsiz'] < 3)?"160x120":"240x160";
+					if($ns and $ew){
+						echo "<center><a href=?reg=$ur&cty=$uc&bld=$ub><img src=\"http://maps.google.com/maps/api/staticmap?zoom=16&size=$s&maptype=roadmap&sensor=false&markers=color:".((strpos($bi,"r"))?"red":"brown")."%7C$ns,$ew\" title=\"$nd Devices $mstat, $com\" style=\"border:1px solid black\"></a><br>\n";
+						$gmap = "$ns,$ew";
+					}else{
+						echo "<center><a href=?reg=$ur&cty=$uc&bld=$ub><img src=\"http://maps.google.com/maps/api/staticmap?center=$ub+$uc+$ur&zoom=16&size=$s&maptype=roadmap&sensor=false\" title=\"$nd Devices $mstat\" style=\"border:1px solid black\"></a><br>\n";
+					}
+					echo "<a href=\"http://maps.google.com/maps?q=$gmap\" target=\"window\"><img src=\"img/16/map.png\" title=\"Google Maps\"></a>\n";
+				}else{
+					echo "<center><a href=?reg=$ur&cty=$uc&bld=$ub><img src=\"img/$bi.png\" title=\"$nd Devices $mstat\"></a>\n";
+					if($nr > 1){
+						echo "<img src=\"img/rtr2.png\" title=\"$nr routers\">";
+					}elseif($nr == 1){
+						echo "<img src=\"img/rtr1.png\" title=\"1 router\">";
+					}
+					echo "<br>";
+					echo "<a href=\"Topology-Map.php?mod=f&fmt=png&ina=location&opa=regexp&sta=%5E$ur$locsep$uc$locsep$ub$locsep\"><img src=\"img/16/paint.png\" title=\"Topology-Map\"></a>\n";				
 				}
-				echo "<br>";
-				echo "<a href=\"Topology-Map.php?mod=f&fmt=png&ina=location&opa=regexp&sta=%5E$ur$locsep$uc$locsep$ub$locsep\"><img src=\"img/16/paint.png\" title=\"Topology-Map\"></a>\n";				
+				echo "<a href=\"Devices-List.php?ina=location&opa=regexp&sta=%5E$ur$locsep$uc$locsep$ub$locsep\" valign=\"bottom\"><b>".substr($b,0,$_SESSION['lsiz'])."</b></a>";
 			}
-			echo "<a href=\"Devices-List.php?ina=location&opa=regexp&sta=%5E$ur$locsep$uc$locsep$ub$locsep\" valign=\"bottom\"><b>".substr($b,0,$_SESSION['lsiz'])."</b></a>";
+			echo "</center></td>\n";
+			$col++;
 		}
-		echo "</center></td>\n";
-		$col++;
 	}
 	echo "</tr></table>\n";
 }
@@ -788,15 +800,16 @@
 
 	global $nonlbl;
 
-	if($srv == "ping")	{$img =  "relo";}
-	elseif($srv == "uptime"){$img =  "clock";}
-	elseif($srv == "http")	{$img =  "glob";}
-	elseif($srv == "https")	{$img =  "glok";}
-	elseif($srv == "telnet"){$img =  "loko";}
-	elseif($srv == "ssh")	{$img =  "lokc";}
-	elseif($srv == "mysql")	{$img =  "db";}
-	elseif($srv == "cifs")	{$img =  "nwin";}
-	elseif($srv == "")	{$img =  "bcls";$srv = $nonlbl;}
+	if($srv == "ping")		{$img =  "relo";}
+	elseif($srv == "uptime")	{$img =  "clock";}
+	elseif($srv == "http")		{$img =  "glob";}
+	elseif($srv == "https")		{$img =  "glok";}
+	elseif($srv == "telnet")	{$img =  "loko";}
+	elseif($srv == "ssh")		{$img =  "lokc";}
+	elseif($srv == "mysql")		{$img =  "db";}
+	elseif($srv == "postgresql")	{$img =  "db";}
+	elseif($srv == "cifs")		{$img =  "nwin";}
+	elseif($srv == "")		{$img =  "bcls";$srv = $nonlbl;}
 	else{$img =  "bbox";}
 
 	return "<img src=\"img/16/$img.png\" title=\"Monitor: $srv\">";
--- nedi-std/html/inc/librep.php	2012-02-11 04:14:24.000000000 -0800
+++ nedi-gw/html/inc/librep.php	2012-04-12 20:11:34.000000000 -0700
@@ -354,7 +354,8 @@
 		$ocol = 'cnt desc';
 		$srt = "$srtlbl: $numlbl";
 	}
-	$query	= GenQuery('devices','g','serial;type,icon;cnt>1',$ocol,$lim,array('CHAR_LENGTH(serial)',$ina),array('>',$opa),array('2',$sta),array('AND'));
+	# Using "cnt>1" as the HAVING clause is not portable; PostgreSQL (stupidly) won't accept it.
+	$query	= GenQuery('devices','g','serial;type,icon;count(*)>1',$ocol,$lim,array('CHAR_LENGTH(serial)',$ina),array('COL >',$opa),array(2,$sta),array('AND'));
 	$res = @DbQuery($query,$link);
 	if($res){
 		$row = 0;
@@ -389,7 +390,8 @@
 		$ocol = 'cnt desc';
 		$srt = "$srtlbl: $numlbl";
 	}
-	$query	= GenQuery('modules','g','modules.serial;model,moddesc;cnt>1',$ocol,$lim,array('CHAR_LENGTH(modules.serial)',$ina),array('>',$opa),array('2',$sta),array('AND'),'LEFT JOIN devices USING (device)');
+	# Using "cnt>1" as the HAVING clause is not portable; PostgreSQL (stupidly) won't accept it.
+	$query	= GenQuery('modules','g','modules.serial;model,moddesc;count(*)>1',$ocol,$lim,array('CHAR_LENGTH(modules.serial)',$ina),array('COL >',$opa),array(2,$sta),array('AND'),'LEFT JOIN devices USING (device)');
 	$res = @DbQuery($query,$link);
 	if($res){
 		$row = 0;
@@ -415,7 +417,7 @@
 // List duplicate device IPs
 function DevDupIP($ina,$opa,$sta,$lim,$ord){
 
-	global $link,$modgroup,$self,$srtlbl,$manlbl,$orilbl,$numlbl,$duplbl,$totlbl;
+	global $link,$modgroup,$self,$srtlbl,$adrlbl,$manlbl,$orilbl,$numlbl,$duplbl,$totlbl;
 ?>
 <table class="full fixed"><tr><td class="helper">
 
@@ -429,12 +431,13 @@
 <?
 	if($ord){
 		$ocol = 'devip';
-		$srt = "$srtlbl: Serial";
+		$srt = "$srtlbl: IP $adrlbl";
 	}else{
 		$ocol = 'cnt desc';
 		$srt = "$srtlbl: $numlbl";
 	}
-	$query	= GenQuery('devices','g','devip;type,icon;cnt>1',$ocol,$lim,array('devip',$ina),array('>',$opa),array('0',$sta),array('AND'));
+	# Using "cnt>1" as the HAVING clause is not portable; PostgreSQL (stupidly) won't accept it.
+	$query	= GenQuery('devices','g','devip;type,icon;count(*)>1',$ocol,$lim,array('devip',$ina),array('>',$opa),array('0',$sta),array('AND'));
 	$res = @DbQuery($query,$link);
 	if($res){
 		$row = 0;
@@ -463,12 +466,13 @@
 <?
 	if($ord){
 		$ocol = 'origip';
-		$srt = "$srtlbl: Serial";
+		$srt = "$srtlbl: IP $adrlbl";
 	}else{
 		$ocol = 'cnt desc';
 		$srt = "$srtlbl: $numlbl";
 	}
-	$query	= GenQuery('devices','g','origip;type,icon;cnt>1',$ocol,$lim,array('origip',$ina),array('>',$opa),array('0',$sta),array('AND'));
+	# Using "cnt>1" as the HAVING clause is not portable; PostgreSQL (stupidly) won't accept it.
+	$query	= GenQuery('devices','g','origip;type,icon;count(*)>1',$ocol,$lim,array('origip',$ina),array('>',$opa),array('0',$sta),array('AND'));
 	$res = @DbQuery($query,$link);
 	if($res){
 		$row = 0;
@@ -873,7 +877,8 @@
 	}else{
 		$ocol = 'avg desc';
 	}
-	$query	= GenQuery('incidents','a','grp;(end - start)/60',$ocol,$lim,array('end',$ina),array('>',$opa),array('0',$sta),array('AND'),'LEFT JOIN devices USING (device)');
+	$end = DbEscapeIdentifier('end');
+	$query	= GenQuery('incidents','a',"grp;($end - start)/60",$ocol,$lim,array('end',$ina),array('>',$opa),array('0',$sta),array('AND'),'LEFT JOIN devices USING (device)');
 	$res = @DbQuery($query,$link);
 	if($res){
 		$row = 0;
@@ -1127,9 +1132,9 @@
 </tr>
 <?
 	if($opt){
-		$query	= GenQuery('interfaces','g','device;sum(inoct>"71") AS actif,round(sum(inoct>"71")/count(*)*100) AS usedif,contact,location,icon','usedif desc',$lim,array('iftype','services',$ina),array('regexp','COL &',$opa),array('6|117','2',$sta),array('AND','AND'),'LEFT JOIN devices USING (device)');
+		$query	= GenQuery('interfaces','g','device;sum(case when inoct>71 then 1 else 0 end) AS actif,round(sum(case when inoct>71 then 1 else 0 end)*100.0/count(*)) AS usedif,contact,location,icon','usedif desc',$lim,array('iftype','services',$ina),array('string regexp','COL & 2 =',$opa),array('^(6|117)$',2,$sta),array('AND','AND'),'LEFT JOIN devices USING (device)');
 	}else{
-		$query	= GenQuery('interfaces','g','device;sum(inoct>"71") AS actif,round(sum(inoct>"71")/count(*)*100) AS usedif,contact,location,icon','usedif desc',$lim,array($ina),array($opa),array($sta),'','LEFT JOIN devices USING (device)');
+		$query	= GenQuery('interfaces','g','device;sum(case when inoct>71 then 1 else 0 end) AS actif,round(sum(case when inoct>71 then 1 else 0 end)*100.0/count(*)) AS usedif,contact,location,icon','usedif desc',$lim,array($ina),array($opa),array($sta),'','LEFT JOIN devices USING (device)');
 	}
 	$res = @DbQuery($query,$link);
 	if($res){
@@ -1161,9 +1166,9 @@
 </tr>
 <?
 	if($opt){
-		$query	= GenQuery('interfaces','g','device;sum(inoct>"71") AS actif,round(sum(inoct>"71")/count(*)*100) AS usedif,contact,location,icon','usedif',$lim,array('iftype','services',$ina),array('regexp','COL &',$opa),array('6|117','2',$sta),array('AND','AND'),'LEFT JOIN devices USING (device)');
+		$query	= GenQuery('interfaces','g','device;sum(case when inoct>71 then 1 else 0 end) AS actif,round(sum(case when inoct>71 then 1 else 0 end)*100.0/count(*)) AS usedif,contact,location,icon','usedif',$lim,array('iftype','services',$ina),array('string regexp','COL & 2 =',$opa),array('^(6|117)$',2,$sta),array('AND','AND'),'LEFT JOIN devices USING (device)');
 	}else{
-		$query	= GenQuery('interfaces','g','device;sum(inoct>"71") AS actif,round(sum(inoct>"71")/count(*)*100) AS usedif,contact,location,icon','usedif',$lim,array($ina),array($opa),array($sta),'','LEFT JOIN devices USING (device)');
+		$query	= GenQuery('interfaces','g','device;sum(case when inoct>71 then 1 else 0 end) AS actif,round(sum(case when inoct>71 then 1 else 0 end)*100.0/count(*)) AS usedif,contact,location,icon','usedif',$lim,array($ina),array($opa),array($sta),'','LEFT JOIN devices USING (device)');
 	}
 	$res = @DbQuery($query,$link);
 	if($res){
@@ -1284,6 +1289,7 @@
 //===================================================================
 // Interface Charts
 // *800 at the end to avoid potential overflow due to very big numbers (might help?)
+// FIX LATER:  probably better is to use *800.0 (floating point literal) early on, to force the full calculation to run as floating point
 function IntChart($mode,$dir,$ina,$opa,$sta,$lim,$ord){
 
 	global $link,$modgroup,$self,$trflbl,$errlbl,$inblbl,$oublbl,$rrdstep,$srtlbl,$loclbl,$locsep,$conlbl,$tim;
@@ -1299,10 +1305,12 @@
 		if($dir){
 			$ti = "$errlbl $inblbl";
 			$di = 'brup';
+			# This presumes that if dinerr>0, then dinoct>0 as well, to avoid a divide-by-zero error.
 			$qy = GenQuery('interfaces','s',"device,contact,location,icon,ifname,speed,iftype,comment,alias,dinerr as aval,dinerr/dinoct as rval",$ocol,$lim,array('iftype','dinerr',$ina),array('!=','>',$opa),array('71',0,$sta),array('AND','AND'),'LEFT JOIN devices USING (device)');
 		}else{
 			$ti = "$errlbl $oublbl";
 			$di = 'brdn';
+			# This presumes that if douterr>0, then doutoct>0 as well, to avoid a divide-by-zero error.
 			$qy = GenQuery('interfaces','s',"device,contact,location,icon,ifname,speed,iftype,comment,alias,douterr as aval,douterr/doutoct as rval",$ocol,$lim,array('iftype','douterr',$ina),array('!=','>',$opa),array('71',0,$sta),array('AND','AND'),'LEFT JOIN devices USING (device)');
 		}
 	}else{
@@ -1656,7 +1664,7 @@
 		$ocol = "moddesc";
 		$srt = "$srtlbl: Supply $typlbl";
 	}else{
-		$ocol = "abs(hw)";
+		$ocol = 'abs('.DbStringAsNumeric('hw').')';
 		$srt = "$srtlbl: $stalbl";
 	}
 	$query	= GenQuery('modules','s','modules.*,location,contact,icon',$ocol,$lim,array('model',$ina),array('=',$opa),array('Printsupply',$sta),array('AND'),'LEFT JOIN devices USING (device)');
@@ -1711,7 +1719,7 @@
 		$ocol = "cnt desc";
 		$srt = "$srtlbl: $poplbl";
 	}
-	$query	= GenQuery('modules','g','device;sum(modules.serial) as cpu,sum(fw)/1000 as mem,location,contact,icon',$ocol,$lim,array('model',$ina),array('=',$opa),array('VM-ESX',$sta),array('AND'),'LEFT JOIN devices USING (device)');
+	$query	= GenQuery('modules','g','device;sum('.DbStringAsNumeric('modules.serial').') as cpu,sum('.DbStringAsNumeric('fw').')/1000 as mem,location,contact,icon',$ocol,$lim,array('model',$ina),array('=',$opa),array('VM-ESX',$sta),array('AND'),'LEFT JOIN devices USING (device)');
 	$res	= @DbQuery($query,$link);
 	if($res){
 		$row = 0;
@@ -1766,7 +1774,9 @@
 	$areg	= array();
 	$acty	= array();
 	$abld	= array();
-	$query	= GenQuery('monitoring','s','name,test,ok/(lost+ok)*100 as relav,location,contact,class,icon',$ocol,$lim,array('(ok','lost',$ina),array('COL >','COL >',$opa),array('0','0)',$sta),array('OR','AND'),'LEFT JOIN devices USING (device)'); # Horrible workaround to solve (x OR y) AND z precedence!
+	# The original "horrible workaround to solve (x OR y) AND z precedence" has been replaced with a construction
+	# that is still a bit odd but cleaner, that allows column names to be properly quoted within GenQuery().
+	$query	= GenQuery('monitoring','s','name,test,ok/(lost+ok)*100 as relav,location,contact,class,icon',$ocol,$lim,array(' ','ok','lost',' ',$ina),array('COL ','COL >','COL >','COL ',$opa),array(' ', '0','0',' ',$sta),array('(','OR',')','AND'),'LEFT JOIN devices USING (device)');
 	$res	= @DbQuery($query,$link);
 	if($res){
 		$row = 0;
@@ -1881,10 +1891,10 @@
 		$srt = "$srtlbl: $msglbl";
 	}
 	if($opt){
-		$query	= GenQuery('events','g','source;location,contact,class,icon,sum(level="10"),sum(level="50"),sum(level="100"),sum(level="150"),sum(level="200"),sum(level="250")',$ocol,$lim,array('class',$ina),array('regexp',$opa),array('dev|node',$sta),array('AND'),'LEFT JOIN devices USING (device)');
+		$query	= GenQuery('events','g','source;location,contact,class,icon,sum(case when level=10 then 1 else 0 end),sum(case when level=50 then 1 else 0 end),sum(case when level=100 then 1 else 0 end),sum(case when level=150 then 1 else 0 end),sum(case when level=200 then 1 else 0 end),sum(case when level=250 then 1 else 0 end)',$ocol,$lim,array('class',$ina),array('regexp',$opa),array('dev|node',$sta),array('AND'),'LEFT JOIN devices USING (device)');
 	}else{
 		$ico = "32/fogy";
-		$query	= GenQuery('events','g','source;location,contact,class,icon,sum(level="10"),sum(level="50"),sum(level="100"),sum(level="150"),sum(level="200"),sum(level="250")',$ocol,$lim,array($ina),array($opa),array($sta),'','LEFT JOIN devices USING (device)');
+		$query	= GenQuery('events','g','source;location,contact,class,icon,sum(case when level=10 then 1 else 0 end),sum(case when level=50 then 1 else 0 end),sum(case when level=100 then 1 else 0 end),sum(case when level=150 then 1 else 0 end),sum(case when level=200 then 1 else 0 end),sum(case when level=250 then 1 else 0 end)',$ocol,$lim,array($ina),array($opa),array($sta),'','LEFT JOIN devices USING (device)');
 	}
 	$res	= @DbQuery($query,$link);
 	if($res){
@@ -2061,7 +2071,7 @@
 					$devs[$dnet][$n[0]] = "$n[1]  $vrf<span class=\"prp\">hostroute</span>";
 				}else{
 					$devs[$dnet][$n[0]] = "$n[1]  $vrf<span class=\"blu\">mask base</span>";
-					$nquery	= GenQuery('nodes','s','count(*),round(avg(lastseen + 1 - firstseen)/86400)','','',array("nodip & $n[3]"),array('='),array($dnet) ); # add 1 sec to avoid ridiculous numbers on swift nodes
+					$nquery	= GenQuery('nodes','s','count(*),round(avg(lastseen + 1 - firstseen)/86400)','','',array('nodip'),array("& $n[3] ="),array($dnet) ); # add 1 sec to avoid ridiculous numbers on swift nodes
 					$nodres	= @DbQuery($nquery,$link);
 					$no	= @DbFetchRow($nodres);
 					$pop[$dnet] = ($no[0])?$no[0]:0;
@@ -2152,7 +2162,7 @@
 				if( !array_key_exists($dnet,$netok) ){			# Only if subnet hasn't been processed 
 					$netok[$dnet] = 1;
 					$nod[$dnet] = array();
-					$nquery	= GenQuery('nodes','s','name,inet_ntoa(nodip)','nodip','',array("nodip & $n[3]"),array('='),array(sprintf("%u",$n[2] & $n[3])) );
+					$nquery	= GenQuery('nodes','s','name,inet_ntoa(nodip)','nodip','',array('nodip'),array("& $n[3] ="),array(sprintf("%u",$n[2] & $n[3])) );
 					$nres	= @DbQuery($nquery,$link);
 					if ($nres) {
 						while( ($no = @DbFetchRow($nres)) ){
@@ -2283,9 +2293,9 @@
 	foreach ( array_keys($nodup) as $d ){
 		if ($row % 2){$bg = "txta"; $bi = "imga";}else{$bg = "txtb"; $bi = "imgb";}
 		$row++;
-		$fd   = urlencode(date("m/d/Y H:i:s",$d));
+		$fd   = urlencode(($d != '') ? date("m/d/Y H:i:s",$d) : '');
 		echo "<tr class=\"$bg\" onmouseover=\"this.className='imga'\" onmouseout=\"this.className='$bg'\">\n";
-		echo "<td class=\"$bi\"><b>".date($_SESSION['date'],$d)."</b></td><td>\n";
+		echo "<td class=\"$bi\"><b>".(($d != '') ? date($_SESSION['date'],$d) : '')."</b></td><td>\n";
 		if( array_key_exists('fs',$nodup[$d]) ){echo Bar($nodup[$d]['fs'],"lvl50",'mi')." <a href=\"Nodes-List.php?ina=firstseen&opa==&sta=$fd\" title=\"Node $lstlbl\">".$nodup[$d]['fs']."</a>";}
 		echo "</td><td>\n";
 		if( array_key_exists('ls',$nodup[$d]) ){echo Bar($nodup[$d]['ls'],"lvl250",'mi')." <a href=\"Nodes-List.php?ina=lastseen&opa==&sta=$fd\" title=\"Node $lstlbl\">".$nodup[$d]['ls']."</a>";}
@@ -2429,7 +2439,10 @@
 // List duplicate Nodes
 function NodDup($ina,$opa,$sta,$lim,$ord){
 
-	global $link,$modgroup,$self,$srtlbl,$manlbl,$namlbl,$numlbl,$duplbl,$typlbl,$totlbl;
+	global $link,$modgroup,$self,$srtlbl,$manlbl,$namlbl,$maxlbl,$adrlbl,$numlbl,$duplbl,$typlbl,$totlbl;
+
+	# If we're going to allow an alternate sort by the IP Address field, then we ought
+	# to display it so there is on-screen evidence of what the sort order really is.
 ?>
 <table class="full fixed"><tr><td class="helper">
 
@@ -2437,23 +2450,25 @@
 
 <table class="content"><tr class="<?=$modgroup[$self]?>2">
 <th width="120"><img src="img/16/abc.png"><br><?=$namlbl?></th>
+<th><img src="img/16/net.png"><br><?=$maxlbl?> IP <?=$adrlbl?></th>
 <th><img src="img/16/nods.png"><br>Nodes</th></tr>
 <?
 	if($ord){
-		$ocol = 'devip';
-		$srt = "$srtlbl: $namlbl";
+		$ocol = 'max('.DbEscapeIdentifier(devip).')';
+		$srt = "$srtlbl: $maxlbl IP $adrlbl";
 	}else{
 		$ocol = 'cnt desc';
 		$srt = "$srtlbl: $numlbl";
 	}
-	$query	= GenQuery('nodes','g','name;oui;cnt>1',$ocol,$lim,array('CHAR_LENGTH(name)',$ina),array('>',$opa),array('1',$sta),array('AND'),'LEFT JOIN devices USING (device)');
+	# Using "cnt>1" as the HAVING clause is not portable; PostgreSQL (stupidly) won't accept it.
+	$query	= GenQuery('nodes','g',"name;inet_ntoa(max(devip)),devip;count(*)>1",$ocol,$lim,array('CHAR_LENGTH(name)',$ina),array('COL >',$opa),array(1,$sta),array('AND'),'LEFT JOIN devices USING (device)');
 	$res = @DbQuery($query,$link);
 	if($res){
 		$row = 0;
 		while( $r = @DbFetchRow($res) ){
 			if ($row % 2){$bg = "txta"; $bi = "imga";}else{$bg = "txtb"; $bi = "imgb";}
 			$row++;
-			echo "<tr class=\"$bg\"><td>$r[0]</td><td>";
+			echo "<tr class=\"$bg\"><td>$r[0]</td><td>$r[2]</td><td>";
 			echo Bar($r[1],0)." <a href=\"Nodes-List.php?ina=name&opa==&sta=$r[0]\">$r[1]</a></td></tr>\n";
 		}
 	}
@@ -2479,7 +2494,8 @@
 		$ocol = 'cnt desc';
 		$srt = "$srtlbl: Nodes";
 	}
-	$query	= GenQuery('nodes','g','mac,vlanid;oui;cnt>1',$ocol,$lim,array($ina),array($opa),array($sta),'','LEFT JOIN devices USING (device)');
+	# Using "cnt>1" as the HAVING clause is not portable; PostgreSQL (stupidly) won't accept it.
+	$query	= GenQuery('nodes','g','mac,vlanid;oui;count(*)>1',$ocol,$lim,array($ina),array($opa),array($sta),'','LEFT JOIN devices USING (device)');
 	$res = @DbQuery($query,$link);
 	if($res){
 		$row = 0;
@@ -2649,7 +2665,7 @@
 	global $link,$modgroup,$self,$rrdstep,$stco,$sumlbl,$srtlbl,$venlbl,$numlbl,$alllbl,$chglbl,$totlbl,$deslbl,$fislbl,$laslbl,$emplbl,$namlbl,$metlbl,$nonlbl,$loslbl,$qutlbl,$faslbl,$vallbl,$mullbl;
 
 	$lasdis = time() - $rrdstep * 2;
-	$query	= GenQuery('nodes','s',"count(*),sum(nodip = 0),sum(name = \"\"),sum(firstseen=lastseen),sum(iplost > 0),sum(ifmetric < 256),sum(firstseen > $lasdis),sum(lastseen > $lasdis),sum(ipchanges > 0),sum(ifchanges > 0),sum(arpval > 1)",'','',array($ina),array($opa),array($sta),'','LEFT JOIN devices USING (device)');
+	$query	= GenQuery('nodes','s',"count(*),sum(case when nodip = 0 then 1 else 0 end),sum(case when name = '' then 1 else 0 end),sum(case when firstseen = lastseen then 1 else 0 end),sum(case when iplost > 0 then 1 else 0 end),sum(case when ifmetric < 256 then 1 else 0 end),sum(case when firstseen > $lasdis then 1 else 0 end),sum(case when lastseen > $lasdis then 1 else 0 end),sum(case when ipchanges > 0 then 1 else 0 end),sum(case when ifchanges > 0 then 1 else 0 end),sum(case when arpval > 1 then 1 else 0 end)",'','',array($ina),array($opa),array($sta),'','LEFT JOIN devices USING (device)');
 	$res	= @DbQuery($query,$link);
 	if ($res) {
 		$r = @DbFetchRow($res);
--- nedi-std/html/index.php	2012-02-11 04:14:22.000000000 -0800
+++ nedi-gw/html/index.php	2012-04-20 22:27:34.000000000 -0700
@@ -69,7 +69,7 @@
 				case RADIUS_ACCESS_ACCEPT:
 					$query	= GenQuery('users','s','*','','',array('user'),array('='),array($_POST['user']) );
 					$res    = @DbQuery($query,$link);
-					$uok	= mysql_num_rows($res);
+					$uok	= DbNumRows($res);
 					break;
 				case RADIUS_ACCESS_REJECT:
 					$raderr = "Incorrect RADIUS login!";
--- nedi-std/html/languages/english/Devices-Config.html	2012-02-11 04:14:26.000000000 -0800
+++ nedi-gw/html/languages/english/Devices-Config.html	2012-04-13 11:35:48.000000000 -0700
@@ -24,7 +24,7 @@
 <h3>Compare</h3>
 <ol>
 <li>Choose a reference device from the "List" selectbox. 
-<li>Now either select the 2nd device from the left selectbox in "Comparison" or leave it at -Type- (This will list all configs of the same type) and select how the output should be rendered.
+<li>Now either select the 2nd device from the left selectbox in "Comparison" or leave it at -Type- (this will list all configs of the same type) and select how the output should be rendered.
 </ol>
 
 <h2>Details</h2>
--- nedi-std/html/languages/english/Devices-Doctor.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/Devices-Doctor.html	2012-04-13 11:36:25.000000000 -0700
@@ -12,7 +12,7 @@
 </div>
 
 <h2>Introduction</h2>
-Present device specific diagnostic reports and point out potential problems. Alternatively you can select a config which will be presented as a general summary.
+Present device specific diagnostic reports and point out potential problems. Alternatively, you can select a config which will be presented as a general summary.
 
 <h2>Usage</h2>
 <h3>List</h3>
@@ -27,8 +27,8 @@
 <ul>
 <li>Red letters on a yellow background reveal potential problems (hover over it, to learn why).
 <li>Adjust the broadcast/traffic ratio (default 10%) to identify problems on interfaces.
-<li>Green lines mean that a checked contition looks ok.
-<li>Darkred an Olivegreen letters represent interface status in the respective context.
+<li>Green lines mean that a checked condition looks ok.
+<li>Darkred and Olivegreen letters represent interface status in the respective context.
 </ul>
 
 <div id="footer">Remo Rickli 2011</div>
--- nedi-std/html/languages/english/Devices-Graph.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/Devices-Graph.html	2012-04-13 11:27:10.000000000 -0700
@@ -13,7 +13,7 @@
 <h2>Introduction</h2>
 The heart of your graphing pleasures allows you to dynamically generate stacked interface graphs on the fly.
 <h4>Important!</h4>
-Please note that NeDi's graphing feature was implemented as an addition at lowest possible resource and maintenance cost. It will not graph those 5 minute peaks, but provide a longterm view on each and every interface (or system stats) based on your discovery schedule. This translates to baselining and prediction of potential bottlenecks, instead of identifying erratic outbursts of any kind (You'd prefer using a tool like Cacti to monitor this stuff instead).
+Please note that NeDi's graphing feature was implemented as an addition at lowest possible resource and maintenance cost. It will not graph those 5 minute peaks, but provides a longterm view on each and every interface (or system stats) based on your discovery schedule. This translates to baselining and prediction of potential bottlenecks, instead of identifying erratic outbursts of any kind (you'd prefer using a tool like Cacti to monitor this stuff instead).
 
 <h2>Usage</h2>
 <ul>
@@ -22,7 +22,7 @@
 <li>System related graphs are CPU, Memory and Temperature and a custom graph for other values.
 <li>Use arrows to move start, end or the graph itself by days (blue) and weeks (green). Click on a date icon to manually set a time.
 <li>If you can't live without degrees Fahrenheit, check it in User-Profile.
-<li>If you use Cacti on the same host, set $cacticli in html/inc/libmisc.php to easily add graphs...
+<li>If you use Cacti on the same host, set cacticli in nedi.conf to easily add graphs ...
 </ul>
 
 <div id="footer">Remo Rickli 2011</div>
--- nedi-std/html/languages/english/Devices-Interfaces.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/Devices-Interfaces.html	2012-04-13 11:28:20.000000000 -0700
@@ -19,9 +19,9 @@
 
 The following filter methods are available to narrow down your search:
 <ol>
-<li>1 criteria matching a column within Condition A (leaving Operator at A only).
-<li>2 criterias like above, but logically combined with Operator.
-<li>Alternatively you can compare 2 columns directly by using a combination with "col" (To find interfaces where inbound traffic equals inbound errors for example).
+<li>1 criterion matching a column within Condition A (leaving Operator at A only).
+<li>2 criteria like above, but logically combined with Operator.
+<li>Alternatively, you can compare 2 columns directly by using a combination with "col" (to find interfaces where inbound traffic equals inbound errors, for example).
 </ol>
 
 <h2>Details</h2>
--- nedi-std/html/languages/english/Devices-List.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/Devices-List.html	2012-04-13 11:30:32.000000000 -0700
@@ -17,9 +17,9 @@
 <h2>Usage</h2>
 Simply click Show to list all devices or define the criteria as desired. There are 3 modes of filtering:
 <ol>
-<li>1 criteria matching a column within Condition A (leaving Operator at A only).
-<li>2 criterias like above, but logically combined with Operator.
-<li>Alternatively you can compare 2 columns directly by using a combination with "col" (To find devices where firstseen equals lastseen for example).
+<li>1 criterion matching a column within Condition A (leaving Operator at A only).
+<li>2 criteria like above, but logically combined with Operator.
+<li>Alternatively, you can compare 2 columns directly by using a combination with "col" (to find devices where firstseen equals lastseen, for example).
 <li>The selected devices can be added to the monitoring if you click the Monitor button. Go to Monitor-Setup to further configure them.
 </ol>
 
--- nedi-std/html/languages/english/Devices-Modules.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/Devices-Modules.html	2012-04-13 11:31:26.000000000 -0700
@@ -19,9 +19,9 @@
 
 The following filter methods are available to narrow down your search:
 <ol>
-<li>1 criteria matching a column within Condition A (leaving Operator at A only).
-<li>2 criterias like above, but logically combined with Operator.
-<li>Alternatively you can compare 2 columns directly by using a combination operatore with "col" (To find modules where type equals description for example).
+<li>1 criterion matching a column within Condition A (leaving Operator at A only).
+<li>2 criteria like above, but logically combined with Operator.
+<li>Alternatively, you can compare 2 columns directly by using a combination operatore with "col" (to find modules where type equals description, for example).
 </ol>
 
 <h2>Details</h2>
--- nedi-std/html/languages/english/Devices-Stock.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/Devices-Stock.html	2012-04-13 11:44:32.000000000 -0700
@@ -16,7 +16,7 @@
 
 <h2>Usage</h2>
 Simply use a bar code scanner (should send a "tab" upon successful reading) to scan type and serial number or enter them manually.
-Specify location, condition, source/provider and warranty, if you care. If the latter one has expired a red flag appears in the appropriate field.
+Specify location, condition, source/provider and warranty, if you care. If the latter one has expired, a red flag appears in the appropriate field.
 Select a link from any of the summaries to list individual items.<br>
 <p>
 If you list a certain type, the type field is populated as well for easier batch additions. The data you entered before overwrites will be used before the actual list value.
--- nedi-std/html/languages/english/Devices-Vlans.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/Devices-Vlans.html	2012-04-13 11:29:43.000000000 -0700
@@ -19,9 +19,9 @@
 
 The following filter methods are available to narrow down your search:
 <ol>
-<li>1 criteria matching a column within Condition A (leaving Operator at A only).
-<li>2 criterias like above, but logically combined with Operator.
-<li>Alternatively you can compare 2 columns directly by using a combination with "col" (To find vlans where vlanid equals vlan name for example).
+<li>1 criterion matching a column within Condition A (leaving Operator at A only).
+<li>2 criteria like above, but logically combined with Operator.
+<li>Alternatively, you can compare 2 columns directly by using a combination with "col" (to find vlans where vlanid equals vlan name, for example).
 </ol>
 
 <h2>Details</h2>
--- nedi-std/html/languages/english/Devices-Write.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/Devices-Write.html	2012-04-13 11:42:38.000000000 -0700
@@ -13,12 +13,12 @@
 
 <h2>Introduction</h2>
 
-<div class="code warn">This is a very helpful, but also ratherdangerous module!
-Always use with caution, because you could create a big mess rather quickly...
+<div class="code warn">This is a very helpful, but also rather dangerous module!
+Always use with caution, because you could create a big mess rather quickly ...
 </div>
 
 <h2>Usage</h2>
-Once you understand the filtering concept of Devices-List you should be able to pinpoint the group of devices you wish to access. (Note that only devices of the same operating system can be used at once).
+Once you understand the filtering concept of Devices-List you should be able to pinpoint the group of devices you wish to access. (Note that only devices of the same operating system can be used at once.)
 <p>
 Additionally you'll have to specify the desired commands. On IOS or similar devices you can use the Interface Configuration section (to the right) to generate ranges of commands.
 <p>
@@ -33,7 +33,7 @@
 A couple pointers for the setup:
 <ul>
 <li>Make sure you adjust GUI authentication (towards the end of nedi.conf) to fit your needs.
-<li>If you're unsure about it, delete html/inc/Devsend.pl to completely disable sending commands to devices!
+<li>If you're unsure about it, delete html/inc/devwrite.pl to completely disable sending commands to devices!
 </ul>
 <div id="footer">Remo Rickli 2011</div>
 </body>
--- nedi-std/html/languages/english/Monitoring-Events.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/Monitoring-Events.html	2012-04-13 13:34:13.000000000 -0700
@@ -13,16 +13,16 @@
 
 <h2>Introduction</h2>
 Incoming discovery or syslog events and snmp traps are (if enabled) gathered here. Several filter options allow you to examine problems very efficiently. Use the arrow keys (beneath show) to page around in your selection.
-Conditions involving criterias (e.g. location or contact) from the devices or interfaces (e.g. IF alias) table, cannot be used to delete nodes due to query restrictions!
+Conditions involving criteria (e.g. location or contact) from the devices or interfaces (e.g. IF alias) table, cannot be used to delete nodes due to query restrictions!
 
 <h2>Usage</h2>
 List device events by pressing the "Show" button.
 
 The following filter methods are available to narrow down your search:
 <ol>
-<li>1 criteria matching a column within Condition A (leaving Operator at A only).
-<li>2 criterias like above, but logically combined with Operator.
-<li>In addition you can specify which level you want to look at.
+<li>1 criterion matching a column within Condition A (leaving Operator at A only).
+<li>2 criteria like above, but logically combined with Operator.
+<li>In addition, you can specify which level you want to look at.
 <li>Click on the icons to get quick access to pre-defined message groups.
 </ol>
 
@@ -30,7 +30,7 @@
 <ul>
 <li>Knowledge about regexp is very helpful when working with this module!
 <li>You can save searches in Bookmarks.
-<li>The resulting SQL query can be shown using the cog icon, if logged in as admin. It links to Other-Export to generate CSV files or the likes.
+<li>The resulting SQL query can be shown using the cog icon, if logged in as admin. It links to Other-Export to generate CSV files or the like.
 </ul>
 
 <div id="footer">Remo Rickli 2011</div>
--- nedi-std/html/languages/english/Nodes-List.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/Nodes-List.html	2012-04-13 11:33:12.000000000 -0700
@@ -16,15 +16,15 @@
 <h4>Important!</h4>
 If you list available services, make sure you don't match too many nodes as it will take a long time to scan the open ports.
 <p>
-Conditions involving criterias (e.g. location or contact) from the devices or interfaces (e.g. IF alias) table, cannot be used to delete nodes due to query restrictions!
+Conditions involving criteria (e.g. location or contact) from the devices or interfaces (e.g. IF alias) table, cannot be used to delete nodes due to query restrictions!
 <h2>Usage</h2>
 List device Vlans by pressing the "Show" button. Use the "Display" select box to add or remove the columns you wish to see (Ctrl + Mouseclick).
 
 The following filter methods are available to narrow down your search:
 <ol>
-<li>1 criteria matching a column within Condition A (leaving Operator at A only).
-<li>2 criterias like above, but logically combined with Operator.
-<li>Alternatively you can compare 2 columns directly by using a combination with "col" (To find nodes where firstseen equals lastseen for example).
+<li>1 criterion matching a column within Condition A (leaving Operator at A only).
+<li>2 criteria like above, but logically combined with Operator.
+<li>Alternatively, you can compare 2 columns directly by using a combination with "col" (to find nodes where firstseen equals lastseen, for example).
 </ol>
 
 <h2>Details</h2>
--- nedi-std/html/languages/english/Nodes-Track.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/Nodes-Track.html	2012-04-13 13:26:25.000000000 -0700
@@ -11,11 +11,11 @@
 Nodes Track
 </div>
 <h2>Introduction</h2>
-Add Nodes to be tracked from Nodes List. You can then specify here, what criterias (e.g. node MAC address or IF alias) should be matched in order to detect differences.
-In case a node is tracked, an appropriate icon (the IF type otherwhise) is shown.
+Add Nodes to be tracked from Nodes List. You can then specify here, what criteria (e.g. node MAC address or IF alias) should be matched in order to detect differences.
+In case a node is tracked, an appropriate icon (the IF type otherwise) is shown.
 <p>
 <h2>Usage</h2>
-Select the columns you want to see. Use Configuration to set up the criterias. At this point only the status color will change based on this setting. Furthermore is tracking of multiple nodes per IF not supported yet.
+Select the columns you want to see. Use Configuration to set up the criteria. At this point only the status color will change based on this setting. Furthermore, tracking of multiple nodes per IF not supported yet.
 <div id="footer">Remo Rickli 2011</div>
 </body>
 
--- nedi-std/html/languages/english/Other-Defgen.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/Other-Defgen.html	2012-04-13 13:58:01.000000000 -0700
@@ -18,7 +18,7 @@
 <h3>Preparation</h3>
 You'd usually click on a sysobjid (type column) of an unknown device in Devices-List. This will add an IP address and SNMP community along with the sysobjid you wish to take care of. Alternatively you can add those values manually and click on the <img src="../../img/16/brld.png"> button to update the form.
 <p>
-In case there's an existing .def file in html/log already, it's values will be filled into the form. This should make it easy for you to improve existing definitions at a later stage. This comes in handy as well, when you copy a .def file from a similar device from sysobj to html/log/ (adjusting the sysobjid) to get your usnupported unit going.
+In case there's an existing .def file in html/log already, its values will be filled into the form. This should make it easy for you to improve existing definitions at a later stage. This comes in handy as well, when you copy a .def file from a similar device from sysobj to html/log/ (adjusting the sysobjid) to get your unsupported unit going.
 
 <h3>Process</h3>
 Now you're ready to actually work in the .def file. You find templates to the right of each section, which suggest some OIDs. You can test them by clicking on the <img src="../../img/16/brgt.png"> <b>get</b> and <img src="../../img/16/bdwn.png"> <b>walk</b> button.
--- nedi-std/html/languages/english/Other-Plot.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/Other-Plot.html	2012-04-13 13:59:07.000000000 -0700
@@ -12,7 +12,7 @@
 </div>
 
 <h2>Introduction</h2>
-This is just a proof of concept module. It may eventually serve as a prototype visualize statistical information.
+This is just a proof of concept module. It may eventually serve as a prototype to visualize statistical information.
 <div id="footer">Remo Rickli 2007</div>
 </body>
 
--- nedi-std/html/languages/english/Reports-Combination.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/Reports-Combination.html	2012-04-13 13:27:45.000000000 -0700
@@ -21,7 +21,7 @@
 <li>Select graph(s) and their size you wish to include (if any).
 <li>Optionally include last map.
 <li>Increase the limit to see more results.
-<li>Check 'Alternative Sort' to sort keys rather than values or revers times.
+<li>Check 'Alternative Sort' to sort keys rather than values or reverse times.
 </ul>
 
 <div id="footer">Remo Rickli 2011</div>
--- nedi-std/html/languages/english/System-Files.html	2012-02-11 04:14:26.000000000 -0800
+++ nedi-gw/html/languages/english/System-Files.html	2012-04-13 13:40:03.000000000 -0700
@@ -13,7 +13,7 @@
 </div>
 
 <h2>Introduction</h2>
-This modules provides 3 major features:
+This modules provides four major features:
 <ol>
 <li> Edit/View system and configuration files.
 <li> Import SQL data or update NeDi itself.
@@ -29,12 +29,14 @@
 </ul>
 
 <h2>Import/Update</h2>
+<ul>
 <li> Upload a .sql.gz (packed) file which will replace the DB data. You can restore dumps created with System-Export.
-<ul> Upload a nedi.tgz archive and choose whether you whish to backup your existing config (check for compatibilty!).
+<li> Upload a nedi.tgz archive and choose whether you whish to backup your existing config (check for compatibilty!).
 </ul>
 
 <h2>Manage Files</h2>
-<ul> Upload files in the apropriate area. Files in html/log can be accessed directly by clicking on file name.
+<ul>
+<li> Upload files in the apropriate area. Files in html/log can be accessed directly by clicking on file name.
 <li> Delete files by clicking on the red X.
 </ul>
 
--- nedi-std/html/languages/english/System-NeDi.html	2012-02-11 04:14:26.000000000 -0800
+++ nedi-gw/html/languages/english/System-NeDi.html	2012-04-13 13:37:15.000000000 -0700
@@ -17,9 +17,9 @@
 
 <h2>Usage</h2>
 
-The module is divided in to the following parts:
+The module is divided into the following parts:
 <ol>
-<li>The default is --help, which will options and output legend. 
+<li>The default is --help, which will list an options and output legend. 
 <li>.def list shows all devices definitions available.
 <li>Discover will actually find devices.
 <li>Scan an ip for open ports.
--- nedi-std/html/languages/english/System-Services.html	2012-02-11 04:14:26.000000000 -0800
+++ nedi-gw/html/languages/english/System-Services.html	2012-04-13 13:54:20.000000000 -0700
@@ -16,7 +16,7 @@
 
 <h2>Usage</h2>
 Click on the Walk icon to stop or the grey X to start either monitoring, syslog,
- snmptrapd, freeradius or iperf. On the far right you see the discovery status and whether the node calculation is being performed this very instsant (nodelock).
+ snmptrapd, freeradius or iperf. On the far right you see the discovery status and whether the node calculation is being performed this very instant (nodelock).
 
 <h2>Details</h2>
 <ul>
@@ -27,11 +27,11 @@
 <h3>Threads</h3>
 Depending on the size and topology of your network, it makes sense to
 run several discoveries at the same time. Do this by dividing the network
-in a few sections using borders and different seedfiles. Then adapt your
+into a few sections using borders and different seedfiles. Then adapt your
 crontab accordingly.
 <p>
 At the end of a run the nodes table needs to be locked during calculation, 
-with that no other thread meddles with them. Furthermore should Top RRDs only
+so that no other thread meddles with them. Furthermore, Top RRDs should only
 be taken care of by the last thread or they're gonna look like Picassoes.
 <p>
 In case a discovery terminated unexpectedly or a nodelock hangs, you can reset it
--- nedi-std/html/languages/english/Topology-Linked.html	2012-02-11 04:14:26.000000000 -0800
+++ nedi-gw/html/languages/english/Topology-Linked.html	2012-04-13 14:05:05.000000000 -0700
@@ -19,7 +19,7 @@
 <li>Click 'Add' to create this and the reverse link.
 <li>Both links need to be deleted separately, if they're no longer required.
 <li>Select the link type, if you just want to see what's in the DB.
-<li>Select Isolated to identify links, whith no device in the DB.
+<li>Select Isolated to identify links with no device in the DB.
 </ul>
 
 
--- nedi-std/html/languages/english/Topology-Locations.html	2012-02-11 04:14:26.000000000 -0800
+++ nedi-gw/html/languages/english/Topology-Locations.html	2012-04-13 14:00:39.000000000 -0700
@@ -15,7 +15,7 @@
 
 <h2>Usage</h2>
 <ul>
-<li>Use the Location condition to search for region-city-building patterns (substitute the dash with your $locsep).
+<li>Use the Location condition to search for region-city-building patterns (substitute the dash with your locsep setting from nedi.conf).
 <li>If Google Maps integration is enabled in User-Profile, maps can be displayed as well. If the coordinates are available, labeled markers (label also shown with ID Column) with appropriate colors are drawn. Markers imitate the colors of the location icons, where as red buildings (see nedi.conf) are taken into account as well.
 <li>The execute column reveals easy access to other modules or Google Maps.
 <li>If photos (region-city-building[-floor[something]].jpg) are found in html/log they can be accessed in the Images column.
--- nedi-std/html/languages/english/Topology-Loced.html	2012-02-11 04:14:26.000000000 -0800
+++ nedi-gw/html/languages/english/Topology-Loced.html	2012-04-13 14:06:05.000000000 -0700
@@ -27,7 +27,7 @@
 <li>Without Google Maps integration enabled in User-Profile png backdrops can be edited. This can be leveraged with the geo map type in Topology-Maps.
 <li>At first you'll see the top level map, which is a world map by default (I'll change this as soon as we've got networks on other celestial bodies). If your network only spans one country, you may want to replace html/log/map-top.png to fit your needs.
 <li>Select a region an click on the map to set the coordinates. You'll notice that values are being populated and the 'Add' button becomes 'Update', if the location already exists.
-<li>Copy lower level maps to html/log (where map-top.png is). Let's say, your network sites are located in 2 regions (USA and Europe). Just name them map-USA.png and map-Europe.png. Now when you select cities in those regions, it should descent and the coordinates are referring to this map.
+<li>Copy lower level maps to html/log (where map-top.png is). Let's say, your network sites are located in 2 regions (USA and Europe). Just name them map-USA.png and map-Europe.png. Now when you select cities in those regions, it should descend and the coordinates are referring to this map.
 <li>This also works for cities (makes sense where you've got a big metropolitan network). Just create a map-Europe-Zurich.png in html/log and as soon as you click on buildings in Zurich you can place them into the metropolitan map.
 </ul>
 <div id="footer">Remo Rickli 2007</div>
--- nedi-std/html/languages/english/Topology-Networks.html	2012-02-11 04:14:26.000000000 -0800
+++ nedi-gw/html/languages/english/Topology-Networks.html	2012-04-13 11:49:52.000000000 -0700
@@ -20,16 +20,16 @@
 
 The following filter methods are available to narrow down your search:
 <ol>
-<li>1 criteria matching a column within Condition A (leaving Operator at A only).
-<li>2 criterias like above, but logically combined with Operator.
-<li>Alternatively you can compare 2 columns directly by using a combination operatore with "col" (To find modules where type equals description for example).
+<li>1 criterion matching a column within Condition A (leaving Operator at A only).
+<li>2 criteria like above, but logically combined with Operator.
+<li>Alternatively, you can compare 2 columns directly by using a combination operatore with "col" (to find modules where type equals description, for example).
 </ol>
 
 <h2>Details</h2>
 <ul>
 <li>Knowledge about regexp is very helpful when working with this module!
 <li>You can save searches in Bookmarks.
-<li>The resulting SQL query is always shown at the end of the table. It can be used in Other-Export to generate CSV files or the likes.
+<li>The resulting SQL query is always shown at the end of the table. It can be used in Other-Export to generate CSV files or the like.
 <li> The device name links to its status.
 </ul>
 
--- nedi-std/html/languages/english/User-Profile.html	2012-02-11 04:14:25.000000000 -0800
+++ nedi-gw/html/languages/english/User-Profile.html	2012-03-20 12:12:22.000000000 -0700
@@ -12,7 +12,7 @@
 </div>
 
 <h2>Introduction</h2>
-This is your starting page, when signing on. It also servers to display any administative notifications and to edit your password and information.
+This is your starting page, when signing on. It also serves to display any administrative notifications and to edit your password and information.
 
 <h2>Usage</h2>
 <ul>
--- nedi-std/inc/libcli-iopty.pm	2012-04-20 21:11:49.000000000 -0700
+++ nedi-gw/inc/libcli-iopty.pm	2012-04-10 10:35:07.000000000 -0700
@@ -857,15 +857,19 @@
 		$misc::login{$us}{pw} = $pw;
 	}
 
-	open  (CFG, "$cf" );
-	my @cmd = <CFG>;
-	close(CFG);
-	chomp @cmd;
+	my @cmd = ();
+	if (open (CFG, '<', "$cf" )) {
+		@cmd = <CFG>;
+		close(CFG);
+		chomp @cmd;
+	} else {
+		&misc::Prt("ERR :Cannot open $cf for reading ($!).\n");
+	}
 	$misc::timeout *= 10;
 
 	&misc::Prt("$os $us CMD=$cf(". scalar @cmd .") T:${misc::timeout}s <p>\n");
 
-	open  (LOG, ">$cf-$ip.log" ) or print " can't write to $cf-$ip.log";
+	open (LOG, '>', "$cf-$ip.log" ) or print " can't write to $cf-$ip.log";
 
 	($session, $status) = Connect($ip, $po, $us, $os);
 	if($status ne "OK"){
--- nedi-std/inc/libdb-msq.pm	2013-09-17 14:34:25.000000000 -0700
+++ nedi-gw/inc/libdb-msq.pm	2013-09-17 12:04:46.000000000 -0700
@@ -17,6 +17,58 @@
 use DBI;
 
 
+# Utility function.
+sub print_caller(@) {
+	my $sqlstmt   = $_[0];
+	my $exception = $_[1];
+	my ($package, $file, $line) = caller(1);  # show the caller's caller, so we know where to really look
+	chomp $exception;
+	print STDERR "ERROR:  SQL statement {$sqlstmt} failed ($exception); called from $file line $line.\n";
+}
+
+# FIX MINOR:  The current design of this module invokes a lot of individual database connections
+# instead of keeping a persistent database connection around.  That's not very efficient, especially
+# for PostgreSQL which forks a separate process for each new database connection.  This module
+# should be refactored to keep a persistent connection for the life of the process, if only by
+# caching the active connections indexed by all the connection parameters (including the option
+# attributes), and returning an active connection to the pool upon an application disconnect (if
+# the connection is actually still alive).  That would also help support the QuoteIdentifier() and
+# QuoteLiteral() routines, which require an active database connection simply to carry out their
+# respective transforms.  Given that QuoteLiteral ought to be widely applied to data values, it is
+# critical that this refactoring be done before such a reliability/security improvement is made.
+
+
+sub Connect {
+	my $dbname = shift;
+	my $dbhost = shift;
+	my $dbuser = shift;
+	my $dbpass = shift;
+	my $attr   = shift || {};
+
+	my $dsn = '';
+	if ( defined($misc::dbtype) && $misc::dbtype eq 'postgresql' ) {
+		$dsn = "DBI:Pg:dbname=$dbname;host=$dbhost";
+	}
+	else {
+		$dsn = "DBI:mysql:database=$dbname;host=$dbhost";
+	}
+	my $dbh = undef;
+	eval {
+		$dbh = DBI->connect( $dsn, $dbuser, $dbpass, $attr );
+	};
+	if ($@) {
+		chomp $@;
+		die "ERROR:  $@\n";
+	}
+	return $dbh;
+}
+
+sub Disconnect {
+	my $dbh = shift;
+	$dbh->disconnect;
+}
+
+
 =head2 FUNCTION InitDB()
 
 Connect as admin, drop existing DB and create nedi db and add important
@@ -30,198 +82,1514 @@
 
 =cut
 sub InitDB {
+	my $Database = ( defined($misc::dbtype) && $misc::dbtype eq 'postgresql' ) ? 'PostgreSQL' : 'MySQL';
+	my $query = '';
+
+	my $dbh = Connect($Database eq 'PostgreSQL' ? 'postgres' : 'mysql', "$misc::dbhost", "$_[0]", "$_[1]", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
+	eval {
+		my $db_version;
+		$query = "SELECT VERSION()";
+		my $sth = $dbh->prepare($query);
+		$sth->execute();
+		while ((my @f) = $sth->fetchrow) {
+			$db_version = $f[0];
+		}
+		$sth->finish if $sth;
+		print "$Database Version: $db_version\n";
+		print "----------------------------------------------------------------------\n";
+
+		$query = "DROP DATABASE IF EXISTS $misc::dbname";
+		$dbh->do($query);
+		print "Old DB $misc::dbname dropped!\n";
+
+		print "Creating $misc::dbname ";
+		$query = ($Database eq 'PostgreSQL')
+			? "CREATE DATABASE $misc::dbname ENCODING='LATIN1' OWNER=$misc::dbuser"
+			: "CREATE DATABASE $misc::dbname";
+		$dbh->do($query);
+		$query = ($Database eq 'PostgreSQL')
+			? "GRANT ALL PRIVILEGES ON DATABASE $misc::dbname TO $misc::dbuser"
+			: "GRANT ALL PRIVILEGES ON $misc::dbname.* TO '$misc::dbuser'\@'$_[2]' IDENTIFIED BY '$misc::dbpass'";
+		$dbh->do($query);
+		if ($Database eq 'MySQL' && $db_version =~ /5\.0/) {						#fix for mysql 5.0 with old client libs
+			$query = "SET PASSWORD FOR '$misc::dbuser'\@'$_[2]' = OLD_PASSWORD('$misc::dbpass')";
+			$dbh->do($query);
+		}
+		print "for $misc::dbuser\@$_[2]\n";
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("InitDB failed.\n");
+	}
+	Disconnect($dbh);
+
+	#---Connect as nedi db user and create tables.
+
+	# Currently, we have no foreign key references between nedi tables, so there is no
+	# need to sequence the creation of the individual tables in some particular order.
+
+	my %mysql_table_definition = (
+		devices => [ "CREATE TABLE devices (
+			device VARCHAR(64) NOT NULL UNIQUE,
+			devip INT unsigned default 0,
+			serial VARCHAR(32),
+			type VARCHAR(32),
+			firstdis INT unsigned,
+			lastdis INT unsigned,
+			services TINYINT unsigned,
+			description VARCHAR(255),
+			devos VARCHAR(16),
+			bootimage VARCHAR(64),
+			location VARCHAR(255),
+			contact VARCHAR(255),
+			vtpdomain VARCHAR(32),
+			vtpmode TINYINT unsigned,
+			snmpversion TINYINT unsigned,
+			readcomm VARCHAR(32),
+			cliport SMALLINT unsigned,
+			login VARCHAR(32),
+			icon VARCHAR(16),
+			origip INT unsigned,
+			cpu TINYINT unsigned,
+			memcpu BIGINT unsigned,
+			temp TINYINT unsigned,
+			cusvalue BIGINT unsigned,
+			cuslabel VARCHAR(32),
+			sysobjid VARCHAR(255),
+			writecomm VARCHAR(32),
+			INDEX (device(8)),
+			PRIMARY KEY (device) )" ],
+
+		devdel => [ "CREATE TABLE devdel (
+			device VARCHAR(64) NOT NULL UNIQUE,
+			user VARCHAR(32),
+			time INT unsigned,
+			INDEX (device(8)),
+			PRIMARY KEY (device) )" ],
+
+		# modules.modidx can look like 1.2, thus needs to be varchar (and 32, e.g. for Aruba)
+		modules => [ "CREATE TABLE modules (
+			device VARCHAR(64) NOT NULL,
+			slot VARCHAR(64),
+			model VARCHAR(32),
+			moddesc VARCHAR(255),
+			serial VARCHAR(32),
+			hw VARCHAR(128),
+			fw VARCHAR(128),
+			sw VARCHAR(128),
+			modidx VARCHAR(32),
+			INDEX (device(8)),
+			INDEX (slot(8)) ) " ],
+
+		interfaces => [ "CREATE TABLE interfaces (
+			device VARCHAR(64) NOT NULL,
+			ifname VARCHAR(32) NOT NULL,
+			ifidx BIGINT unsigned,
+			linktype CHAR(4),
+			iftype INT unsigned,
+			ifmac CHAR(12),
+			ifdesc VARCHAR(255),
+			alias VARCHAR(64),
+			ifstat TINYINT unsigned,
+			speed BIGINT unsigned,
+			duplex CHAR(2),
+			pvid SMALLINT unsigned default 0,
+			inoct BIGINT unsigned,
+			inerr INT unsigned,
+			outoct BIGINT unsigned,
+			outerr INT unsigned,
+			dinoct BIGINT signed default 0,
+			dinerr INT signed default 0,
+			doutoct BIGINT signed default 0,
+			douterr INT signed default 0,
+			comment VARCHAR(255),
+			poe SMALLINT unsigned default 0,
+			INDEX (device(8)),
+			INDEX (ifname(8)),
+			INDEX (ifidx) )" ],
+
+		networks => [ "CREATE TABLE networks (
+			device VARCHAR(64) NOT NULL,
+			ifname VARCHAR(32),
+			ifip INT unsigned,
+			mask INT unsigned,
+			vrfname VARCHAR(32),
+			status TINYINT unsigned,
+			INDEX (device(8)),
+			INDEX (ifname),
+			INDEX (ifip) )" ],
+
+		configs => [ "CREATE TABLE configs (
+			device VARCHAR(64) NOT NULL UNIQUE,
+			config MEDIUMTEXT,
+			changes MEDIUMTEXT ,
+			time INT unsigned,
+			INDEX (device(8)),
+			PRIMARY KEY (device) )" ],
+
+		stock => [ "CREATE TABLE stock (
+			serial VARCHAR(32) UNIQUE,
+			type VARCHAR(32),
+			user VARCHAR(32),
+			time INT unsigned,
+			location VARCHAR(255),
+			state TINYINT unsigned,
+			comment VARCHAR(255),
+			lastwty INT unsigned,
+			source VARCHAR(32) default '-',
+			INDEX(serial) )" ],
+
+		vlans => [ "CREATE TABLE vlans (
+			device VARCHAR(64) NOT NULL,
+			vlanid SMALLINT unsigned,
+			vlanname VARCHAR(32),
+			INDEX(vlanid),
+			INDEX(device(8)) )" ],
+
+		links => [ "CREATE TABLE links (
+			id INT unsigned NOT NULL AUTO_INCREMENT,
+			device VARCHAR(64) NOT NULL,
+			ifname VARCHAR(32),
+			neighbor VARCHAR(64) NOT NULL,
+			nbrifname VARCHAR(32),
+			bandwidth BIGINT unsigned,
+			linktype CHAR(4),
+			linkdesc VARCHAR(255),
+			nbrduplex CHAR(2),
+			nbrvlanid SMALLINT unsigned,
+			INDEX(id),
+			INDEX(device(8)),
+			INDEX(ifname(8)),
+			INDEX(neighbor(8)),
+			INDEX(nbrifname(8)),
+			PRIMARY KEY(id) )" ],
+
+		locations => [ "CREATE TABLE locations (
+			id INT unsigned NOT NULL AUTO_INCREMENT,
+			region VARCHAR(32) NOT NULL,
+			city VARCHAR(32),
+			building VARCHAR(32),
+			x SMALLINT unsigned,
+			y SMALLINT unsigned,
+			ns INT default 0,
+			ew INT default 0,
+			locdesc VARCHAR(255),
+			INDEX(region),
+			PRIMARY KEY(id) )" ],
+
+		events => [ "CREATE TABLE events (
+			id INT unsigned NOT NULL AUTO_INCREMENT,
+			level TINYINT unsigned,
+			time INT unsigned,
+			source VARCHAR(64),
+			info VARCHAR(255),
+			class CHAR(4) default 'dev',
+			device VARCHAR(64) default '',
+			INDEX(id),
+			INDEX(source(8)),
+			INDEX(level),
+			INDEX(time),
+			INDEX(class),
+			INDEX(device(8)),
+			PRIMARY KEY(id) )" ],
+
+		monitoring => [ "CREATE TABLE monitoring (
+			name VARCHAR(64) NOT NULL UNIQUE,
+			monip INT unsigned,
+			class CHAR(4) default 'dev',
+			test CHAR(6) default '',
+			lastok INT unsigned default 0,
+			status INT unsigned default 0,
+			lost INT unsigned default 0,
+			ok INT unsigned default 0,
+			latency SMALLINT unsigned default 0,
+			latmax SMALLINT unsigned default 0,
+			latavg SMALLINT unsigned default 0,
+			uptime INT unsigned default 0,
+			alert TINYINT unsigned default 0,
+			eventfwd VARCHAR(255) default '',
+			eventdel VARCHAR(255) default '',
+			depend VARCHAR(64) default '-',
+			device VARCHAR(64) NOT NULL,
+			INDEX (name(8)),
+			INDEX (device(8)) )" ],
+
+		incidents => [ "CREATE TABLE incidents (
+			id INT unsigned NOT NULL AUTO_INCREMENT,
+			level TINYINT unsigned,
+			name VARCHAR(64),
+			deps INT unsigned,
+			start INT unsigned,
+			end INT unsigned,
+			user VARCHAR(32),
+			time INT unsigned,
+			grp TINYINT unsigned,
+			comment VARCHAR(255),
+			device VARCHAR(64) default '',
+			INDEX(id),
+			INDEX(name(8)),
+			INDEX(device(8)),
+			PRIMARY KEY(id) )" ],
+
+		nodes => [ "CREATE TABLE nodes (
+			name VARCHAR(64),
+			nodip INT unsigned,
+			mac CHAR(12) NOT NULL,
+			oui VARCHAR(32),
+			firstseen INT unsigned,
+			lastseen INT unsigned,
+			device VARCHAR(64),
+			ifname VARCHAR(32),
+			vlanid SMALLINT unsigned,
+			ifmetric INT unsigned,
+			ifupdate INT unsigned,
+			ifchanges INT unsigned,
+			ipupdate INT unsigned,
+			ipchanges INT unsigned,
+			iplost INT unsigned,
+			arpval SMALLINT unsigned,
+			tcpports VARCHAR(64),
+			udpports VARCHAR(64),
+			nodtype VARCHAR(64) default '-',
+			nodos VARCHAR(64) default '-',
+			osupdate INT unsigned default 0,
+			INDEX(name(8)),
+			INDEX(nodip),
+			INDEX(mac),
+			INDEX(vlanid),
+			INDEX(device(8)) )" ],
+
+		nodetrack => [ "CREATE TABLE nodetrack (
+			device varchar(64),
+			ifname varchar(32),
+			value varchar(64),
+			source char(8),
+			user varchar(32),
+			time int unsigned,
+			INDEX(device(8)),
+			INDEX(ifname(8)) )" ],
+
+		iftrack => [ "CREATE TABLE iftrack (
+			mac CHAR(12) NOT NULL,
+			ifupdate INT unsigned,
+			device VARCHAR(64),
+			ifname VARCHAR(32),
+			vlanid SMALLINT unsigned,
+			ifmetric TINYINT unsigned,
+			INDEX(mac),
+			INDEX(vlanid),
+			INDEX(device(8)) )" ],
+
+		iptrack => [ "CREATE TABLE iptrack (
+			mac CHAR(12) NOT NULL,
+			ipupdate INT unsigned,
+			name VARCHAR(64),
+			nodip INT unsigned,
+			vlanid SMALLINT unsigned,
+			device VARCHAR(64) NOT NULL default '',
+			INDEX(mac),
+			INDEX(vlanid),
+			INDEX(device(8)) )" ],
+
+		stolen => [ "CREATE TABLE stolen (
+			name VARCHAR(64),
+			stlip INT unsigned,
+			mac CHAR(12) NOT NULL,
+			device VARCHAR(64),
+			ifname VARCHAR(32),
+			user VARCHAR(32),
+			time INT unsigned,
+			comment VARCHAR(255) default '',
+			INDEX(mac),
+			INDEX(device(8)),
+			PRIMARY KEY(mac) )" ],
+
+		users => [ "CREATE TABLE users (
+			user VARCHAR(32) NOT NULL UNIQUE,
+			password VARCHAR(32) NOT NULL default '',
+			groups TINYINT unsigned NOT NULL default '0',
+			email VARCHAR(64) default '',
+			phone VARCHAR(32) default '',
+			time INT unsigned,
+			lastlogin INT unsigned,
+			comment VARCHAR(255) default '',
+			language VARCHAR(16) NOT NULL default 'english',
+			theme VARCHAR(16) NOT NULL default 'default',
+			volume TINYINT unsigned NOT NULL default '34',
+			columns TINYINT unsigned NOT NULL default '5',
+			msglimit TINYINT unsigned NOT NULL default '5',
+			graphs TINYINT unsigned NOT NULL default '2',
+			dateformat VARCHAR(16) NOT NULL default 'j.M y G:i',
+			viewdev VARCHAR(255) default '',
+			PRIMARY KEY(user) )" ],
+
+		system => [ "CREATE TABLE system (
+			name VARCHAR(32) NOT NULL UNIQUE,
+			value VARCHAR(32) default '',
+			PRIMARY KEY(name) )" ],
+
+		chat => [ "CREATE TABLE chat (
+			time INT unsigned,
+			user VARCHAR(32),
+			message VARCHAR(255),
+			INDEX(time),
+			INDEX (user(8)) )" ],
+
+		wlan => [ "CREATE TABLE wlan (
+			mac VARCHAR(12),
+			time INT unsigned,
+			INDEX(mac) )" ],
+	);
+
+	# Note:  We adopted this form of providing the PostgreSQL table and other-object definitions (as
+	# individual SQL statements, embedded directly in the code here) because it essentially mirrors
+	# how the MySQL definitions for the nedi database were previously provided.  It's not clear that
+	# this is actually the easiest way to support the database definition over the long run.  A
+	# separate schema-only database dump file is perhaps a better way to store this setup data, to be
+	# fed to the "mysql" or "psql" client program instead.
+	#
+	# Note:  We chose the table-definition format you see here (individual broken-out object creation
+	# and modification steps) because it mirrors pg_dump output, to make it much easier to compare
+	# generated schemas with the code here.  Also note that not all objects associated with a
+	# table are supported directly in the PostgreSQL CREATE TABLE command, notably the creation of
+	# non-unique indexes.  Thus we needed to be able to execute more than one statement per table,
+	# and as long as that was true, we went with this format for the reason just described.
+	my %postgresql_table_definition = (
+
+		devices => [<<'%CREATE%', <<"%OWNER%", <<'%PKEY%'],
+
+CREATE TABLE devices (
+    device character varying(64) NOT NULL,
+    devip bigint DEFAULT 0,
+    serial character varying(32),
+    type character varying(32),
+    firstdis integer,
+    lastdis integer,
+    services smallint,
+    description character varying(255),
+    devos character varying(16),
+    bootimage character varying(64),
+    location character varying(255),
+    contact character varying(255),
+    vtpdomain character varying(32),
+    vtpmode smallint,
+    snmpversion smallint,
+    readcomm character varying(32),
+    cliport integer,
+    login character varying(32),
+    icon character varying(16),
+    origip bigint,
+    cpu smallint,
+    memcpu bigint,
+    temp smallint,
+    cusvalue bigint,
+    cuslabel character varying(32),
+    sysobjid character varying(255),
+    writecomm character varying(32)
+);
+
+%CREATE%
+
+ALTER TABLE public.devices OWNER TO $misc::dbuser;
+
+%OWNER%
+
+ALTER TABLE ONLY devices
+    ADD CONSTRAINT devices_pkey PRIMARY KEY (device);
+
+%PKEY%
+
+		devdel => [<<'%CREATE%', <<"%OWNER%", <<'%PKEY%'],
+
+CREATE TABLE devdel (
+    device character varying(64) NOT NULL,
+    "user" character varying(32),
+    "time" integer
+);
+
+%CREATE%
+
+ALTER TABLE public.devdel OWNER TO $misc::dbuser;
+
+%OWNER%
+
+ALTER TABLE ONLY devdel
+    ADD CONSTRAINT devdel_pkey PRIMARY KEY (device);
+
+%PKEY%
+
+		# modules.modidx can look like 1.2, thus needs to be varchar (and 32, e.g. for Aruba)
+		modules => [<<'%CREATE%', <<"%OWNER%", <<'%INDEX1%', <<'%INDEX2%'],
+
+CREATE TABLE modules (
+    device character varying(64) NOT NULL,
+    slot character varying(64),
+    model character varying(32),
+    moddesc character varying(255),
+    serial character varying(32),
+    hw character varying(128),
+    fw character varying(128),
+    sw character varying(128),
+    modidx character varying(32)
+);
+
+%CREATE%
+
+ALTER TABLE public.modules OWNER TO $misc::dbuser;
+
+%OWNER%
+
+CREATE INDEX modules_device ON modules USING btree (device);
+
+%INDEX1%
+
+CREATE INDEX modules_slot ON modules USING btree (slot);
+
+%INDEX2%
+
+		interfaces => [<<'%CREATE%', <<"%OWNER%", <<'%INDEX1%', <<'%INDEX2%', <<'%INDEX3%'],
+
+CREATE TABLE interfaces (
+    device character varying(64) NOT NULL,
+    ifname character varying(32) NOT NULL,
+    ifidx bigint,
+    linktype character varying(4),
+    iftype bigint,
+    ifmac character varying(12),
+    ifdesc character varying(255),
+    alias character varying(64),
+    ifstat smallint,
+    speed bigint,
+    duplex character varying(2),
+    pvid integer DEFAULT 0,
+    inoct bigint,
+    inerr bigint,
+    outoct bigint,
+    outerr bigint,
+    dinoct bigint DEFAULT 0,
+    dinerr integer DEFAULT 0,
+    doutoct bigint DEFAULT 0,
+    douterr integer DEFAULT 0,
+    comment character varying(255),
+    poe integer DEFAULT 0
+);
+
+%CREATE%
+
+ALTER TABLE public.interfaces OWNER TO $misc::dbuser;
+
+%OWNER%
+
+CREATE INDEX interfaces_device ON interfaces USING btree (device);
+
+%INDEX1%
+
+CREATE INDEX interfaces_ifidx ON interfaces USING btree (ifidx);
+
+%INDEX2%
+
+CREATE INDEX interfaces_ifname ON interfaces USING btree (ifname);
+
+%INDEX3%
+
+		networks => [<<'%CREATE%', <<"%OWNER%", <<'%INDEX1%', <<'%INDEX2%', <<'%INDEX3%'],
+
+CREATE TABLE networks (
+    device character varying(64) NOT NULL,
+    ifname character varying(32),
+    ifip bigint,
+    mask bigint,
+    vrfname character varying(32),
+    status smallint
+);
+
+%CREATE%
+
+ALTER TABLE public.networks OWNER TO $misc::dbuser;
+
+%OWNER%
+
+CREATE INDEX networks_device ON networks USING btree (device);
+
+%INDEX1%
+
+CREATE INDEX networks_ifip ON networks USING btree (ifip);
+
+%INDEX2%
+
+CREATE INDEX networks_ifname ON networks USING btree (ifname);
+
+%INDEX3%
+
+		configs => [<<'%CREATE%', <<"%OWNER%", <<'%PKEY%'],
+
+CREATE TABLE configs (
+    device character varying(64) NOT NULL,
+    config text,
+    changes text,
+    "time" integer
+);
+
+%CREATE%
+
+ALTER TABLE public.configs OWNER TO $misc::dbuser;
+
+%OWNER%
+
+ALTER TABLE ONLY configs
+    ADD CONSTRAINT configs_pkey PRIMARY KEY (device);
+
+%PKEY%
+
+		stock => [<<'%CREATE%', <<"%OWNER%", <<'%PKEY%'],
+
+CREATE TABLE stock (
+    serial character varying(32),
+    type character varying(32),
+    "user" character varying(32),
+    "time" integer,
+    location character varying(255),
+    state smallint,
+    comment character varying(255),
+    lastwty integer,
+    source character varying(32) DEFAULT '-'::character varying
+);
+
+%CREATE%
+
+ALTER TABLE public.stock OWNER TO $misc::dbuser;
+
+%OWNER%
+
+ALTER TABLE ONLY stock
+    ADD CONSTRAINT stock_serial_key UNIQUE (serial);
+
+%PKEY%
+
+		vlans => [<<'%CREATE%', <<"%OWNER%", <<'%INDEX1%', <<'%INDEX2%'],
+
+CREATE TABLE vlans (
+    device character varying(64) NOT NULL,
+    vlanid integer,
+    vlanname character varying(32)
+);
+
+%CREATE%
+
+ALTER TABLE public.vlans OWNER TO $misc::dbuser;
+
+%OWNER%
+
+CREATE INDEX vlans_device ON vlans USING btree (device);
+
+%INDEX1%
+
+CREATE INDEX vlans_vlanid ON vlans USING btree (vlanid);
+
+%INDEX2%
+
+		links => [<<'%CREATE%', <<"%OWNER%", <<'%SEQUENCE%', <<"%SEQOWNER%", <<'%SEQASSIGN%', <<'%COLDEFAULT%', <<'%PKEY%', <<'%INDEX1%', <<'%INDEX2%', <<'%INDEX3%', <<'%INDEX4%', <<'%INDEX5%'],
+
+CREATE TABLE links (
+    id integer NOT NULL,
+    device character varying(64) NOT NULL,
+    ifname character varying(32),
+    neighbor character varying(64) NOT NULL,
+    nbrifname character varying(32),
+    bandwidth bigint,
+    linktype character varying(4),
+    linkdesc character varying(255),
+    nbrduplex character varying(2),
+    nbrvlanid integer
+);
+
+%CREATE%
+
+ALTER TABLE public.links OWNER TO $misc::dbuser;
+
+%OWNER%
+
+CREATE SEQUENCE links_id_seq
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+%SEQUENCE%
+
+ALTER TABLE public.links_id_seq OWNER TO $misc::dbuser;
+
+%SEQOWNER%
+
+ALTER SEQUENCE links_id_seq OWNED BY links.id;
+
+%SEQASSIGN%
+
+ALTER TABLE links ALTER COLUMN id SET DEFAULT nextval('links_id_seq'::regclass);
+
+%COLDEFAULT%
+
+ALTER TABLE ONLY links
+    ADD CONSTRAINT links_pkey PRIMARY KEY (id);
+
+%PKEY%
+
+CREATE INDEX links_device ON links USING btree (device);
+
+%INDEX1%
+
+CREATE INDEX links_id ON links USING btree (id);
+
+%INDEX2%
+
+CREATE INDEX links_ifname ON links USING btree (ifname);
+
+%INDEX3%
+
+CREATE INDEX links_nbrifname ON links USING btree (nbrifname);
+
+%INDEX4%
+
+CREATE INDEX links_neighbor ON links USING btree (neighbor);
+
+%INDEX5%
+
+		locations => [<<'%CREATE%', <<"%OWNER%", <<'%SEQUENCE%', <<"%SEQOWNER%", <<'%SEQASSIGN%', <<'%COLDEFAULT%', <<'%PKEY%', <<'%INDEX1%'],
+
+CREATE TABLE locations (
+    id integer NOT NULL,
+    region character varying(32) NOT NULL,
+    city character varying(32),
+    building character varying(32),
+    x integer,
+    y integer,
+    ns integer DEFAULT 0,
+    ew integer DEFAULT 0,
+    locdesc character varying(255)
+);
+
+%CREATE%
+
+ALTER TABLE public.locations OWNER TO $misc::dbuser;
+
+%OWNER%
+
+CREATE SEQUENCE locations_id_seq
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+%SEQUENCE%
+
+ALTER TABLE public.locations_id_seq OWNER TO $misc::dbuser;
+
+%SEQOWNER%
+
+ALTER SEQUENCE locations_id_seq OWNED BY locations.id;
+
+%SEQASSIGN%
+
+ALTER TABLE locations ALTER COLUMN id SET DEFAULT nextval('locations_id_seq'::regclass);
+
+%COLDEFAULT%
+
+ALTER TABLE ONLY locations
+    ADD CONSTRAINT locations_pkey PRIMARY KEY (id);
+
+%PKEY%
+
+CREATE INDEX locations_region ON locations USING btree (region);
+
+%INDEX1%
+
+		events => [<<'%CREATE%', <<"%OWNER%", <<'%SEQUENCE%', <<"%SEQOWNER%", <<'%SEQASSIGN%', <<'%COLDEFAULT%', <<'%PKEY%', <<'%INDEX1%', <<'%INDEX2%', <<'%INDEX3%', <<'%INDEX4%', <<'%INDEX5%', <<'%INDEX6%'],
+
+CREATE TABLE events (
+    id integer NOT NULL,
+    level smallint,
+    "time" integer,
+    source character varying(64),
+    info character varying(255),
+    class character varying(4) DEFAULT 'dev'::character varying,
+    device character varying(64)
+);
+
+%CREATE%
+
+ALTER TABLE public.events OWNER TO $misc::dbuser;
+
+%OWNER%
+
+CREATE SEQUENCE events_id_seq
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+%SEQUENCE%
+
+ALTER TABLE public.events_id_seq OWNER TO $misc::dbuser;
+
+%SEQOWNER%
+
+ALTER SEQUENCE events_id_seq OWNED BY events.id;
+
+%SEQASSIGN%
+
+ALTER TABLE events ALTER COLUMN id SET DEFAULT nextval('events_id_seq'::regclass);
+
+%COLDEFAULT%
+
+ALTER TABLE ONLY events
+    ADD CONSTRAINT events_pkey PRIMARY KEY (id);
+
+%PKEY%
+
+CREATE INDEX events_class ON events USING btree (class);
+
+%INDEX1%
+
+CREATE INDEX events_device ON events USING btree (device);
+
+%INDEX2%
+
+CREATE INDEX events_id ON events USING btree (id);
+
+%INDEX3%
+
+CREATE INDEX events_level ON events USING btree (level);
+
+%INDEX4%
+
+CREATE INDEX events_source ON events USING btree (source);
+
+%INDEX5%
+
+CREATE INDEX events_time ON events USING btree ("time");
+
+%INDEX6%
+
+		monitoring => [<<'%CREATE%', <<"%OWNER%", <<'%PKEY%', <<'%INDEX1%'],
+
+CREATE TABLE monitoring (
+    name character varying(64) NOT NULL,
+    monip bigint,
+    class character varying(4) DEFAULT 'dev'::character varying,
+    test character varying(6),
+    lastok integer DEFAULT 0,
+    status integer DEFAULT 0,
+    lost integer DEFAULT 0,
+    ok integer DEFAULT 0,
+    latency integer DEFAULT 0,
+    latmax integer DEFAULT 0,
+    latavg integer DEFAULT 0,
+    uptime integer DEFAULT 0,
+    alert smallint DEFAULT 0,
+    eventfwd character varying(255),
+    eventdel character varying(255),
+    depend character varying(64) DEFAULT '-'::character varying,
+    device character varying(64) NOT NULL
+);
+
+%CREATE%
+
+ALTER TABLE public.monitoring OWNER TO $misc::dbuser;
+
+%OWNER%
+
+ALTER TABLE ONLY monitoring
+    ADD CONSTRAINT monitoring_pkey PRIMARY KEY (name);
+
+%PKEY%
+
+CREATE INDEX monitoring_device ON monitoring USING btree (device);
+
+%INDEX1%
+
+		incidents => [<<'%CREATE%', <<"%OWNER%", <<'%SEQUENCE%', <<"%SEQOWNER%", <<'%SEQASSIGN%', <<'%COLDEFAULT%', <<'%PKEY%', <<'%INDEX1%', <<'%INDEX2%', <<'%INDEX3%'],
+
+CREATE TABLE incidents (
+    id integer NOT NULL,
+    level smallint,
+    name character varying(64),
+    deps integer,
+    start integer,
+    "end" integer,
+    "user" character varying(32),
+    "time" integer,
+    grp smallint,
+    comment character varying(255),
+    device character varying(64)
+);
+
+%CREATE%
+
+ALTER TABLE public.incidents OWNER TO $misc::dbuser;
+
+%OWNER%
+
+CREATE SEQUENCE incidents_id_seq
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+%SEQUENCE%
+
+ALTER TABLE public.incidents_id_seq OWNER TO $misc::dbuser;
+
+%SEQOWNER%
+
+ALTER SEQUENCE incidents_id_seq OWNED BY incidents.id;
+
+%SEQASSIGN%
+
+ALTER TABLE incidents ALTER COLUMN id SET DEFAULT nextval('incidents_id_seq'::regclass);
+
+%COLDEFAULT%
+
+ALTER TABLE ONLY incidents
+    ADD CONSTRAINT incidents_pkey PRIMARY KEY (id);
+
+%PKEY%
+
+CREATE INDEX incidents_device ON incidents USING btree (device);
+
+%INDEX1%
+
+CREATE INDEX incidents_id ON incidents USING btree (id);
+
+%INDEX2%
+
+CREATE INDEX incidents_name ON incidents USING btree (name);
+
+%INDEX3%
+
+		nodes => [<<'%CREATE%', <<"%OWNER%", <<'%INDEX1%', <<'%INDEX2%', <<'%INDEX3%', <<'%INDEX4%', <<'%INDEX5%'],
+
+CREATE TABLE nodes (
+    name character varying(64),
+    nodip bigint,
+    mac character varying(12) NOT NULL,
+    oui character varying(32),
+    firstseen integer,
+    lastseen integer,
+    device character varying(64),
+    ifname character varying(32),
+    vlanid integer,
+    ifmetric integer,
+    ifupdate integer,
+    ifchanges integer,
+    ipupdate integer,
+    ipchanges integer,
+    iplost integer,
+    arpval integer,
+    tcpports character varying(64),
+    udpports character varying(64),
+    nodtype character varying(64) DEFAULT '-'::character varying,
+    nodos character varying(64) DEFAULT '-'::character varying,
+    osupdate integer DEFAULT 0
+);
+
+%CREATE%
+
+ALTER TABLE public.nodes OWNER TO $misc::dbuser;
+
+%OWNER%
+
+CREATE INDEX nodes_device ON nodes USING btree (device);
+
+%INDEX1%
+
+CREATE INDEX nodes_mac ON nodes USING btree (mac);
+
+%INDEX2%
+
+CREATE INDEX nodes_name ON nodes USING btree (name);
+
+%INDEX3%
+
+CREATE INDEX nodes_nodip ON nodes USING btree (nodip);
+
+%INDEX4%
+
+CREATE INDEX nodes_vlanid ON nodes USING btree (vlanid);
+
+%INDEX5%
+
+		nodetrack => [<<'%CREATE%', <<"%OWNER%", <<'%INDEX1%', <<'%INDEX2%'],
+
+CREATE TABLE nodetrack (
+    device character varying(64),
+    ifname character varying(32),
+    value character varying(64),
+    source character varying(8),
+    "user" character varying(32),
+    "time" integer
+);
+
+%CREATE%
+
+ALTER TABLE public.nodetrack OWNER TO $misc::dbuser;
+
+%OWNER%
+
+CREATE INDEX nodetrack_device ON nodetrack USING btree (device);
+
+%INDEX1%
+
+CREATE INDEX nodetrack_ifname ON nodetrack USING btree (ifname);
+
+%INDEX2%
+
+		iftrack => [<<'%CREATE%', <<"%OWNER%", <<'%INDEX1%', <<'%INDEX2%', <<'%INDEX3%'],
+
+CREATE TABLE iftrack (
+    mac character varying(12) NOT NULL,
+    ifupdate integer,
+    device character varying(64),
+    ifname character varying(32),
+    vlanid integer,
+    ifmetric smallint
+);
+
+%CREATE%
+
+ALTER TABLE public.iftrack OWNER TO $misc::dbuser;
+
+%OWNER%
+
+CREATE INDEX iftrack_device ON iftrack USING btree (device);
+
+%INDEX1%
+
+CREATE INDEX iftrack_mac ON iftrack USING btree (mac);
+
+%INDEX2%
+
+CREATE INDEX iftrack_vlanid ON iftrack USING btree (vlanid);
+
+%INDEX3%
+
+		iptrack => [<<'%CREATE%', <<"%OWNER%", <<'%INDEX1%', <<'%INDEX2%', <<'%INDEX3%'],
+
+CREATE TABLE iptrack (
+    mac character varying(12) NOT NULL,
+    ipupdate integer,
+    name character varying(64),
+    nodip bigint,
+    vlanid integer,
+    device character varying(64) NOT NULL
+);
+
+%CREATE%
+
+ALTER TABLE public.iptrack OWNER TO $misc::dbuser;
+
+%OWNER%
+
+CREATE INDEX iptrack_device ON iptrack USING btree (device);
+
+%INDEX1%
+
+CREATE INDEX iptrack_mac ON iptrack USING btree (mac);
+
+%INDEX2%
+
+CREATE INDEX iptrack_vlanid ON iptrack USING btree (vlanid);
+
+%INDEX3%
+
+		stolen => [<<'%CREATE%', <<"%OWNER%", <<'%PKEY%', <<'%INDEX1%', <<'%INDEX2%'],
+
+CREATE TABLE stolen (
+    name character varying(64),
+    stlip bigint,
+    mac character varying(12) NOT NULL,
+    device character varying(64),
+    ifname character varying(32),
+    "user" character varying(32),
+    "time" integer,
+    comment character varying(255)
+);
+
+%CREATE%
+
+ALTER TABLE public.stolen OWNER TO $misc::dbuser;
+
+%OWNER%
+
+ALTER TABLE ONLY stolen
+    ADD CONSTRAINT stolen_pkey PRIMARY KEY (mac);
+
+%PKEY%
+
+CREATE INDEX stolen_device ON stolen USING btree (device);
+
+%INDEX1%
+
+CREATE INDEX stolen_mac ON stolen USING btree (mac);
+
+%INDEX2%
+
+		users => [<<'%CREATE%', <<"%OWNER%", <<'%PKEY%'],
+
+CREATE TABLE users (
+    "user" character varying(32) NOT NULL,
+    password character varying(32) NOT NULL,
+    groups smallint DEFAULT 0 NOT NULL,
+    email character varying(64),
+    phone character varying(32),
+    "time" integer,
+    lastlogin integer,
+    comment character varying(255),
+    language character varying(16) DEFAULT 'english'::character varying NOT NULL,
+    theme character varying(16) DEFAULT 'default'::character varying NOT NULL,
+    volume smallint DEFAULT 34 NOT NULL,
+    columns smallint DEFAULT 5 NOT NULL,
+    msglimit smallint DEFAULT 5 NOT NULL,
+    graphs smallint DEFAULT 2 NOT NULL,
+    dateformat character varying(16) DEFAULT 'j.M y G:i'::character varying NOT NULL,
+    viewdev character varying(255)
+);
+
+%CREATE%
+
+ALTER TABLE public.users OWNER TO $misc::dbuser;
+
+%OWNER%
+
+ALTER TABLE ONLY users
+    ADD CONSTRAINT users_pkey PRIMARY KEY ("user");
+
+%PKEY%
+
+		system => [<<'%CREATE%', <<"%OWNER%", <<'%PKEY%'],
+
+CREATE TABLE system (
+    name character varying(32) NOT NULL,
+    value character varying(32)
+);
+
+%CREATE%
+
+ALTER TABLE public.system OWNER TO $misc::dbuser;
+
+%OWNER%
+
+ALTER TABLE ONLY system
+    ADD CONSTRAINT system_pkey PRIMARY KEY (name);
+
+%PKEY%
+
+		chat => [<<'%CREATE%', <<"%OWNER%", <<'%INDEX1%', <<'%INDEX2%'],
+
+CREATE TABLE chat (
+    "time" integer,
+    "user" character varying(32),
+    message character varying(255)
+);
+
+%CREATE%
+
+ALTER TABLE public.chat OWNER TO $misc::dbuser;
+
+%OWNER%
+
+CREATE INDEX chat_time ON chat USING btree ("time");
+
+%INDEX1%
+
+CREATE INDEX chat_user ON chat USING btree ("user");
+
+%INDEX2%
+
+		wlan => [<<'%CREATE%', <<"%OWNER%", <<'%INDEX1%'],
+
+CREATE TABLE wlan (
+    mac character varying(12),
+    "time" integer
+);
+
+%CREATE%
+
+ALTER TABLE public.wlan OWNER TO $misc::dbuser;
+
+%OWNER%
+
+CREATE INDEX wlan_mac ON wlan USING btree (mac);
+
+%INDEX1%
+	);
+
+	my %mysql_funct_definition = (
+	);
+
+	my %postgresql_funct_definition = (
+
+		'_my_to_pg_time_format(text)' => [<<'%CREATE%', <<"%OWNER%"],
+
+CREATE FUNCTION _my_to_pg_time_format(text) RETURNS text
+    LANGUAGE sql
+    AS $_$
+SELECT array_to_string(
+    ARRAY(
+	SELECT
+	    CASE (element).e
+	    WHEN '%%' THEN '%'
+	    WHEN '%D' THEN 'FMDDth'
+	    WHEN '%H' THEN 'HH24'
+	    WHEN '%I' THEN 'HH'
+	    WHEN '%M' THEN 'Month'
+	    WHEN '%S' THEN 'SS'
+	    WHEN '%T' THEN 'HH24:MI:SS'
+	    WHEN '%U' THEN '%%U'
+	    WHEN '%V' THEN '%%V'
+	    WHEN '%W' THEN 'FMDay'
+	    WHEN '%X' THEN '%%X'
+	    WHEN '%Y' THEN 'YYYY'
+	    WHEN '%a' THEN 'Dy'
+	    WHEN '%b' THEN 'Mon'
+	    WHEN '%c' THEN 'FMMM'
+	    WHEN '%d' THEN 'DD'
+	    WHEN '%e' THEN 'FMDD'
+	    WHEN '%f' THEN 'US'
+	    WHEN '%h' THEN 'HH12'
+	    WHEN '%i' THEN 'MI'
+	    WHEN '%j' THEN 'DDD'
+	    WHEN '%k' THEN 'FMHH24'
+	    WHEN '%l' THEN 'FMHH12'
+	    WHEN '%m' THEN 'MM'
+	    WHEN '%p' THEN 'am'
+	    WHEN '%r' THEN 'HH:MI:SSam'
+	    WHEN '%s' THEN 'SS'
+	    WHEN '%u' THEN '%%u'
+	    WHEN '%v' THEN '%%v'
+	    WHEN '%w' THEN '%%w'
+	    WHEN '%x' THEN '%%x'
+	    WHEN '%y' THEN 'YY'
+	    WHEN '"'  THEN '\"'
+	    ELSE
+		coalesce(substring((element).e from '^%(.)$'), (element).e)
+	    END
+	FROM (SELECT array_to_string(regexp_matches($1, '[^%"]+|"|%.|%$', 'g'),'') as e) AS element
+    ),
+    ''
+)
+$_$;
+
+%CREATE%
+
+ALTER FUNCTION public._my_to_pg_time_format(text) OWNER TO $misc::dbuser;
+
+%OWNER%
+
+
+		'_mysqlf_pgsql(text)' => [<<'%CREATE%', <<"%OWNER%"],
+
+CREATE FUNCTION _mysqlf_pgsql(text) RETURNS text
+    LANGUAGE sql
+    AS $_$
+SELECT array_to_string(
+    ARRAY(
+	SELECT
+	    CASE (element).e
+	    WHEN '%%' THEN '%'
+	    WHEN '%D' THEN 'FMDDth'
+	    WHEN '%H' THEN 'HH24'
+	    WHEN '%I' THEN 'HH'
+	    WHEN '%M' THEN 'Month'
+	    WHEN '%S' THEN 'SS'
+	    WHEN '%T' THEN 'HH24:MI:SS'
+	    WHEN '%U' THEN '%%U'
+	    WHEN '%V' THEN '%%V'
+	    WHEN '%W' THEN 'FMDay'
+	    WHEN '%X' THEN '%%X'
+	    WHEN '%Y' THEN 'YYYY'
+	    WHEN '%a' THEN 'Dy'
+	    WHEN '%b' THEN 'Mon'
+	    WHEN '%c' THEN 'FMMM'
+	    WHEN '%d' THEN 'DD'
+	    WHEN '%e' THEN 'FMDD'
+	    WHEN '%f' THEN 'US'
+	    WHEN '%h' THEN 'HH12'
+	    WHEN '%i' THEN 'MI'
+	    WHEN '%j' THEN 'DDD'
+	    WHEN '%k' THEN 'FMHH24'
+	    WHEN '%l' THEN 'FMHH12'
+	    WHEN '%m' THEN 'MM'
+	    WHEN '%p' THEN 'am'
+	    WHEN '%r' THEN 'HH:MI:SSam'
+	    WHEN '%s' THEN 'SS'
+	    WHEN '%u' THEN '%%u'
+	    WHEN '%v' THEN '%%v'
+	    WHEN '%w' THEN '%%w'
+	    WHEN '%x' THEN '%%x'
+	    WHEN '%y' THEN 'YY'
+	    ELSE
+		coalesce(substring((element).e from '^%(.)$'), (element).e)
+	    END
+	FROM (SELECT array_to_string(regexp_matches($1, '[^%]+|%.|%$', 'g'),'') as e) AS element
+    ),
+    ''
+)
+$_$;
+
+%CREATE%
+
+ALTER FUNCTION public._mysqlf_pgsql(text) OWNER TO $misc::dbuser;
+
+%OWNER%
+
+
+		'curdate()' => [<<'%CREATE%', <<"%OWNER%"],
+
+CREATE FUNCTION curdate() RETURNS date
+    LANGUAGE sql STABLE
+    AS $$
+SELECT CURRENT_DATE
+$$;
+
+%CREATE%
+
+ALTER FUNCTION public.curdate() OWNER TO $misc::dbuser;
+
+%OWNER%
+
+
+		'datediff(date, date)' => [<<'%CREATE%', <<"%OWNER%"],
+
+CREATE FUNCTION datediff(date, date) RETURNS integer
+    LANGUAGE sql IMMUTABLE STRICT
+    AS $_$
+SELECT $1 - $2
+$_$;
+
+%CREATE%
+
+ALTER FUNCTION public.datediff(date, date) OWNER TO $misc::dbuser;
+
+%OWNER%
+
+
+		'inet_aton(text)' => [<<'%CREATE%', <<"%OWNER%"],
+
+CREATE FUNCTION inet_aton(text) RETURNS bigint
+    LANGUAGE plpgsql IMMUTABLE STRICT
+    AS $_$
+  DECLARE
+      a text[];
+      b text[4];
+      up int;
+      family int;
+      i int;
+  BEGIN
+      IF position(':' in $1) > 0 THEN
+        family = 6;
+      ELSE
+        family = 4;
+      END IF;
+      -- Even MySQL doesn't support IPv6, because the return type of
+      -- bigint (64 bits) is insufficient for a 128-bit IPv6 address.
+      IF family = 6 THEN
+        RETURN NULL;
+      END IF;
+      a = pg_catalog.string_to_array($1, '.');
+      up = array_upper(a, 1);
+      IF up IS NULL THEN
+        RETURN NULL;
+      ELSIF up = 4 THEN
+        -- nothing to do
+        b = a;
+      ELSIF up = 3 THEN
+        -- 127.1.2 = 127.1.0.2
+        b = array[a[1], a[2], '0', a[3]];
+      ELSIF up = 2 THEN
+        -- 127.1 = 127.0.0.1
+        b = array[a[1], '0', '0', a[2]];
+      ELSIF up = 1 THEN
+        -- 127 = 0.0.0.127
+        b = array['0', '0', '0', a[1]];
+      END IF;
+      i = 1;
+      -- handle 127..1
+      WHILE i <= 4 LOOP
+        IF length(b[i]) = 0 THEN
+          b[i] = '0';
+        END IF;
+        IF b[i] !~ '^[0-9]{1,3}$' THEN
+          RETURN NULL;
+        END IF;
+        IF b[i]::int > 255 THEN
+          RETURN NULL;
+        END IF;
+        i = i + 1;
+      END LOOP;
+      RETURN (b[1]::bigint << 24) | (b[2]::bigint << 16) | (b[3]::bigint << 8) | b[4]::bigint;
+  END
+$_$;
+
+%CREATE%
+
+ALTER FUNCTION public.inet_aton(text) OWNER TO $misc::dbuser;
+
+%OWNER%
+
+
+		'inet_ntoa(bigint)' => [<<'%CREATE%', <<"%OWNER%"],
+
+CREATE FUNCTION inet_ntoa(bigint) RETURNS character varying
+    LANGUAGE sql IMMUTABLE STRICT
+    AS $_$
+SELECT CASE WHEN $1 > 4294967295 THEN NULL WHEN $1 < 0 THEN NULL ELSE
+    (($1 >> 24) & 255) operator(pg_catalog.||) '.' operator(pg_catalog.||)
+    (($1 >> 16) & 255) operator(pg_catalog.||) '.' operator(pg_catalog.||)
+    (($1 >>  8) & 255) operator(pg_catalog.||) '.' operator(pg_catalog.||)
+    (($1      ) & 255) END;
+$_$;
+
+%CREATE%
+
+ALTER FUNCTION public.inet_ntoa(bigint) OWNER TO $misc::dbuser;
+
+%OWNER%
+
+
+		'str_to_date(text, text)' => [<<'%CREATE%', <<"%OWNER%"],
+
+CREATE FUNCTION str_to_date(text, text) RETURNS date
+    LANGUAGE sql STABLE STRICT
+    AS $_$
+SELECT to_date($1, _my_to_pg_time_format($2))
+$_$;
+
+%CREATE%
+
+ALTER FUNCTION public.str_to_date(text, text) OWNER TO $misc::dbuser;
+
+%OWNER%
+
+
+		'substring_index(text, text, integer)' => [<<'%CREATE%', <<"%OWNER%"],
+
+CREATE FUNCTION substring_index(str text, delim text, count integer) RETURNS text
+    LANGUAGE sql IMMUTABLE STRICT
+    AS $_$
+SELECT CASE
+WHEN $2 = '' THEN ''
+WHEN $3 > 0 THEN array_to_string((string_to_array($1,$2))[1:$3], $2)
+WHEN $3 < 0 THEN array_to_string(
+    ARRAY(
+	SELECT unnest(string_to_array($1,$2))
+	    OFFSET GREATEST(array_upper(string_to_array($1,$2),1) + $3, 0)
+    ),
+    $2
+)
+ELSE ''
+END
+$_$;
+
+%CREATE%
+
+ALTER FUNCTION public.substring_index(str text, delim text, count integer) OWNER TO $misc::dbuser;
+
+%OWNER%
+
+	);
+
+	my $table_definition = ( defined($misc::dbtype) && $misc::dbtype eq 'postgresql' ) ? \%postgresql_table_definition : \%mysql_table_definition;
+	my $funct_definition = ( defined($misc::dbtype) && $misc::dbtype eq 'postgresql' ) ? \%postgresql_funct_definition : \%mysql_funct_definition;
+	$dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 0 });
+	eval {
+		## Create the tables.
+
+		print "INIT: Creating tables:\n";
+		foreach my $table (keys %$table_definition) {
+			print "\t$table\n";
+			foreach my $stmt (@{ $table_definition->{$table} }) {
+				$query = $stmt;
+				$dbh->do($query);
+			}
+			$query = 'commit';
+			$dbh->commit;
+		}
+		print "... done.\n";
+
+		if (%$funct_definition) {
+			print "INIT: Creating functions:\n";
+			## We need to sort the keys so the internal functions (which all have names that start
+			## with underscore) are defined before the external functions that reference them.
+			## Fortunately, there are no more-complex interrelationships between the functions
+			## that we define that would enforce an even more strict ordering that might mean
+			## we could not use a hash to store the function definitions.
+			foreach my $funct (sort keys %$funct_definition) {
+				print "\t$funct\n";
+				foreach my $stmt (@{ $funct_definition->{$funct} }) {
+				    $query = $stmt;
+				    $dbh->do($query);
+				}
+				$query = 'commit';
+				$dbh->commit;
+			}
+			print "... done.\n";
+		}
+
+		# Push initial seed data into the tables.
 
-	$dbh = DBI->connect("DBI:mysql:mysql:$misc::dbhost", "$_[0]", "$_[1]", { RaiseError => 1, AutoCommit => 1});
-	my $mysqlVer;
-	my $sth = $dbh->prepare("SELECT VERSION()");
-	$sth->execute();
-	while ((my @f) = $sth->fetchrow) {
-		$mysqlVer = $f[0];
-	}
-	print "MySQL Version	: $mysqlVer\n";
-	print "----------------------------------------------------------------------\n";
-	$dbh->do("DROP DATABASE IF EXISTS $misc::dbname");
-	print "Old DB $misc::dbname dropped!\n";
-
-	print "Creating $misc::dbname ";
-	$dbh->do("CREATE DATABASE $misc::dbname");
-	$dbh->do("GRANT ALL PRIVILEGES ON $misc::dbname.* TO \'$misc::dbuser\'\@\'$_[2]\' IDENTIFIED BY \'$misc::dbpass\'");
-	if ($mysqlVer =~ /5\.0/) {									#fix for mysql 5.0 with old client libs
-		$dbh->do("SET PASSWORD FOR \'$misc::dbuser\'\@\'$_[2]\' = OLD_PASSWORD(\'$misc::dbpass\')");
-	}
-	print "for $misc::dbuser\@$_[2]\n";
-	$sth->finish if $sth;
-	$dbh->disconnect();
-
-#---Connect as nedi db user and create tables.
-	$dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 0});
-
-	print "INIT:Creating devices,";
-	$dbh->do("CREATE TABLE devices	(	device VARCHAR(64) NOT NULL UNIQUE, devip INT unsigned default 0, serial VARCHAR(32), type VARCHAR(32),
-						firstdis INT unsigned, lastdis INT unsigned, services TINYINT unsigned,
-						description VARCHAR(255), devos VARCHAR(16), bootimage VARCHAR(64),
-						location VARCHAR(255), contact VARCHAR(255),
-						vtpdomain VARCHAR(32), vtpmode TINYINT unsigned, snmpversion TINYINT unsigned,
-						readcomm VARCHAR(32), cliport SMALLINT unsigned, login VARCHAR(32),
-						icon VARCHAR(16), origip INT unsigned, cpu TINYINT unsigned,memcpu BIGINT unsigned,
-						temp TINYINT unsigned, cusvalue BIGINT unsigned, cuslabel VARCHAR(32), sysobjid VARCHAR(255),
-						writecomm VARCHAR(32), INDEX (device(8)), PRIMARY KEY (device) )");
- 	$dbh->commit;
-
-	print "devdel, ";
-	$dbh->do("CREATE TABLE devdel	(	device VARCHAR(64) NOT NULL UNIQUE, user VARCHAR(32), time INT unsigned,
-						INDEX (device(8)), PRIMARY KEY  (device) )");
- 	$dbh->commit;
-
-	print "modules, ";
-	$dbh->do("CREATE TABLE modules	(	device VARCHAR(64) NOT NULL, slot VARCHAR(64), model VARCHAR(32), moddesc VARCHAR(255),
-						serial VARCHAR(32), hw VARCHAR(128), fw VARCHAR(128), sw VARCHAR(128),
-						modidx VARCHAR(32), INDEX (device(8)), INDEX (slot(8)) ) ");# modidx can look like 1.2, thus needs to be varchar (and 32 e.g. for Aruba)
- 	$dbh->commit;
-
-	print "interfaces, ";
-	$dbh->do("CREATE TABLE interfaces(	device VARCHAR(64) NOT NULL, ifname VARCHAR(32) NOT NULL, ifidx BIGINT unsigned,
-						linktype CHAR(4), iftype INT unsigned, ifmac CHAR(12),
-						ifdesc VARCHAR(255), alias VARCHAR(64), ifstat TINYINT unsigned,
-						speed BIGINT unsigned, duplex CHAR(2), pvid SMALLINT unsigned default 0,
-						inoct BIGINT unsigned, inerr INT unsigned, outoct BIGINT unsigned, outerr INT unsigned,
-						dinoct BIGINT signed default 0, dinerr INT signed default 0, doutoct BIGINT signed default 0,
-						douterr INT signed default 0, comment VARCHAR(255), poe SMALLINT unsigned default 0,
-						INDEX (device(8)), INDEX (ifname(8)),INDEX (ifidx) )");
- 	$dbh->commit;
-
-	print "networks, ";
-	$dbh->do("CREATE TABLE networks (	device VARCHAR(64) NOT NULL, ifname VARCHAR(32), ifip INT unsigned, mask INT unsigned,
-						vrfname VARCHAR(32), status TINYINT unsigned,
-						INDEX (device(8)), INDEX (ifname), INDEX (ifip) )");
- 	$dbh->commit;
-
-	print "configs, ";
-	$dbh->do("CREATE TABLE configs	(	device VARCHAR(64) NOT NULL UNIQUE, config MEDIUMTEXT, changes MEDIUMTEXT ,
-						time INT unsigned, INDEX (device(8)), PRIMARY KEY  (device)  )");
- 	$dbh->commit;
-
-	print "stock, ";
-	$dbh->do("CREATE TABLE stock	(	serial VARCHAR(32) UNIQUE, type VARCHAR(32),user VARCHAR(32),
-						time INT unsigned, location VARCHAR(255), state TINYINT unsigned, comment VARCHAR(255),
-						lastwty INT unsigned, source VARCHAR(32) default '-', INDEX(serial) )");
- 	$dbh->commit;
-
-	print "vlans, ";
-	$dbh->do("CREATE TABLE vlans	(	device VARCHAR(64) NOT NULL, vlanid SMALLINT unsigned,
-						vlanname VARCHAR(32), INDEX(vlanid), INDEX(device(8)) )");
- 	$dbh->commit;
-
-	print "links, ";
-	$dbh->do("CREATE TABLE links	(	id INT unsigned NOT NULL AUTO_INCREMENT, device VARCHAR(64) NOT NULL,
-						ifname VARCHAR(32), neighbor VARCHAR(64) NOT NULL, nbrifname VARCHAR(32),
-						bandwidth BIGINT unsigned, linktype CHAR(4), linkdesc VARCHAR(255), nbrduplex CHAR(2),
-						nbrvlanid SMALLINT unsigned, INDEX(id), INDEX(device(8)), INDEX(ifname(8)),
-						INDEX(neighbor(8)), INDEX(nbrifname(8)), PRIMARY KEY(id) )");
- 	$dbh->commit;
-
-	print "locations, ";
-	$dbh->do("CREATE TABLE locations(	id INT unsigned NOT NULL AUTO_INCREMENT,region VARCHAR(32) NOT NULL,
-						city VARCHAR(32), building VARCHAR(32), x SMALLINT unsigned, y SMALLINT unsigned,
-						ns INT default 0, ew INT default 0, locdesc VARCHAR(255), 
-						INDEX(region),PRIMARY KEY(id)  )");
- 	$dbh->commit;
-
-	print "events, ";
-	$dbh->do("CREATE TABLE events(		id INT unsigned NOT NULL AUTO_INCREMENT, level TINYINT unsigned, time INT unsigned,
-						source VARCHAR(64), info VARCHAR(255), class CHAR(4) default 'dev', device VARCHAR(64) default '',
-						INDEX(id), INDEX(source(8)), INDEX(level), INDEX(time), INDEX(class), INDEX(device(8)), PRIMARY KEY(id) )");
- 	$dbh->commit;
-
-	print "monitoring, ";
-	$dbh->do("CREATE TABLE monitoring(	name VARCHAR(64) NOT NULL UNIQUE, monip INT unsigned, class CHAR(4) default 'dev', 
-						test CHAR(6) default '', lastok INT unsigned default 0,	status INT unsigned default 0,
-						lost INT unsigned default 0, ok INT unsigned default 0,	latency SMALLINT unsigned default 0, latmax SMALLINT unsigned default 0,
-						latavg SMALLINT unsigned default 0, uptime INT unsigned default 0, alert TINYINT unsigned default 0, eventfwd VARCHAR(255) default '',
-						eventdel VARCHAR(255) default '', depend VARCHAR(64) default '-', device VARCHAR(64) NOT NULL, INDEX (name(8)), INDEX (device(8)) )");
- 	$dbh->commit;
-
-	print "incidents, ";
-	$dbh->do("CREATE TABLE incidents(	id INT unsigned NOT NULL AUTO_INCREMENT, level TINYINT unsigned, name VARCHAR(64),
-						deps INT unsigned, start INT unsigned, end INT unsigned, user VARCHAR(32),
-						time INT unsigned, grp TINYINT unsigned, comment VARCHAR(255), device VARCHAR(64) default '',
-						INDEX(id), INDEX(name(8)), INDEX(device(8)), PRIMARY KEY(id) )");
- 	$dbh->commit;
-
-	print "nodes, ";
-	$dbh->do("CREATE TABLE nodes 	(	name VARCHAR(64), nodip INT unsigned, mac CHAR(12) NOT NULL, oui VARCHAR(32),
-						firstseen INT unsigned, lastseen INT unsigned, device VARCHAR(64),
-						ifname VARCHAR(32), vlanid SMALLINT unsigned, ifmetric INT unsigned,
-						ifupdate INT unsigned, ifchanges INT unsigned,	ipupdate INT unsigned,
-						ipchanges INT unsigned, iplost INT unsigned, arpval SMALLINT unsigned,
-						tcpports VARCHAR(64), udpports VARCHAR(64), nodtype VARCHAR(64) default '-',
-						nodos VARCHAR(64) default '-', osupdate INT unsigned default 0,
-						INDEX(name(8)), INDEX(nodip), INDEX(mac), INDEX(vlanid), INDEX(device(8)) )");
- 	$dbh->commit;
-
-	print "nodetrack, ";
-	$dbh->do("CREATE TABLE nodetrack(	device varchar(64), ifname varchar(32), value varchar(64), source char(8),
-						user varchar(32),time int unsigned, INDEX(device(8)), INDEX(ifname(8)) )");
- 	$dbh->commit;
-
-	print "iftrack, ";
-	$dbh->do("CREATE TABLE iftrack	(	mac CHAR(12) NOT NULL,ifupdate INT unsigned, device VARCHAR(64),
-						ifname VARCHAR(32), vlanid SMALLINT unsigned,
-						ifmetric TINYINT unsigned, INDEX(mac), INDEX(vlanid), INDEX(device(8)) )");
- 	$dbh->commit;
-	print "iptrack, ";
-	$dbh->do("CREATE TABLE iptrack (	mac CHAR(12) NOT NULL,ipupdate INT unsigned, name VARCHAR(64), nodip INT unsigned,
-						vlanid SMALLINT unsigned, device VARCHAR(64) NOT NULL default '',
-						INDEX(mac), INDEX(vlanid), INDEX(device(8)) )");
- 	$dbh->commit;
-
-	print "stolen, ";
-	$dbh->do("CREATE TABLE stolen 	(	name VARCHAR(64), stlip INT unsigned, mac CHAR(12) NOT NULL, device VARCHAR(64),
-						ifname VARCHAR(32), user VARCHAR(32), time INT unsigned, comment VARCHAR(255) default '',
-						INDEX(mac), INDEX(device(8)), PRIMARY KEY(mac) )");
- 	$dbh->commit;
-
-	print "users, ";
-	$dbh->do("CREATE TABLE users 	(	user VARCHAR(32) NOT NULL UNIQUE, password VARCHAR(32) NOT NULL default '',
-						groups TINYINT unsigned NOT NULL default '0', email VARCHAR(64) default '', phone VARCHAR(32) default '',
-						time INT unsigned, lastlogin INT unsigned, comment VARCHAR(255) default '',
-						language VARCHAR(16) NOT NULL default 'english', theme VARCHAR(16) NOT NULL default 'default',
-						volume TINYINT unsigned NOT NULL default '34', columns TINYINT unsigned NOT NULL default '5',
-						msglimit TINYINT unsigned NOT NULL default '5', graphs TINYINT unsigned NOT NULL default '2',
-						dateformat VARCHAR(16) NOT NULL default 'j.M y G:i', viewdev VARCHAR(255) default '',
-						PRIMARY KEY(user) )");
-
-	$sth = $dbh->prepare("INSERT INTO users (user,password,groups,time,comment,volume,columns,msglimit,graphs) VALUES ( ?,?,?,?,?,?,?,?,? )");
-	$sth->execute ( 'admin','21232f297a57a5a743894a0e4a801fc3','255',$main::now,'default admin','34','8','10','3' );
- 	$dbh->commit;
-
-	print "system, ";
-	$dbh->do("CREATE TABLE system	(	name VARCHAR(32) NOT NULL UNIQUE, value VARCHAR(32) default '',
-						INDEX(name) )");
-	$sth = $dbh->prepare("INSERT INTO system (name,value) VALUES ( ?,? )");
-	$sth->execute ( 'nodlock','0' );
-	$sth->execute ( 'threads','0' );
-	$sth->execute ( 'first','0' );
- 	$dbh->commit;
-
-	print "chat, ";
-	$dbh->do("CREATE TABLE chat (time INT unsigned,  user VARCHAR(32), message VARCHAR(255), INDEX(time),INDEX (user(8)) )");
-
-	print "wlan";
-	$dbh->do("CREATE TABLE wlan (mac VARCHAR(12),time INT unsigned, INDEX(mac) )");
-	my @wlan = ();
-	if (-e "$main::p/inc/wlan.txt"){
-		open  ("WLAN", "$main::p/inc/wlan.txt" );
-		@wlan = <WLAN>;
-		close("WLAN");
-		chomp(@wlan);
-	}
-	$sth = $dbh->prepare("INSERT INTO wlan (mac,time) VALUES ( ?,? )");
-	for my $mc (sort @wlan ){ $sth->execute ( $mc,$main::now ) }
- 	$dbh->commit;
-	$sth->finish if $sth;
-	$dbh->disconnect();
-	print " done.\n";
+		print "INIT: Populating ... ";
+
+		my $user_column = $dbh->quote_identifier('user');
+		$query = "INSERT INTO users ($user_column,password,groups,time,comment,volume,columns,msglimit,graphs) VALUES ( ?,?,?,?,?,?,?,?,? )";
+		$sth = $dbh->prepare($query);
+		# PostgreSQL requires a smaller $columns value for the System => Export tables to display
+		# properly without overlapping, even on a wide screen, with a reasonably readable font size.
+		$columns = ( defined($misc::dbtype) && $misc::dbtype eq 'postgresql' ) ? 6 : 8;
+		$sth->execute ( 'admin','21232f297a57a5a743894a0e4a801fc3','255',$main::now,'default admin','34',$columns,'10','3' );
+		$sth->finish if $sth;
+		$query = 'commit';
+		$dbh->commit;
+
+		$query = "INSERT INTO system (name,value) VALUES ( ?,? )";
+		$sth = $dbh->prepare($query);
+		$sth->execute ( 'nodlock', '0' );
+		$sth->execute ( 'threads', '0' );
+		$sth->execute ( 'first',   '0' );
+		$sth->finish if $sth;
+		$query = 'commit';
+		$dbh->commit;
+
+		my @wlan = ();
+		if (-e "$main::p/inc/wlan.txt"){
+			if (open ('WLAN', '<', "$main::p/inc/wlan.txt")) {
+				@wlan = <WLAN>;
+				close("WLAN");
+				chomp(@wlan);
+			}
+			else {
+				die("ERROR:  Could not open $main::p/inc/wlan.txt for reading ($!).\n");
+			}
+		}
+		$query = "INSERT INTO wlan (mac,time) VALUES ( ?,? )";
+		$sth = $dbh->prepare($query);
+		for my $mc (sort @wlan ){ $sth->execute ( $mc, $main::now ) }
+		$sth->finish if $sth;
+		$query = 'commit';
+		$dbh->commit;
+
+		print "done.\n";
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("InitDB failed.\n");
+	}
+	Disconnect($dbh);
 }
 
 
@@ -248,51 +1616,60 @@
 		$where = "WHERE $where";
 		&misc::Prt("RDEV:Reading devices $where\n");
 	}
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 1});
-	my $sth = $dbh->prepare("SELECT * FROM devices $where");
-	$sth->execute();
-	if($sth->rows){
-		undef (%main::dev);									# Replace entries only when we got some new ones. Avoid problems in moni.pl while nedi.pl updates devices
-	}
-	while ((my @f) = $sth->fetchrow_array) {
-		$main::dev{$f[0]}{ip} = &misc::Dec2Ip($f[1]);
-		$main::dev{$f[0]}{oi} = &misc::Dec2Ip($f[19]);
-		$main::dev{$f[0]}{sn} = $f[2];
-		$main::dev{$f[0]}{ty} = $f[3];
-		$main::dev{$f[0]}{fs} = $f[4];
-		$main::dev{$f[0]}{ls} = $f[5];
-		$main::dev{$f[0]}{sv} = $f[6];
-		$main::dev{$f[0]}{de} = $f[7];
-		$main::dev{$f[0]}{os} = $f[8];
-		$main::dev{$f[0]}{bi} = $f[9];
-		$main::dev{$f[0]}{lo} = $f[10];
-		$main::dev{$f[0]}{rc} = $f[11];
-		$main::dev{$f[0]}{vd} = $f[12];
-		$main::dev{$f[0]}{vm} = $f[13];
-		$main::dev{$f[0]}{rv} = $f[14]  & 3;							# 1st 2 bits, SNMP read version
-		$main::dev{$f[0]}{wv} = ($f[14] & 12) / 4;						# 2nd 2 bits, SNMP write version
-		$main::dev{$f[0]}{hc} = $f[14]  & 192;							# 8th bit, HC, 7th bit using RFC2233
-		$main::dev{$f[0]}{rc} = $f[15];								# SNMP read community
-		$main::dev{$f[0]}{cp} = $f[16];								# CLI port (0=new,1=impossible,22=ssh,anything else=telnet)
-		$main::dev{$f[0]}{us} = $f[17];
-		$main::dev{$f[0]}{ic} = $f[18];
-		$main::dev{$f[0]}{cpu}= $f[20];
-		$main::dev{$f[0]}{mcp}= $f[21];
-		$main::dev{$f[0]}{tmp}= $f[22];
-		$main::dev{$f[0]}{cuv}= $f[23];
-		$main::dev{$f[0]}{cul}= $f[24];
-		$main::dev{$f[0]}{so} = $f[25];
-		$main::dev{$f[0]}{wc} = $f[26];								# SNMP write community
-		$misc::snmpini{$main::dev{$f[0]}{ip}}{rv} = $main::dev{$f[0]}{rv};			# Tie comm & ver to IP,
-		$misc::snmpini{$main::dev{$f[0]}{ip}}{rc} = $main::dev{$f[0]}{rc};
-		$misc::snmpini{$main::dev{$f[0]}{ip}}{na} = $f[0];
-		$misc::snmpini{$main::dev{$f[0]}{oi}}{rv} = $main::dev{$f[0]}{rv};			# it's all we have at first
-		$misc::snmpini{$main::dev{$f[0]}{oi}}{rc} = $main::dev{$f[0]}{rc};
-		$misc::snmpini{$main::dev{$f[0]}{oi}}{na} = $f[0];
-		$npdev++;
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
+	my $query = '';
+	eval {
+		$query = "SELECT * FROM devices $where";
+		my $sth = $dbh->prepare($query);
+		$sth->execute();
+		if($sth->rows){
+			undef (%main::dev);									# Replace entries only when we got some new ones. Avoid problems in moni.pl while nedi.pl updates devices
+		}
+		while ((my @f) = $sth->fetchrow_array) {
+			$main::dev{$f[0]}{ip} = &misc::Dec2Ip($f[1]);
+			$main::dev{$f[0]}{oi} = &misc::Dec2Ip($f[19]);
+			$main::dev{$f[0]}{sn} = $f[2];
+			$main::dev{$f[0]}{ty} = $f[3];
+			$main::dev{$f[0]}{fs} = $f[4];
+			$main::dev{$f[0]}{ls} = $f[5];
+			$main::dev{$f[0]}{sv} = $f[6];
+			$main::dev{$f[0]}{de} = $f[7];
+			$main::dev{$f[0]}{os} = $f[8];
+			$main::dev{$f[0]}{bi} = $f[9];
+			$main::dev{$f[0]}{lo} = $f[10];
+			$main::dev{$f[0]}{rc} = $f[11];
+			$main::dev{$f[0]}{vd} = $f[12];
+			$main::dev{$f[0]}{vm} = $f[13];
+			$main::dev{$f[0]}{rv} = $f[14]  & 3;							# 1st 2 bits, SNMP read version
+			$main::dev{$f[0]}{wv} = ($f[14] & 12) / 4;						# 2nd 2 bits, SNMP write version
+			$main::dev{$f[0]}{hc} = $f[14]  & 192;							# 8th bit, HC, 7th bit using RFC2233
+			$main::dev{$f[0]}{rc} = $f[15];								# SNMP read community
+			$main::dev{$f[0]}{cp} = $f[16];								# CLI port (0=new,1=impossible,22=ssh,anything else=telnet)
+			$main::dev{$f[0]}{us} = $f[17];
+			$main::dev{$f[0]}{ic} = $f[18];
+			$main::dev{$f[0]}{cpu}= $f[20];
+			$main::dev{$f[0]}{mcp}= $f[21];
+			$main::dev{$f[0]}{tmp}= $f[22];
+			$main::dev{$f[0]}{cuv}= $f[23];
+			$main::dev{$f[0]}{cul}= $f[24];
+			$main::dev{$f[0]}{so} = $f[25];
+			$main::dev{$f[0]}{wc} = $f[26];								# SNMP write community
+			$misc::snmpini{$main::dev{$f[0]}{ip}}{rv} = $main::dev{$f[0]}{rv};			# Tie comm & ver to IP,
+			$misc::snmpini{$main::dev{$f[0]}{ip}}{rc} = $main::dev{$f[0]}{rc};
+			$misc::snmpini{$main::dev{$f[0]}{ip}}{na} = $f[0];
+			$misc::snmpini{$main::dev{$f[0]}{oi}}{rv} = $main::dev{$f[0]}{rv};			# it's all we have at first
+			$misc::snmpini{$main::dev{$f[0]}{oi}}{rc} = $main::dev{$f[0]}{rc};
+			$misc::snmpini{$main::dev{$f[0]}{oi}}{na} = $f[0];
+			$npdev++;
+		}
+		$sth->finish if $sth;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("ReadDev failed.\n");
 	}
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 
 	&misc::Prt("RDEV:$npdev devices read from $misc::dbname.devices\n");
 }
@@ -313,20 +1690,29 @@
 
 	my $nlink = 0;
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 1});
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
 	my $where = ($_[0])?"WHERE $_[0]":"";
-	my $sth = $dbh->prepare("SELECT * FROM links $where");
-	$sth->execute();
-	while ((my @l) = $sth->fetchrow_array) {
-		$main::link{$l[1]}{$l[2]}{$l[3]}{$l[4]}{bw} = $l[5];
-		$main::link{$l[1]}{$l[2]}{$l[3]}{$l[4]}{ty} = $l[6];
-		$main::link{$l[1]}{$l[2]}{$l[3]}{$l[4]}{pw} = $l[7];
-		$main::link{$l[1]}{$l[2]}{$l[3]}{$l[4]}{du} = $l[8];
-		$main::link{$l[1]}{$l[2]}{$l[3]}{$l[4]}{vl} = $l[9];
-		$nlink++;
+	my $query = '';
+	eval {
+		$query = "SELECT * FROM links $where";
+		my $sth = $dbh->prepare($query);
+		$sth->execute();
+		while ((my @l) = $sth->fetchrow_array) {
+			$main::link{$l[1]}{$l[2]}{$l[3]}{$l[4]}{bw} = $l[5];
+			$main::link{$l[1]}{$l[2]}{$l[3]}{$l[4]}{ty} = $l[6];
+			$main::link{$l[1]}{$l[2]}{$l[3]}{$l[4]}{pw} = $l[7];
+			$main::link{$l[1]}{$l[2]}{$l[3]}{$l[4]}{du} = $l[8];
+			$main::link{$l[1]}{$l[2]}{$l[3]}{$l[4]}{vl} = $l[9];
+			$nlink++;
+		}
+		$sth->finish if $sth;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("ReadLink failed.\n");
 	}
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 
 	&misc::Prt("RLNK:$nlink links ($where) read from $misc::dbname.links\n");
 }
@@ -347,40 +1733,49 @@
 
 	my $nnod = 0;
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 1});
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
 	my $where = ($_[0])?"WHERE $_[0]":"";
-	my $sth = $dbh->prepare("SELECT * FROM nodes $where");
-	$sth->execute();
-	while ((my @f) = $sth->fetchrow_array) {
-		if($f[8] and $misc::useivl and $f[8] =~ /$misc::useivl/){				# Avoid using IVL with vlid 0
-			$mc = $f[2].$f[8];
-		}else{
-			$mc = $f[2];
+	my $query = '';
+	eval {
+		$query = "SELECT * FROM nodes $where";
+		my $sth = $dbh->prepare($query);
+		$sth->execute();
+		while ((my @f) = $sth->fetchrow_array) {
+			if($f[8] and $misc::useivl and $f[8] =~ /$misc::useivl/){				# Avoid using IVL with vlid 0
+				$mc = $f[2].$f[8];
+			}else{
+				$mc = $f[2];
+			}
+			$main::nod{$mc}{na} = $f[0];
+			$main::nod{$mc}{ip} = &misc::Dec2Ip($f[1]);
+			$main::nod{$mc}{nv} = $f[3];
+			$main::nod{$mc}{fs} = $f[4];
+			$main::nod{$mc}{ls} = $f[5];
+			$main::nod{$mc}{dv} = $f[6];
+			$main::nod{$mc}{if} = $f[7];
+			$main::nod{$mc}{vl} = $f[8];
+			$main::nod{$mc}{im} = $f[9];
+			$main::nod{$mc}{iu} = $f[10];
+			$main::nod{$mc}{ic} = $f[11];
+			$main::nod{$mc}{au} = $f[12];
+			$main::nod{$mc}{ac} = $f[13];
+			$main::nod{$mc}{al} = $f[14];
+			$main::nod{$mc}{av} = $f[15];
+			$main::nod{$mc}{tp} = $f[16];
+			$main::nod{$mc}{up} = $f[17];
+			$main::nod{$mc}{os} = $f[18];
+			$main::nod{$mc}{ty} = $f[19];
+			$main::nod{$mc}{ou} = $f[20];
+			$nnod++;
 		}
-		$main::nod{$mc}{na} = $f[0];
-		$main::nod{$mc}{ip} = &misc::Dec2Ip($f[1]);
-		$main::nod{$mc}{nv} = $f[3];
-		$main::nod{$mc}{fs} = $f[4];
-		$main::nod{$mc}{ls} = $f[5];
-		$main::nod{$mc}{dv} = $f[6];
-		$main::nod{$mc}{if} = $f[7];
-		$main::nod{$mc}{vl} = $f[8];
-		$main::nod{$mc}{im} = $f[9];
-		$main::nod{$mc}{iu} = $f[10];
-		$main::nod{$mc}{ic} = $f[11];
-		$main::nod{$mc}{au} = $f[12];
-		$main::nod{$mc}{ac} = $f[13];
-		$main::nod{$mc}{al} = $f[14];
-		$main::nod{$mc}{av} = $f[15];
-		$main::nod{$mc}{tp} = $f[16];
-		$main::nod{$mc}{up} = $f[17];
-		$main::nod{$mc}{os} = $f[18];
-		$main::nod{$mc}{ty} = $f[19];
-		$main::nod{$mc}{ou} = $f[20];
-		$nnod++;
+		$sth->finish if $sth;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("ReadNod failed.\n");
 	}
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 
 	&misc::Prt("RNOD:$nnod nodes read ($where) from $misc::dbname.nodes\n");
 }
@@ -403,45 +1798,65 @@
 	my $cfg  = join("\n",@misc::curcfg);
 	my $chg  = "";
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 1});
-	my $sth = $dbh->prepare("SELECT config,changes FROM configs where device = \"$dv\"");
-	$sth->execute();
-
-	if($sth->rows == 0 and !$main::opt{t}){								# No previous config found, therefore write new.
-		$sth = $dbh->prepare("INSERT INTO configs(device,config,changes,time) VALUES ( ?,?,?,? )");
-		$sth->execute ($dv,$cfg,$chg,$main::now);
-		&misc::WriteCfg($dv) if $main::opt{'B'};
-		&misc::Prt("","Bn");
-		&Insert('events','level,time,source,info,class,device',"\"100\",\"$main::now\",\"$dv\",\"New config with ".length($cfg)." characters added\",\"cfgn\",\"$dv\"") if $misc::notify =~ /b/i;
-	}elsif($sth->rows == 1){									# Previous config found, get changes
-		my @pc = $sth->fetchrow_array;
-		my @pcfg = split(/\n/,$pc[0]);
-		my $achg = &misc::GetChanges(\@pcfg, \@misc::curcfg);
-		if(!$main::opt{t}){
-			if($achg){									# Only write new, if changed
-				$chg  = $pc[1] . "#--- " . localtime($main::now) ." ---#\n". $achg;
-				$dbh->do("DELETE FROM configs where device = \"$dv\"");
-				$sth = $dbh->prepare("INSERT INTO configs(device,config,changes,time) VALUES ( ?,?,?,? )");
-				$sth->execute ($dv,$cfg,$chg,$main::now);
-				&misc::WriteCfg($dv) if $main::opt{B};
-				my $len = length($achg);
-				$achg =~ s/["']//g;
-				my $msg = "Config changed by $len characters:\n$achg\n";
-				&misc::Prt("WCFG:$msg\n","Bu");
-				if($misc::notify =~ /b/i){
-					$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /B/;
-					$achg =~ s/[\r\n]/, /g;
-					$msg = "Config changed - " . (($len > 100)?substr($achg,0,100)."...":$achg);
-					my $lev = ($len > 1000)?100:50;
-					&Insert('events','level,time,source,info,class,device',"\"$lev\",\"$main::now\",\"$dv\",\"$msg\",\"cfgc\",\"$dv\"");
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
+	my $query = '';
+	eval {
+		$query = "SELECT config,changes FROM configs where device = '$dv'";
+		my $sth = $dbh->prepare($query);
+		$sth->execute();
+
+		if($sth->rows == 0 and !$main::opt{t}){								# No previous config found, therefore write new.
+			$query = "INSERT INTO configs(device,config,changes,time) VALUES ( ?,?,?,? )";
+			$sth = $dbh->prepare($query);
+			$sth->execute ($dv,$cfg,$chg,$main::now);
+			&misc::WriteCfg($dv) if $main::opt{'B'};
+			&misc::Prt("","Bn");
+			if ($misc::notify =~ /b/i) {
+				my $quoted_source = $dbh->quote($dv);
+				my $quoted_info   = $dbh->quote('New config with '.length($cfg).' characters added');
+				my $quoted_device = $dbh->quote($dv);
+				&Insert('events','level,time,source,info,class,device',"100,$main::now,$quoted_source,$quoted_info,'cfgn',$quoted_device");
+			}
+		}elsif($sth->rows == 1){									# Previous config found, get changes
+			my @pc = $sth->fetchrow_array;
+			my @pcfg = split(/\n/,$pc[0]);
+			my $achg = &misc::GetChanges(\@pcfg, \@misc::curcfg);
+			if(!$main::opt{t}){
+				if($achg){									# Only write new, if changed
+					$chg  = $pc[1] . "#--- " . localtime($main::now) ." ---#\n". $achg;
+					$query = "DELETE FROM configs where device = '$dv'";
+					$dbh->do($query);
+					$query = "INSERT INTO configs(device,config,changes,time) VALUES ( ?,?,?,? )";
+					$sth = $dbh->prepare($query);
+					$sth->execute ($dv,$cfg,$chg,$main::now);
+					&misc::WriteCfg($dv) if $main::opt{B};
+					my $len = length($achg);
+					$achg =~ s/["']//g;
+					my $msg = "Config changed by $len characters:\n$achg\n";
+					&misc::Prt("WCFG:$msg\n","Bu");
+					if($misc::notify =~ /b/i){
+						$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /B/;
+						$achg =~ s/[\r\n]/, /g;
+						$msg = "Config changed - " . (($len > 100)?substr($achg,0,100)."...":$achg);
+						my $lev = ($len > 1000)?100:50;
+						my $quoted_source = $dbh->quote($dv);
+						my $quoted_info   = $dbh->quote($msg);
+						my $quoted_device = $dbh->quote($dv);
+						&Insert('events','level,time,source,info,class,device',"$lev,$main::now,$quoted_source,$quoted_info,'cfgc',$quoted_device");
+					}
+				} else {
+				    &misc::WriteCfg($dv) if $main::opt{B} and ! -e "$misc::nedipath/conf/$dv";	# Write config file anyway if no dev folder exists
 				}
-			} else {
-			    &misc::WriteCfg($dv) if $main::opt{B} and ! -e "$misc::nedipath/conf/$dv";	# Write config file anyway if no dev folder exists
 			}
 		}
+		$sth->finish if $sth;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("BackupCfg failed.\n");
 	}
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 }
 
 
@@ -487,51 +1902,166 @@
 	my $dip = &misc::Ip2Dec($main::dev{$dv}{ip});
 	my $doi = &misc::Ip2Dec($main::dev{$dv}{oi});
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 0});
-	$dbh->do("DELETE FROM  devices where device = \"$dv\"");
-	$sth = $dbh->prepare("INSERT INTO devices(	device,devip,serial,type,firstdis,lastdis,services,
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 0 });
+	my $query = '';
+	eval {
+		my $quoted_device = $dbh->quote($dv);
+		$query = "DELETE FROM devices where device = $quoted_device";
+		$dbh->do($query);
+		## We test all the field lengths for the new device, because we have
+		## seen some apparently malfunctioning hardware in the field return
+		## some string that exceeds the available size of the database field,
+		## and the response to the insertion attempt was ugly.  Having the
+		## database-field lengths hardcoded here is a hack, and fragile if
+		## the table definition ever changes.  A better way of handling
+		## this should be found.
+		my $field  = undef;
+		my $maxlen = undef;
+		if ( defined($dv) and length($dv) > 64 ) {
+			$field  = 'device';
+			$maxlen = 64;
+		}
+		elsif ( defined( $main::dev{$dv}{sn} ) and length( $main::dev{$dv}{sn} ) > 32 ) {
+			$field  = 'serial';
+			$maxlen = 32;
+		}
+		elsif ( defined( $main::dev{$dv}{ty} ) and length( $main::dev{$dv}{ty} ) > 32 ) {
+			$field  = 'type';
+			$maxlen = 32;
+		}
+		elsif ( defined( $main::dev{$dv}{de} ) and length( $main::dev{$dv}{de} ) > 255 ) {
+			$field  = 'description';
+			$maxlen = 255;
+		}
+		elsif ( defined( $main::dev{$dv}{os} ) and length( $main::dev{$dv}{os} ) > 16 ) {
+			$field  = 'devos';
+			$maxlen = 16;
+		}
+		elsif ( defined( $main::dev{$dv}{bi} ) and length( $main::dev{$dv}{bi} ) > 64 ) {
+			$field  = 'bootimage';
+			$maxlen = 64;
+		}
+		elsif ( defined( $main::dev{$dv}{lo} ) and length( $main::dev{$dv}{lo} ) > 255 ) {
+			$field  = 'location';
+			$maxlen = 255;
+		}
+		elsif ( defined( $main::dev{$dv}{co} ) and length( $main::dev{$dv}{co} ) > 255 ) {
+			$field  = 'contact';
+			$maxlen = 255;
+		}
+		elsif ( defined( $main::dev{$dv}{vd} ) and length( $main::dev{$dv}{vd} ) > 32 ) {
+			$field  = 'vtpdomain';
+			$maxlen = 32;
+		}
+		elsif ( defined( $main::dev{$dv}{rc} ) and length( $main::dev{$dv}{rc} ) > 32 ) {
+			$field  = 'readcomm';
+			$maxlen = 32;
+		}
+		elsif ( defined( $main::dev{$dv}{us} ) and length( $main::dev{$dv}{us} ) > 32 ) {
+			$field  = 'login';
+			$maxlen = 32;
+		}
+		elsif ( defined( $main::dev{$dv}{ic} ) and length( $main::dev{$dv}{ic} ) > 16 ) {
+			$field  = 'icon';
+			$maxlen = 16;
+		}
+		elsif ( defined( $main::dev{$dv}{cul} ) and length( $main::dev{$dv}{cul} ) > 32 ) {
+			$field  = 'cuslabel';
+			$maxlen = 32;
+		}
+		elsif ( defined( $main::dev{$dv}{so} ) and length( $main::dev{$dv}{so} ) > 255 ) {
+			$field  = 'sysobjid';
+			$maxlen = 255;
+		}
+		elsif ( defined( $main::dev{$dv}{wc} ) and length( $main::dev{$dv}{wc} ) > 32 ) {
+			$field  = 'writecomm';
+			$maxlen = 32;
+		}
+		if ($field) {
+			print "\n";
+			print "ERROR:  Field \"$field\" exceeds maximum $maxlen allowed characters;\n";
+			print "        this device will be ignored:\n";
+			print "             device:  $dv\n";
+			print "              devip:  $dip\n";
+			print "             serial:  $main::dev{$dv}{sn}\n";
+			print "               type:  $main::dev{$dv}{ty}\n";
+			print "           firstdis:  $main::dev{$dv}{fs}\n";
+			print "            lastdis:  $main::dev{$dv}{ls}\n";
+			print "           services:  $main::dev{$dv}{sv}\n";
+			print "        description:  $main::dev{$dv}{de}\n";
+			print "              devos:  $main::dev{$dv}{os}\n";
+			print "          bootimage:  $main::dev{$dv}{bi}\n";
+			print "           location:  $main::dev{$dv}{lo}\n";
+			print "            contact:  $main::dev{$dv}{co}\n";
+			print "          vtpdomain:  $main::dev{$dv}{vd}\n";
+			print "            vtpmode:  $main::dev{$dv}{vm}\n";
+			print "        snmpversion:  $snmpver\n";
+			print "           readcomm:  $main::dev{$dv}{rc}\n";
+			print "            cliport:  $main::dev{$dv}{cp}\n";
+			print "              login:  $main::dev{$dv}{us}\n";
+			print "               icon:  $main::dev{$dv}{ic}\n";
+			print "             origip:  $doi\n";
+			print "                cpu:  $main::dev{$dv}{cpu}\n";
+			print "             memcpu:  $main::dev{$dv}{mcp}\n";
+			print "               temp:  $main::dev{$dv}{tmp}\n";
+			print "           cusvalue:  $main::dev{$dv}{cuv}\n";
+			print "           cuslabel:  $main::dev{$dv}{cul}\n";
+			print "           sysobjid:  $main::dev{$dv}{so}\n";
+			print "          writecomm:  $main::dev{$dv}{wc}\n";
+		}
+		else {
+			$query = "INSERT INTO devices(	device,devip,serial,type,firstdis,lastdis,services,
 							description,devos,bootimage,location,contact,
 							vtpdomain,vtpmode,snmpversion,readcomm,cliport,login,
 							icon,origip,cpu,memcpu, temp, cusvalue, cuslabel, sysobjid, writecomm
-							) VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )");
-	$sth->execute (	$dv,
-			$dip,
-			$main::dev{$dv}{sn},
-			$main::dev{$dv}{ty},
-			$main::dev{$dv}{fs},
-			$main::dev{$dv}{ls},
-			$main::dev{$dv}{sv},
-			$main::dev{$dv}{de},
-			$main::dev{$dv}{os},
-			$main::dev{$dv}{bi},
-			$main::dev{$dv}{lo},
-			$main::dev{$dv}{co},
-			$main::dev{$dv}{vd},
-			$main::dev{$dv}{vm},
-			$snmpver,
-			$main::dev{$dv}{rc},
-			$main::dev{$dv}{cp},
-			$main::dev{$dv}{us},
-			$main::dev{$dv}{ic},
-			$doi,
-			$main::dev{$dv}{cpu},
-			$main::dev{$dv}{mcp},
-			$main::dev{$dv}{tmp},
-			$main::dev{$dv}{cuv},
-			$main::dev{$dv}{cul},
-			$main::dev{$dv}{so},
-			$main::dev{$dv}{wc}
-			);
-	$dbh->commit;
-	$sth->finish if $sth;
-	$dbh->disconnect;
+							) VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )";
+			$sth = $dbh->prepare($query);
+			$sth->execute (	$dv,
+					$dip,
+					$main::dev{$dv}{sn},
+					$main::dev{$dv}{ty},
+					$main::dev{$dv}{fs},
+					$main::dev{$dv}{ls},
+					$main::dev{$dv}{sv},
+					$main::dev{$dv}{de},
+					$main::dev{$dv}{os},
+					$main::dev{$dv}{bi},
+					$main::dev{$dv}{lo},
+					$main::dev{$dv}{co},
+					$main::dev{$dv}{vd},
+					$main::dev{$dv}{vm},
+					$snmpver,
+					$main::dev{$dv}{rc},
+					$main::dev{$dv}{cp},
+					$main::dev{$dv}{us},
+					$main::dev{$dv}{ic},
+					$doi,
+					$main::dev{$dv}{cpu},
+					$main::dev{$dv}{mcp},
+					$main::dev{$dv}{tmp},
+					$main::dev{$dv}{cuv},
+					$main::dev{$dv}{cul},
+					$main::dev{$dv}{so},
+					$main::dev{$dv}{wc}
+					);
+			$sth->finish if $sth;
+			$query = 'commit';
+			$dbh->commit;
+		}
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("WriteDev failed.\n");
+	}
+	Disconnect($dbh);
 
 	&misc::Prt("WDEV:$dv written to $misc::dbname.devices\n");
 }
 
 =head2 FUNCTION ReadAddr()
 
-Reads IP and MAC addresses of all IF in DB for topology awareness. 
+Reads IP and MAC addresses of all IF in DB for topology awareness.
 
 B<Options> -
 
@@ -544,24 +2074,35 @@
 
 	my $nmac = 0;
 	my $nip  = 0;
-		
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 0});
-	my $sth = $dbh->prepare("SELECT device,ifmac FROM interfaces where ifmac !=\"\"");
-	$sth->execute();
-	while((my @i) = $sth->fetchrow_array){
-		$misc::ifmac{$i[1]}{$i[0]}++;
-		$nmac++;
-	}
-
-	$sth = $dbh->prepare("SELECT device,inet_ntoa(ifip) FROM networks where ifip != 2130706433");
-	$sth->execute();
-	while ((my @i) = $sth->fetchrow_array) {
-		$misc::ifip{$i[1]}{$i[0]}++;
-		&misc::Prt("RADDR:IP $i[1] found on $misc::ifip{$i[1]}{$i[0]} interfaces\n") if $misc::ifip{$i[1]}{$i[0]} > 1;
-		$nip++;
+
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError=> 0, AutoCommit => 0 });
+	my $query = '';
+	eval {
+		$query = "SELECT device,ifmac FROM interfaces where ifmac != ''";
+		my $sth = $dbh->prepare($query);
+		$sth->execute();
+		while((my @i) = $sth->fetchrow_array){
+			$misc::ifmac{$i[1]}{$i[0]}++;
+			$nmac++;
+		}
+		$sth->finish if $sth;
+
+		$query = "SELECT device,inet_ntoa(ifip) FROM networks where ifip != 2130706433";
+		$sth = $dbh->prepare($query);
+		$sth->execute();
+		while ((my @i) = $sth->fetchrow_array) {
+			$misc::ifip{$i[1]}{$i[0]}++;
+			&misc::Prt("RADDR:IP $i[1] found on $misc::ifip{$i[1]}{$i[0]} interfaces\n") if $misc::ifip{$i[1]}{$i[0]} > 1;
+			$nip++;
+		}
+		$sth->finish if $sth;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("ReadAddr failed.\n");
 	}
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 
 	&misc::Prt("RADDR:$nmac MAC & $nip IP addresses read.\n");
 }
@@ -582,42 +2123,51 @@
 	my $where   = ($_[0])?"WHERE $_[0]":"";
 	my $nint = 0;
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 0});
-	my $sth = $dbh->prepare("SELECT * FROM interfaces $where");
-	$sth->execute();
-	while((my @i) = $sth->fetchrow_array){
-		$main::int{$i[0]}{$i[2]}{ina} = $i[1];
-		$main::int{$i[0]}{$i[2]}{lty} = $i[3];
-		$main::int{$i[0]}{$i[2]}{typ} = $i[4];
-		$main::int{$i[0]}{$i[2]}{mac} = $i[5];
-		$main::int{$i[0]}{$i[2]}{des} = $i[6];
-		$main::int{$i[0]}{$i[2]}{ali} = $i[7];
-		$main::int{$i[0]}{$i[2]}{sta} = $i[8];
-		$main::int{$i[0]}{$i[2]}{spd} = $i[9];
-		$main::int{$i[0]}{$i[2]}{dpx} = $i[10];
-		$main::int{$i[0]}{$i[2]}{vid} = $i[11];
-		$main::int{$i[0]}{$i[2]}{ioc} = $i[12];
-		$main::int{$i[0]}{$i[2]}{ier} = $i[13];
-		$main::int{$i[0]}{$i[2]}{ooc} = $i[14];
-		$main::int{$i[0]}{$i[2]}{oer} = $i[15];
-		$main::int{$i[0]}{$i[2]}{dio} = $i[16];
-		$main::int{$i[0]}{$i[2]}{die} = $i[17];
-		$main::int{$i[0]}{$i[2]}{doo} = $i[18];
-		$main::int{$i[0]}{$i[2]}{doe} = $i[19];
-		$main::int{$i[0]}{$i[2]}{poe} = $i[21];
-		$main::int{$i[0]}{$i[2]}{idi} = 0;
-		$main::int{$i[0]}{$i[2]}{odi} = 0;
-		$main::int{$i[0]}{$i[2]}{ibr} = 0;
-
-		$main::int{$i[0]}{$i[2]}{plt} = $i[3];							# Needed for link tracking in WriteInt
-		$main::int{$i[0]}{$i[2]}{psp} = $i[9];
-		$main::int{$i[0]}{$i[2]}{pdp} = $i[10];
-		$main::int{$i[0]}{$i[2]}{pvi} = $i[11];
-		$main::int{$i[0]}{$i[2]}{pco} = $i[20];
-		$nint++;
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError=> 0, AutoCommit => 0 });
+	my $query = '';
+	eval {
+		$query = "SELECT * FROM interfaces $where";
+		my $sth = $dbh->prepare($query);
+		$sth->execute();
+		while((my @i) = $sth->fetchrow_array){
+			$main::int{$i[0]}{$i[2]}{ina} = $i[1];
+			$main::int{$i[0]}{$i[2]}{lty} = $i[3];
+			$main::int{$i[0]}{$i[2]}{typ} = $i[4];
+			$main::int{$i[0]}{$i[2]}{mac} = $i[5];
+			$main::int{$i[0]}{$i[2]}{des} = $i[6];
+			$main::int{$i[0]}{$i[2]}{ali} = $i[7];
+			$main::int{$i[0]}{$i[2]}{sta} = $i[8];
+			$main::int{$i[0]}{$i[2]}{spd} = $i[9];
+			$main::int{$i[0]}{$i[2]}{dpx} = $i[10];
+			$main::int{$i[0]}{$i[2]}{vid} = $i[11];
+			$main::int{$i[0]}{$i[2]}{ioc} = $i[12];
+			$main::int{$i[0]}{$i[2]}{ier} = $i[13];
+			$main::int{$i[0]}{$i[2]}{ooc} = $i[14];
+			$main::int{$i[0]}{$i[2]}{oer} = $i[15];
+			$main::int{$i[0]}{$i[2]}{dio} = $i[16];
+			$main::int{$i[0]}{$i[2]}{die} = $i[17];
+			$main::int{$i[0]}{$i[2]}{doo} = $i[18];
+			$main::int{$i[0]}{$i[2]}{doe} = $i[19];
+			$main::int{$i[0]}{$i[2]}{poe} = $i[21];
+			$main::int{$i[0]}{$i[2]}{idi} = 0;
+			$main::int{$i[0]}{$i[2]}{odi} = 0;
+			$main::int{$i[0]}{$i[2]}{ibr} = 0;
+
+			$main::int{$i[0]}{$i[2]}{plt} = $i[3];		# Needed for link tracking in WriteInt
+			$main::int{$i[0]}{$i[2]}{psp} = $i[9];
+			$main::int{$i[0]}{$i[2]}{pdp} = $i[10];
+			$main::int{$i[0]}{$i[2]}{pvi} = $i[11];
+			$main::int{$i[0]}{$i[2]}{pco} = $i[20];
+			$nint++;
+		}
+		$sth->finish if $sth;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("ReadInt failed.\n");
 	}
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 
 	&misc::Prt("RIF :$nint IF read ($where) from $misc::dbname.interfaces\n");
 }
@@ -627,7 +2177,7 @@
 
 Write the interfaces table, calculate deltas and notify if desired.
 
-B<Options> devicename
+B<Options> devicename, skip selection(s)
 
 B<Globals> main::int
 
@@ -644,148 +2194,199 @@
 	my $totpoe = 0;
 	my $avgpoe = 0;
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 0});
-	$dbh->do("DELETE FROM  interfaces where device = \"$dv\"");
-	$sth = $dbh->prepare("INSERT INTO interfaces(	device,ifname,ifidx,linktype,iftype,ifmac,ifdesc,alias,ifstat,speed,duplex,pvid,
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 0 });
+	my $query = '';
+	eval {
+		$query = "DELETE FROM interfaces where device = '$dv'";
+		$dbh->do($query);
+		$query = "INSERT INTO interfaces(	device,ifname,ifidx,linktype,iftype,ifmac,ifdesc,alias,ifstat,speed,duplex,pvid,
 							inoct,inerr,outoct,outerr,dinoct,dinerr,doutoct,douterr,comment,poe)
-							VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )");
-	foreach my $i ( sort keys %{$main::int{$dv}} ){
-		if($main::int{$dv}{$i}{ina}){
-			if(exists $main::int{$dv}{$i}{psp}){						# Check delta for existing IFs
-				my $iftxt = "$main::int{$dv}{$i}{ina} ";
-				$iftxt .= " - $main::int{$dv}{$i}{ali} " if $main::int{$dv}{$i}{ali};
-				my $lvl = 100;
-				if($main::int{$dv}{$i}{lty}){
-					$iftxt .= "(is $main::int{$dv}{$i}{com})";
-					$lvl = 150;
-				}elsif($main::int{$dv}{$i}{plt}){
-					$iftxt .= "(was $main::int{$dv}{$i}{pco})";
-					$lvl = 150;
-				}
-
-				unless($skip =~ /t/){
-					if( ($misc::notify =~ /t/i or $misc::notify =~ /l/i and $main::int{$dv}{$i}{lty}) and $main::int{$dv}{$i}{spd}){
-						my $rioct = int( $main::int{$dv}{$i}{dio} * 800 / ($misc::discostep * $main::int{$dv}{$i}{spd}) );
-						my $rooct = int( $main::int{$dv}{$i}{doo} * 800 / ($misc::discostep * $main::int{$dv}{$i}{spd}) );
-						if($rioct > $misc::trfa and $rioct < 101){
-							my $msg = "$iftxt having $rioct% inbound traffic exeeds alert threshold of ${misc::trfa}% for ${misc::discostep}s!";
-							&Insert('events','level,time,source,info,class,device',"\"200\",\"$main::now\",\"$dv\",\"$msg\",\"trfa\",\"$dv\"");
-							$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /T/ or $misc::notify =~ /L/ and $main::int{$dv}{$i}{lty};
-							$nalr++;
-						}elsif($rioct > $misc::trfw and $rioct < 101){
-							my $msg = "$iftxt having $rioct% inbound traffic exeeds warning threshold of ${misc::trfw}% for ${misc::discostep}s";
-							&Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$dv\",\"$msg\",\"trfw\",\"$dv\"");
-							$nwar++;
-						}
-						if($rooct > $misc::trfa and $rooct < 101){
-							my $msg = "$iftxt having $rooct% outbound traffic exeeds alert threshold of ${misc::trfa}% for ${misc::discostep}s!";
-							&Insert('events','level,time,source,info,class,device',"\"200\",\"$main::now\",\"$dv\",\"$msg\",\"trfa\",\"$dv\"");
-							$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /T/ or $misc::notify =~ /L/ and $main::int{$dv}{$i}{lty};
-							$nalr++;
-						}elsif($rooct > $misc::trfw and $rooct < 101){
-							my $msg = "$iftxt having $rooct% outbound traffic exeeds warning threshold of ${misc::trfw}% for ${misc::discostep}s";
-							&Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$dv\",\"$msg\",\"trfw\",\"$dv\"");
-							$nwar++;
-						}
+							VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )";
+		$sth = $dbh->prepare($query);
+		foreach my $i ( sort keys %{$main::int{$dv}} ){
+			if($main::int{$dv}{$i}{ina}){
+				if(exists $main::int{$dv}{$i}{psp}){						# Check delta for existing IFs
+					my $iftxt = "$main::int{$dv}{$i}{ina} ";
+					$iftxt .= " - $main::int{$dv}{$i}{ali} " if $main::int{$dv}{$i}{ali};
+					my $lvl = 100;
+					if($main::int{$dv}{$i}{lty}){
+						$iftxt .= defined( $main::int{$dv}{$i}{com} ) ? "(is $main::int{$dv}{$i}{com})" : "(is not defined)";
+						$lvl = 150;
+					}elsif($main::int{$dv}{$i}{plt}){
+						$iftxt .= "(was $main::int{$dv}{$i}{pco})";
+						$lvl = 150;
 					}
-				}
 
-				unless($skip =~ /e/){
-					if($misc::notify =~ /e/i or $misc::notify =~ /l/i and $main::int{$dv}{$i}{lty}){
-						if($main::int{$dv}{$i}{typ} != 71){						# Ignore Wlan IF
-							if($main::int{$dv}{$i}{die} > $misc::discostep){
-								my $msg = "$iftxt having $main::int{$dv}{$i}{die} inbound errors for ${misc::discostep}s!";
-								&Insert('events','level,time,source,info,class,device',"\"200\",\"$main::now\",\"$dv\",\"$msg\",\"trfe\",\"$dv\"");
-								$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /E/ or $misc::notify =~ /L/ and $main::int{$dv}{$i}{lty};
+					unless($skip =~ /t/){
+						if( ($misc::notify =~ /t/i or $misc::notify =~ /l/i and $main::int{$dv}{$i}{lty}) and $main::int{$dv}{$i}{spd}){
+							my $rioct = int( $main::int{$dv}{$i}{dio} * 800 / ($misc::discostep * $main::int{$dv}{$i}{spd}) );
+							my $rooct = int( $main::int{$dv}{$i}{doo} * 800 / ($misc::discostep * $main::int{$dv}{$i}{spd}) );
+							if($rioct > $misc::trfa and $rioct < 101){
+								my $msg = "$iftxt having $rioct% inbound traffic exeeds alert threshold of ${misc::trfa}% for ${misc::discostep}s!";
+								my $quoted_source = $dbh->quote($dv);
+								my $quoted_info   = $dbh->quote($msg);
+								my $quoted_device = $dbh->quote($dv);
+								&Insert('events','level,time,source,info,class,device',"200,$main::now,$quoted_source,$quoted_info,'trfa',$quoted_device");
+								$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /T/ or $misc::notify =~ /L/ and $main::int{$dv}{$i}{lty};
 								$nalr++;
-							}elsif($main::int{$dv}{$i}{die} > $misc::discostep / 60){
-								my $msg = "$iftxt having $main::int{$dv}{$i}{die} inbound errors for ${misc::discostep}s";
-								&Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$dv\",\"$msg\",\"trfe\",\"$dv\"");						
+							}elsif($rioct > $misc::trfw and $rioct < 101){
+								my $msg = "$iftxt having $rioct% inbound traffic exeeds warning threshold of ${misc::trfw}% for ${misc::discostep}s";
+								my $quoted_source = $dbh->quote($dv);
+								my $quoted_info   = $dbh->quote($msg);
+								my $quoted_device = $dbh->quote($dv);
+								&Insert('events','level,time,source,info,class,device',"150,$main::now,$quoted_source,$quoted_info,'trfw',$quoted_device");
 								$nwar++;
 							}
-							if($main::int{$dv}{$i}{doe} > $misc::discostep){
-								my $msg = "$iftxt having $main::int{$dv}{$i}{doe} outbound errors for ${misc::discostep}s!";
-								&Insert('events','level,time,source,info,class,device',"\"200\",\"$main::now\",\"$dv\",\"$msg\",\"trfe\",\"$dv\"");
-								$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /E/ or $misc::notify =~ /L/ and $main::int{$dv}{$i}{lty};
+							if($rooct > $misc::trfa and $rooct < 101){
+								my $msg = "$iftxt having $rooct% outbound traffic exeeds alert threshold of ${misc::trfa}% for ${misc::discostep}s!";
+								my $quoted_source = $dbh->quote($dv);
+								my $quoted_info   = $dbh->quote($msg);
+								my $quoted_device = $dbh->quote($dv);
+								&Insert('events','level,time,source,info,class,device',"200,$main::now,$quoted_source,$quoted_info,'trfa',$quoted_device");
+								$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /T/ or $misc::notify =~ /L/ and $main::int{$dv}{$i}{lty};
 								$nalr++;
-							}elsif($main::int{$dv}{$i}{doe} > $misc::discostep / 60){
-								my $msg = "$iftxt having $main::int{$dv}{$i}{doe} outbound errors for ${misc::discostep}s";
-								&Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$dv\",\"$msg\",\"trfe\",\"$dv\"");						
+							}elsif($rooct > $misc::trfw and $rooct < 101){
+								my $msg = "$iftxt having $rooct% outbound traffic exeeds warning threshold of ${misc::trfw}% for ${misc::discostep}s";
+								my $quoted_source = $dbh->quote($dv);
+								my $quoted_info   = $dbh->quote($msg);
+								my $quoted_device = $dbh->quote($dv);
+								&Insert('events','level,time,source,info,class,device',"150,$main::now,$quoted_source,$quoted_info,'trfw',$quoted_device");
 								$nwar++;
 							}
 						}
 					}
-				}
-
-				if(!($main::int{$dv}{$i}{sta} & 4) and $main::int{$dv}{$i}{sta} & 128){			# 4 means adm stat is skipped and 128 it was disabled since last discovery
-					my $msg = "$iftxt has been disabled";
-					&misc::Prt("WIF :$msg\n");
-					if($misc::notify =~ /a/i or $misc::notify =~ /l/i and $main::int{$dv}{$i}{lty}){
-						&Insert('events','level,time,source,info,class,device',"\"$lvl\",\"$main::now\",\"$dv\",\"$msg\",\"nedi\",\"$dv\"");
-						$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /A/ or $misc::notify =~ /L/ and $main::int{$dv}{$i}{lty};
 
+					unless($skip =~ /e/){
+						if($misc::notify =~ /e/i or $misc::notify =~ /l/i and $main::int{$dv}{$i}{lty}){
+							if($main::int{$dv}{$i}{typ} != 71){						# Ignore Wlan IF
+								if($main::int{$dv}{$i}{die} > $misc::discostep){
+									my $msg = "$iftxt having $main::int{$dv}{$i}{die} inbound errors for ${misc::discostep}s!";
+									my $quoted_source = $dbh->quote($dv);
+									my $quoted_info   = $dbh->quote($msg);
+									my $quoted_device = $dbh->quote($dv);
+									&Insert('events','level,time,source,info,class,device',"200,$main::now,$quoted_source,$quoted_info,'trfe',$quoted_device");
+									$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /E/ or $misc::notify =~ /L/ and $main::int{$dv}{$i}{lty};
+									$nalr++;
+								}elsif($main::int{$dv}{$i}{die} > $misc::discostep / 60){
+									my $msg = "$iftxt having $main::int{$dv}{$i}{die} inbound errors for ${misc::discostep}s";
+									my $quoted_source = $dbh->quote($dv);
+									my $quoted_info   = $dbh->quote($msg);
+									my $quoted_device = $dbh->quote($dv);
+									&Insert('events','level,time,source,info,class,device',"150,$main::now,$quoted_source,$quoted_info,'trfe',$quoted_device");
+									$nwar++;
+								}
+								if($main::int{$dv}{$i}{doe} > $misc::discostep){
+									my $msg = "$iftxt having $main::int{$dv}{$i}{doe} outbound errors for ${misc::discostep}s!";
+									my $quoted_source = $dbh->quote($dv);
+									my $quoted_info   = $dbh->quote($msg);
+									my $quoted_device = $dbh->quote($dv);
+									&Insert('events','level,time,source,info,class,device',"200,$main::now,$quoted_source,$quoted_info,'trfe',$quoted_device");
+									$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /E/ or $misc::notify =~ /L/ and $main::int{$dv}{$i}{lty};
+									$nalr++;
+								}elsif($main::int{$dv}{$i}{doe} > $misc::discostep / 60){
+									my $msg = "$iftxt having $main::int{$dv}{$i}{doe} outbound errors for ${misc::discostep}s";
+									my $quoted_source = $dbh->quote($dv);
+									my $quoted_info   = $dbh->quote($msg);
+									my $quoted_device = $dbh->quote($dv);
+									&Insert('events','level,time,source,info,class,device',"150,$main::now,$quoted_source,$quoted_info,'trfe',$quoted_device");
+									$nwar++;
+								}
+							}
+						}
 					}
-				}
 
-				if(!($main::int{$dv}{$i}{sta} & 8) and $main::int{$dv}{$i}{sta} & 64){			# 8 means opr stat is skipped and 64 it went down since last discovery
-					my $msg = "$iftxt went down";
-					&misc::Prt("WIF :$msg\n");
-					if($misc::notify =~ /o/i or $misc::notify =~ /l/i and $main::int{$dv}{$i}{lty}){
-						&Insert('events','level,time,source,info,class,device',"\"$lvl\",\"$main::now\",\"$dv\",\"$msg\",\"nedi\",\"$dv\"");
-						$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /O/ or $misc::notify =~ /L/ and $main::int{$dv}{$i}{lty};
+					if(!($main::int{$dv}{$i}{sta} & 4) and $main::int{$dv}{$i}{sta} & 128){			# 4 means adm stat is skipped and 128 it was disabled since last discovery
+						my $msg = "$iftxt has been disabled";
+						&misc::Prt("WIF :$msg\n");
+						if($misc::notify =~ /a/i or $misc::notify =~ /l/i and $main::int{$dv}{$i}{lty}){
+							my $quoted_source = $dbh->quote($dv);
+							my $quoted_info   = $dbh->quote($msg);
+							my $quoted_device = $dbh->quote($dv);
+							&Insert('events','level,time,source,info,class,device',"$lvl,$main::now,$quoted_source,$quoted_info,'nedi',$quoted_device");
+							$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /A/ or $misc::notify =~ /L/ and $main::int{$dv}{$i}{lty};
+
+						}
 					}
-				}
 
-				if($misc::notify =~ /l/i and ($main::int{$dv}{$i}{lty} or $main::int{$dv}{$i}{plt}) ){
-					my $typc = ($main::int{$dv}{$i}{lty} ne $main::int{$dv}{$i}{plt})?" type ".(($main::int{$dv}{$i}{plt})?"from $main::int{$dv}{$i}{plt} ":"").(($main::int{$dv}{$i}{lty})?"to $main::int{$dv}{$i}{lty}":""):"";
-					my $spdc = ($main::int{$dv}{$i}{spd} ne $main::int{$dv}{$i}{psp})?" speed from ".&misc::DecFix($main::int{$dv}{$i}{psp})." to ".&misc::DecFix($main::int{$dv}{$i}{spd}):"";
-					my $dupc = ($main::int{$dv}{$i}{dpx} ne $main::int{$dv}{$i}{pdp})?" duplex from $main::int{$dv}{$i}{pdp} to $main::int{$dv}{$i}{dpx}":"";
-					if($typc or $spdc or $dupc){
-						my $msg  = "$iftxt changed$typc$spdc$dupc";
+					if(!($main::int{$dv}{$i}{sta} & 8) and $main::int{$dv}{$i}{sta} & 64){			# 8 means opr stat is skipped and 64 it went down since last discovery
+						my $msg = "$iftxt went down";
 						&misc::Prt("WIF :$msg\n");
-						&Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$dv\",\"$msg\",\"nedi\",\"$dv\"");
-						$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /L/;
+						if($misc::notify =~ /o/i or $misc::notify =~ /l/i and $main::int{$dv}{$i}{lty}){
+							my $quoted_source = $dbh->quote($dv);
+							my $quoted_info   = $dbh->quote($msg);
+							my $quoted_device = $dbh->quote($dv);
+							&Insert('events','level,time,source,info,class,device',"$lvl,$main::now,$quoted_source,$quoted_info,'nedi',$quoted_device");
+							$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /O/ or $misc::notify =~ /L/ and $main::int{$dv}{$i}{lty};
+						}
+					}
+
+					if($misc::notify =~ /l/i and ($main::int{$dv}{$i}{lty} or $main::int{$dv}{$i}{plt}) ){
+						my $typc = ($main::int{$dv}{$i}{lty} ne $main::int{$dv}{$i}{plt})?" type ".(($main::int{$dv}{$i}{plt})?"from $main::int{$dv}{$i}{plt} ":"").(($main::int{$dv}{$i}{lty})?"to $main::int{$dv}{$i}{lty}":""):"";
+						my $spdc = ($main::int{$dv}{$i}{spd} ne $main::int{$dv}{$i}{psp})?" speed from ".&misc::DecFix($main::int{$dv}{$i}{psp})." to ".&misc::DecFix($main::int{$dv}{$i}{spd}):"";
+						my $dupc = ($main::int{$dv}{$i}{dpx} ne $main::int{$dv}{$i}{pdp})?" duplex from $main::int{$dv}{$i}{pdp} to $main::int{$dv}{$i}{dpx}":"";
+						if($typc or $spdc or $dupc){
+							my $msg  = "$iftxt changed$typc$spdc$dupc";
+							&misc::Prt("WIF :$msg\n");
+							my $quoted_source = $dbh->quote($dv);
+							my $quoted_info   = $dbh->quote($msg);
+							my $quoted_device = $dbh->quote($dv);
+							&Insert('events','level,time,source,info,class,device',"150,$main::now,$quoted_source,$quoted_info,'nedi',$quoted_device");
+							$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /L/;
+						}
 					}
 				}
-			}
 
-			$sth->execute (	$dv,
-					$main::int{$dv}{$i}{ina},
-					$i,
-					$main::int{$dv}{$i}{lty},
-					$main::int{$dv}{$i}{typ},
-					$main::int{$dv}{$i}{mac},
-					substr($main::int{$dv}{$i}{des},0,255),
-					substr($main::int{$dv}{$i}{ali},0,64),
-					$main::int{$dv}{$i}{sta},
-					$main::int{$dv}{$i}{spd},
-					$main::int{$dv}{$i}{dpx},
-					$main::int{$dv}{$i}{vid},
-					$main::int{$dv}{$i}{ioc},
-					$main::int{$dv}{$i}{ier},
-					$main::int{$dv}{$i}{ooc},
-					$main::int{$dv}{$i}{oer},
-					$main::int{$dv}{$i}{dio},
-					$main::int{$dv}{$i}{die},
-					$main::int{$dv}{$i}{doo},
-					$main::int{$dv}{$i}{doe},
-					substr($main::int{$dv}{$i}{com},0,255),
-					$main::int{$dv}{$i}{poe} );
-			$totpoe += $main::int{$dv}{$i}{poe}/1000;
-			$nethint++ if $main::int{$dv}{$i}{typ} =~ /^(6|7|117)$/;
-			$nint++;
-		}else{
-			&misc::Prt("WIF :No name for index $i, potential error in .def\n");
+				$sth->execute (	$dv,
+						$main::int{$dv}{$i}{ina},
+						$i,
+						$main::int{$dv}{$i}{lty},
+						$main::int{$dv}{$i}{typ},
+						$main::int{$dv}{$i}{mac},
+						substr($main::int{$dv}{$i}{des},0,255),
+						substr($main::int{$dv}{$i}{ali},0,64),
+						$main::int{$dv}{$i}{sta},
+						$main::int{$dv}{$i}{spd},
+						$main::int{$dv}{$i}{dpx},
+						$main::int{$dv}{$i}{vid},
+						$main::int{$dv}{$i}{ioc},
+						$main::int{$dv}{$i}{ier},
+						$main::int{$dv}{$i}{ooc},
+						$main::int{$dv}{$i}{oer},
+						$main::int{$dv}{$i}{dio},
+						$main::int{$dv}{$i}{die},
+						$main::int{$dv}{$i}{doo},
+						$main::int{$dv}{$i}{doe},
+						defined( $main::int{$dv}{$i}{com} )
+						  ? substr( $main::int{$dv}{$i}{com}, 0, 255 )
+						  : $main::int{$dv}{$i}{com},
+						$main::int{$dv}{$i}{poe} );
+				$totpoe += $main::int{$dv}{$i}{poe}/1000;
+				$nethint++ if $main::int{$dv}{$i}{typ} =~ /^(6|7|117)$/;
+				$nint++;
+			}else{
+				&misc::Prt("WIF :No name for index $i, potential error in .def\n");
+			}
 		}
+		$sth->finish if $sth;
+		$query = 'commit';
+		$dbh->commit;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("WriteInt failed.\n");
 	}
-	$dbh->commit;
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 	$avgpoe = sprintf("%.0f",$totpoe/$nethint) if $nethint;
-	if($avgpoe > $misc::poew){								# PoE can be optained on IF or DP, thus calculation is here
+	if($avgpoe > $misc::poew){								# PoE can be obtained on IF or DP, thus calculation is here
 		my $msg = "Average PoE delivery ${avgpoe}W exceeds threshold of ${misc::poew}W (${totpoe}W total)";
 		&misc::Prt("WIF :$msg\n");
-		&Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$dv\",\"$msg\",\"nedi\",\"$dv\"") if $misc::notify !~ /w/;
+		if ($misc::notify !~ /w/) {
+			my $quoted_source = $dbh->quote($dv);
+			my $quoted_info   = $dbh->quote($msg);
+			my $quoted_device = $dbh->quote($dv);
+			&Insert('events','level,time,source,info,class,device',"150,$main::now,$quoted_source,$quoted_info,'nedi',$quoted_device");
+		}
 		$nwar++;
 	}
 	&misc::Prt("WIF :$nint interfaces written to $misc::dbname.interfaces\n");
@@ -793,7 +2394,7 @@
 }
 
 
-=head2 FUNCTION ReadLink()
+=head2 FUNCTION WriteMod()
 
 Write the modules table, detect changes and notify if desired.
 
@@ -810,58 +2411,143 @@
 	my $nmod = 0;
 	my %dbmod= ();
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 0});
-	if($misc::notify =~ /m/i){									# Track existing mods if enabled
-		my $sth = $dbh->prepare("SELECT * FROM modules WHERE device = \"$dv\"");# TODO adapt for printers and ESX
-		$sth->execute();
-		while ((my @f) = $sth->fetchrow_array) {
-			$dbmod{$f[8]} = 1;
-			if(exists $main::mod{$dv}{$f[8]}){						# Check idx to avoid defining entry..
-				if($f[3] ne $main::mod{$dv}{$f[8]}{de}){				# ..this would define!
-					my $msg = "Module $f[3] SN:$f[4] in $f[1] was changed to a $main::mod{$dv}{$f[8]}{de} with SN:$main::mod{$dv}{$f[8]}{sn}";
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 0 });
+	my $query = '';
+	eval {
+		if($misc::notify =~ /m/i){									# Track existing mods if enabled
+			$query = "SELECT * FROM modules WHERE device = '$dv'";# TODO adapt for printers and ESX
+			my $sth = $dbh->prepare($query);
+			$sth->execute();
+			while ((my @f) = $sth->fetchrow_array) {
+				$dbmod{$f[8]} = 1;
+				if(exists $main::mod{$dv}{$f[8]}){						# Check idx to avoid defining entry..
+					if($f[3] ne $main::mod{$dv}{$f[8]}{de}){				# ..this would define!
+						my $msg = "Module $f[3] SN:$f[4] in $f[1] was changed to a $main::mod{$dv}{$f[8]}{de} with SN:$main::mod{$dv}{$f[8]}{sn}";
+						&misc::Prt("WMOD:$msg\n");
+						my $quoted_source = $dbh->quote($dv);
+						my $quoted_info   = $dbh->quote($msg);
+						my $quoted_device = $dbh->quote($dv);
+						&Insert('events','level,time,source,info,class,device',"150,$main::now,$quoted_source,$quoted_info,'nedi',$quoted_device");
+						$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /M/;
+					}elsif($f[4] and $f[4] ne $main::mod{$dv}{$f[8]}{sn}){
+						my $msg = "Module $f[3] SN:$f[4] in $f[1] got replaced with same model and SN:$main::mod{$dv}{$f[8]}{sn}";
+						&misc::Prt("WMOD:$msg\n");
+						my $quoted_source = $dbh->quote($dv);
+						my $quoted_info   = $dbh->quote($msg);
+						my $quoted_device = $dbh->quote($dv);
+						&Insert('events','level,time,source,info,class,device',"150,$main::now,$quoted_source,$quoted_info,'nedi',$quoted_device");
+						$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /M/;
+
+					}
+				}else{
+					my $msg = "Module $f[3] SN:$f[4] in $f[1] has been removed";
 					&misc::Prt("WMOD:$msg\n");
-					&Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$dv\",\"$msg\",\"nedi\",\"$dv\"");
+					my $quoted_source = $dbh->quote($dv);
+					my $quoted_info   = $dbh->quote($msg);
+					my $quoted_device = $dbh->quote($dv);
+					&Insert('events','level,time,source,info,class,device',"150,$main::now,$quoted_source,$quoted_info,'nedi',$quoted_device");
 					$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /M/;
-				}elsif($f[4] and $f[4] ne $main::mod{$dv}{$f[8]}{sn}){
-					my $msg = "Module $f[3] SN:$f[4] in $f[1] got replaced with same model and SN:$main::mod{$dv}{$f[8]}{sn}";
+				}
+			}
+
+		}
+		$sth->finish if $sth;
+		$query = "DELETE FROM modules where device = '$dv'";
+		$dbh->do($query);
+		$query = "INSERT INTO modules(device,slot,model,moddesc,serial,hw,fw,sw,modidx) VALUES ( ?,?,?,?,?,?,?,?,? )";
+		my $sth = $dbh->prepare($query);
+		foreach my $i ( sort keys %{$main::mod{$dv}} ){
+			## We test all the field lengths for each module, because we have
+			## seen some apparently malfunctioning hardware return a "model"
+			## string that exceeded the available size of the database field,
+			## and the response to the insertion attempt was ugly.  Having the
+			## database-field lengths hardcoded here is a hack, and fragile if
+			## the table definition ever changes.  A better way of handling
+			## this should be found.
+			my $field  = undef;
+			my $maxlen = undef;
+			if ( defined($dv) and length($dv) > 64 ) {
+				$field  = 'device';
+				$maxlen = 64;
+			}
+			elsif ( defined( $main::mod{$dv}{$i}{sl} ) and length( $main::mod{$dv}{$i}{sl} ) > 64 ) {
+				$field  = 'slot';
+				$maxlen = 64;
+			}
+			elsif ( defined( $main::mod{$dv}{$i}{mo} ) and length( $main::mod{$dv}{$i}{mo} ) > 32 ) {
+				$field  = 'model';
+				$maxlen = 32;
+			}
+			elsif ( defined( $main::mod{$dv}{$i}{de} ) and length( $main::mod{$dv}{$i}{de} ) > 255 ) {
+				$field  = 'moddesc';
+				$maxlen = 255;
+			}
+			elsif ( defined( $main::mod{$dv}{$i}{sn} ) and length( $main::mod{$dv}{$i}{sn} ) > 32 ) {
+				$field  = 'serial';
+				$maxlen = 32;
+			}
+			elsif ( defined( $main::mod{$dv}{$i}{hw} ) and length( $main::mod{$dv}{$i}{hw} ) > 128 ) {
+				$field  = 'hw';
+				$maxlen = 128;
+			}
+			elsif ( defined( $main::mod{$dv}{$i}{fw} ) and length( $main::mod{$dv}{$i}{fw} ) > 128 ) {
+				$field  = 'fw';
+				$maxlen = 128;
+			}
+			elsif ( defined( $main::mod{$dv}{$i}{sw} ) and length( $main::mod{$dv}{$i}{sw} ) > 128 ) {
+				$field  = 'sw';
+				$maxlen = 128;
+			}
+			elsif ( defined($i) and length($i) > 32 ) {
+				$field  = 'modidx';
+				$maxlen = 32;
+			}
+			if ($field) {
+				print "\n";
+				print "ERROR:  Field \"$field\" exceeds maximum $maxlen allowed characters;\n";
+				print "        this module will be ignored:\n";
+				print "         device:  $dv\n";
+				print "           slot:  $main::mod{$dv}{$i}{sl}\n";
+				print "          model:  $main::mod{$dv}{$i}{mo}\n";
+				print "        moddesc:  $main::mod{$dv}{$i}{de}\n";
+				print "         serial:  $main::mod{$dv}{$i}{sn}\n";
+				print "             hw:  $main::mod{$dv}{$i}{hw}\n";
+				print "             fw:  $main::mod{$dv}{$i}{fw}\n";
+				print "             sw:  $main::mod{$dv}{$i}{sw}\n";
+				print "         modidx:  $i\n";
+			}
+			else {
+				$sth->execute (	$dv,
+						$main::mod{$dv}{$i}{sl},
+						$main::mod{$dv}{$i}{mo},
+						$main::mod{$dv}{$i}{de},
+						$main::mod{$dv}{$i}{sn},
+						$main::mod{$dv}{$i}{hw},
+						$main::mod{$dv}{$i}{fw},
+						$main::mod{$dv}{$i}{sw},
+						$i );
+				if($main::dev{$dv}{fs} ne $main::now and $misc::notify =~ /m/i and !exists $dbmod{$i}){
+					my $msg = "New $main::mod{$dv}{$i}{de} module with SN:$main::mod{$dv}{$i}{sn} found in $main::mod{$dv}{$i}{sl}";
 					&misc::Prt("WMOD:$msg\n");
-					&Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$dv\",\"$msg\",\"nedi\",\"$dv\"");
+					my $quoted_source = $dbh->quote($dv);
+					my $quoted_info   = $dbh->quote($msg);
+					my $quoted_device = $dbh->quote($dv);
+					&Insert('events','level,time,source,info,class,device',"150,$main::now,$quoted_source,$quoted_info,'nedi',$quoted_device");
 					$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /M/;
-
 				}
-			}else{
-				my $msg = "Module $f[3] SN:$f[4] in $f[1] has been removed";
-				&misc::Prt("WMOD:$msg\n");
-				&Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$dv\",\"$msg\",\"nedi\",\"$dv\"");
-				$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /M/;
+				$nmod++;
 			}
 		}
-
-	}
-	$sth->finish if $sth;
-	$dbh->do("DELETE FROM  modules where device = \"$dv\"");
-	my $sth = $dbh->prepare("INSERT INTO modules(device,slot,model,moddesc,serial,hw,fw,sw,modidx) VALUES ( ?,?,?,?,?,?,?,?,? )");
-	foreach my $i ( sort keys %{$main::mod{$dv}} ){
-		$sth->execute (	$dv,
-				$main::mod{$dv}{$i}{sl},
-				$main::mod{$dv}{$i}{mo},
-				$main::mod{$dv}{$i}{de},
-				$main::mod{$dv}{$i}{sn},
-				$main::mod{$dv}{$i}{hw},
-				$main::mod{$dv}{$i}{fw},
-				$main::mod{$dv}{$i}{sw},
-				$i );
-		if($main::dev{$dv}{fs} ne $main::now and $misc::notify =~ /m/i and !exists $dbmod{$i}){
-			my $msg = "New $main::mod{$dv}{$i}{de} module with SN:$main::mod{$dv}{$i}{sn} found in $main::mod{$dv}{$i}{sl}";
-			&misc::Prt("WMOD:$msg\n");
-			&Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$dv\",\"$msg\",\"nedi\",\"$dv\"");
-			$misc::mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /M/;
-		}
-		$nmod++;
+		$sth->finish if $sth;
+		$query = 'commit';
+		$dbh->commit;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("WriteMod failed.\n");
 	}
-	$dbh->commit;
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 	&misc::Prt("WMOD:$nmod modules written to $misc::dbname.modules\n");
 }
 
@@ -883,21 +2569,32 @@
 
 	my ($dv) = @_;
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 0});
-	$dbh->do("DELETE FROM  vlans where device = \"$dv\"");
-	my $sth = $dbh->prepare("INSERT INTO vlans(device,vlanid,vlanname) VALUES ( ?,?,? )");
-	foreach my $i ( sort keys %{$main::vlan{$dv}} ){
-		$sth->execute ( $dv,$i,$main::vlan{$dv}{$i} );
-		$nvlans++;
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 0 });
+	my $query = '';
+	eval {
+		$query = "DELETE FROM vlans where device = '$dv'";
+		$dbh->do($query);
+		$query = "INSERT INTO vlans(device,vlanid,vlanname) VALUES ( ?,?,? )";
+		my $sth = $dbh->prepare($query);
+		foreach my $i ( sort keys %{$main::vlan{$dv}} ){
+			$sth->execute ( $dv,$i,$main::vlan{$dv}{$i} );
+			$nvlans++;
+		}
+		$sth->finish if $sth;
+		$query = 'commit';
+		$dbh->commit;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("WriteVlan failed.\n");
 	}
-	$dbh->commit;
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 	&misc::Prt("WVLN:$nvlans vlans written to $misc::dbname.vlans\n");
 }
 
 
-=head2 FUNCTION ReadLink()
+=head2 FUNCTION WriteNet()
 
 Rewrites the networks of a given device.
 
@@ -913,21 +2610,32 @@
 	my ($dv) = @_;
 	my $nnet = 0;
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 0});
-	$dbh->do("DELETE FROM  networks where device = \"$dv\"");
-	my $sth = $dbh->prepare("INSERT INTO networks(	device,ifname,ifip,mask,vrfname,status ) VALUES ( ?,?,?,?,?,? )");
-	foreach my $n ( sort keys %{$main::net{$dv}} ){
-		$sth->execute (	$dv,
-						$main::net{$dv}{$n}{ifn},
-						&misc::Ip2Dec($n),
-						&misc::Ip2Dec($main::net{$dv}{$n}{msk}),
-						$main::net{$dv}{$n}{vrf},
-						$main::net{$dv}{$n}{vrs} );
-		$nnet++;
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 0 });
+	my $query = '';
+	eval {
+		$query = "DELETE FROM networks where device = '$dv'";
+		$dbh->do($query);
+		$query = "INSERT INTO networks(	device,ifname,ifip,mask,vrfname,status ) VALUES ( ?,?,?,?,?,? )";
+		my $sth = $dbh->prepare($query);
+		foreach my $n ( sort keys %{$main::net{$dv}} ){
+			$sth->execute (	$dv,
+							$main::net{$dv}{$n}{ifn},
+							&misc::Ip2Dec($n),
+							&misc::Ip2Dec($main::net{$dv}{$n}{msk}),
+							$main::net{$dv}{$n}{vrf},
+							$main::net{$dv}{$n}{vrs} );
+			$nnet++;
+		}
+		$sth->finish if $sth;
+		$query = 'commit';
+		$dbh->commit;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("WriteNet failed.\n");
 	}
-	$dbh->commit;
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 	&misc::Prt("WNET:$nnet networks written to $misc::dbname.networks\n");
 }
 
@@ -951,31 +2659,42 @@
 	my $nlink  = 0;
 	my $nslink = 0;
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 0});
-	$dbh->do("DELETE FROM links where device = \"$dv\" AND linktype != \"STAT\"");
-	my $sth = $dbh->prepare("INSERT INTO links(device,ifname,neighbor,nbrifname,bandwidth,linktype,linkdesc,nbrduplex,nbrvlanid) VALUES ( ?,?,?,?,?,?,?,?,? )");
-
-	foreach my $i ( sort keys %{$main::link{$dv}} ){
-		foreach my $ne ( sort keys %{$main::link{$dv}{$i}} ){
-			foreach my $ni ( sort keys %{$main::link{$dv}{$i}{$ne}} ){
-				if($main::link{$dv}{$i}{$ne}{$ni}{ty} ne 'STAT'){
-					if(!defined $main::link{$dv}{$i}{$ne}{$ni}{pw}){$main::link{$dv}{$i}{$ne}{$ni}{pw} = 0}
-					$sth->execute (	$dv,$i,$ne,$ni,
-							$main::link{$dv}{$i}{$ne}{$ni}{bw},
-							$main::link{$dv}{$i}{$ne}{$ni}{ty},
-							$main::link{$dv}{$i}{$ne}{$ni}{de},
-							$main::link{$dv}{$i}{$ne}{$ni}{du},
-							$main::link{$dv}{$i}{$ne}{$ni}{vl} );
-					$nlink++;
-				}else{
-					$nslink++;
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 0 });
+	my $query = '';
+	eval {
+		$query = "DELETE FROM links where device = '$dv' AND linktype != 'STAT'";
+		$dbh->do($query);
+		$query = "INSERT INTO links(device,ifname,neighbor,nbrifname,bandwidth,linktype,linkdesc,nbrduplex,nbrvlanid) VALUES ( ?,?,?,?,?,?,?,?,? )";
+		my $sth = $dbh->prepare($query);
+
+		foreach my $i ( sort keys %{$main::link{$dv}} ){
+			foreach my $ne ( sort keys %{$main::link{$dv}{$i}} ){
+				foreach my $ni ( sort keys %{$main::link{$dv}{$i}{$ne}} ){
+					if($main::link{$dv}{$i}{$ne}{$ni}{ty} ne 'STAT'){
+						if(!defined $main::link{$dv}{$i}{$ne}{$ni}{pw}){$main::link{$dv}{$i}{$ne}{$ni}{pw} = 0}
+						$sth->execute (	$dv,$i,$ne,$ni,
+								$main::link{$dv}{$i}{$ne}{$ni}{bw},
+								$main::link{$dv}{$i}{$ne}{$ni}{ty},
+								$main::link{$dv}{$i}{$ne}{$ni}{de},
+								$main::link{$dv}{$i}{$ne}{$ni}{du},
+								$main::link{$dv}{$i}{$ne}{$ni}{vl} );
+						$nlink++;
+					}else{
+						$nslink++;
+					}
 				}
 			}
 		}
+		$sth->finish if $sth;
+		$query = 'commit';
+		$dbh->commit;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("WriteLink failed.\n");
 	}
-	$dbh->commit;
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 	&misc::Prt("WLNK:$nlink (ignoring $nslink static) links written to $misc::dbname.links\n");
 }
 
@@ -995,18 +2714,40 @@
 
 	my $dv = $_[0];
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 1});
-	if( $dbh->do("UPDATE stock SET time=\"$main::now\",comment=\"Discovered as $dv with IP $main::dev{$dv}{ip}\",state=100 where serial = \"$main::dev{$dv}{sn}\" and state != 100") + 0){
-		&misc::Prt("STOK:Discovered device $main::dev{$dv}{sn} set active in $misc::dbname.stock\n");
-	}
-	foreach my $i ( sort keys %{$main::mod{$dv}} ){# TODO add stocktracking options for discovered devs?
-		if($main::mod{$dv}{$i}{sn}){
-			if( $dbh->do("UPDATE stock SET time=\"$main::now\",comment=\"Discovered in $dv $main::mod{$dv}{$i}{sl}\",state=100 where serial = \"$main::mod{$dv}{$i}{sn}\" and state != 100") + 0){
-				&misc::Prt("STOK:Discovered module $main::mod{$dv}{$i}{sn} set active in $misc::dbname.stock\n");
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
+	my $query = '';
+	eval {
+		my $time_column = $dbh->quote_identifier('time');
+		my $quoted_comment = $dbh->quote("Discovered as $dv with IP $main::dev{$dv}{ip}");
+		my $quoted_serial  = $dbh->quote("$main::dev{$dv}{sn}");
+		$query = "UPDATE stock SET $time_column=$main::now,comment=$quoted_comment,state=100 where serial = $quoted_serial and state != 100";
+		# $dbh->do():  Prepare and execute a single statement.  Returns the number of rows
+		# affected (with zero represented as "0E0" to indicate success (true) without any rows
+		# having been affected) or undef on error.  (With RaiseError in effect here, we should
+		# never see undef, but we code defensively.)  A return value of -1 (note:  still true)
+		# means the number of rows is not known, not applicable, or not available.
+		my $rows_affected = $dbh->do($query);
+		if(defined($rows_affected) and $rows_affected > 0){
+			&misc::Prt("STOK:Discovered device $main::dev{$dv}{sn} set active in $misc::dbname.stock\n");
+		}
+		foreach my $i ( sort keys %{$main::mod{$dv}} ){# TODO add stocktracking options for discovered devs?
+			if($main::mod{$dv}{$i}{sn}){
+				my $quoted_comment = $dbh->quote("Discovered in $dv $main::mod{$dv}{$i}{sl}");
+				my $quoted_serial  = $dbh->quote("$main::mod{$dv}{$i}{sn}");
+				$query = "UPDATE stock SET $time_column=$main::now,comment=$quoted_comment,state=100 where serial = $quoted_serial and state != 100";
+				$rows_affected = $dbh->do($query);
+				if(defined($rows_affected) and $rows_affected > 0){
+					&misc::Prt("STOK:Discovered module $main::mod{$dv}{$i}{sn} set active in $misc::dbname.stock\n");
+				}
 			}
 		}
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("UnStock failed.\n");
 	}
-	$dbh->disconnect;
+	Disconnect($dbh);
 }
 
 
@@ -1025,52 +2766,144 @@
 
 	my $nnod = 0;
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 0});
-	my $sth = $dbh->prepare("SELECT * FROM stolen");
-	$sth->execute();
-	my %stomac = ();
-	while ((my @smac) = $sth->fetchrow_array) {
-		$stomac{$smac[2]} = "$smac[6]";
-	}
-	$dbh->do("TRUNCATE nodes");
-	$sth = $dbh->prepare("INSERT INTO nodes(	name,nodip,mac,oui,firstseen,lastseen,device,ifname,vlanid,ifmetric,ifupdate,ifchanges,
-							ipupdate,ipchanges,iplost,arpval,tcpports,udpports,nodtype,nodos,osupdate) VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )");
-
-	foreach my $mcvl ( sort keys %main::nod ){
-		my $mc = substr($mcvl,0,12);
-		if (exists $stomac{$mc} and $main::nod{$mcvl}{ls} == $main::now and $misc::notify =~ /n/i){
-			my $msg = "Node $mc reappeared as $main::nod{$mcvl}{na}/$main::nod{$mcvl}{ip} on $main::nod{$mcvl}{if}";
-			&misc::Prt("WNOD:$msg\n");
-			&Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$main::nod{$mcvl}{dv}\",\"$msg\",\"sec\",\"$main::nod{$mcvl}{dv}\"");
-			$misc::mq += &mon::AlertQ("$msg of $main::nod{$mcvl}{dv}\n","",1,$main::nod{$mcvl}{dv}) if $misc::notify =~ /N/;
-		}
-
-		$sth->execute (	$main::nod{$mcvl}{na},
-				&misc::Ip2Dec($main::nod{$mcvl}{ip}),
-				$mcvl,
-				$main::nod{$mcvl}{nv},
-				$main::nod{$mcvl}{fs},
-				$main::nod{$mcvl}{ls},
-				$main::nod{$mcvl}{dv},
-				$main::nod{$mcvl}{if},
-				$main::nod{$mcvl}{vl},
-				$main::nod{$mcvl}{im},
-				$main::nod{$mcvl}{iu},
-				$main::nod{$mcvl}{ic},
-				$main::nod{$mcvl}{au},
-				$main::nod{$mcvl}{ac},
-				$main::nod{$mcvl}{al},
-				$main::nod{$mcvl}{av},
-				$main::nod{$mcvl}{tp},
-				$main::nod{$mcvl}{up},
-				$main::nod{$mcvl}{os},
-				$main::nod{$mcvl}{ty},
-				$main::nod{$mcvl}{ou} );
-		$nnod++;
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 0 });
+	my $query = '';
+	eval {
+		$query = "SELECT * FROM stolen";
+		my $sth = $dbh->prepare($query);
+		$sth->execute();
+		my %stomac = ();
+		while ((my @smac) = $sth->fetchrow_array) {
+			$stomac{$smac[2]} = "$smac[6]";
+		}
+		$query = "TRUNCATE nodes";
+		$dbh->do($query);
+		$query = "INSERT INTO nodes(	name,nodip,mac,oui,firstseen,lastseen,device,ifname,vlanid,ifmetric,ifupdate,ifchanges,
+						ipupdate,ipchanges,iplost,arpval,tcpports,udpports,nodtype,nodos,osupdate)
+						VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )";
+		$sth = $dbh->prepare($query);
+		my $saved_query = $query;
+
+		foreach my $mcvl ( sort keys %main::nod ){
+			my $mc = substr($mcvl,0,12);
+			if (exists $stomac{$mc} and $main::nod{$mcvl}{ls} == $main::now and $misc::notify =~ /n/i){
+				my $msg = "Node $mc reappeared as $main::nod{$mcvl}{na}/$main::nod{$mcvl}{ip} on $main::nod{$mcvl}{if}";
+				&misc::Prt("WNOD:$msg\n");
+				$query = 'INSERT ... ';
+				my $quoted_source = $dbh->quote($main::nod{$mcvl}{dv});
+				my $quoted_info   = $dbh->quote($msg);
+				my $quoted_device = $dbh->quote($main::nod{$mcvl}{dv});
+				&Insert('events','level,time,source,info,class,device',"150,$main::now,$quoted_source,$quoted_info,'sec',$quoted_device");
+				$query = $saved_query;
+				$misc::mq += &mon::AlertQ("$msg of $main::nod{$mcvl}{dv}\n","",1,$main::nod{$mcvl}{dv}) if $misc::notify =~ /N/;
+			}
+
+			## We test all the field lengths for the new node, because we have
+			## seen some apparently malfunctioning hardware in the field return
+			## some string that exceeds the available size of the database field,
+			## and the response to the insertion attempt was ugly.  Having the
+			## database-field lengths hardcoded here is a hack, and fragile if
+			## the table definition ever changes.  A better way of handling
+			## this should be found.
+			my $field  = undef;
+			my $maxlen = undef;
+			if ( defined( $main::nod{$mcvl}{na} ) and length( $main::nod{$mcvl}{na} ) > 64 ) {
+				$field  = 'name';
+				$maxlen = 64;
+			}
+			elsif ( defined($mcvl) and length($mcvl) > 12 ) {
+				$field  = 'mac';
+				$maxlen = 12;
+			}
+			elsif ( defined( $main::nod{$mcvl}{nv} ) and length( $main::nod{$mcvl}{nv} ) > 32 ) {
+				$field  = 'oui';
+				$maxlen = 32;
+			}
+			elsif ( defined( $main::nod{$mcvl}{dv} ) and length( $main::nod{$mcvl}{dv} ) > 64 ) {
+				$field  = 'device';
+				$maxlen = 64;
+			}
+			elsif ( defined( $main::nod{$mcvl}{if} ) and length( $main::nod{$mcvl}{if} ) > 32 ) {
+				$field  = 'ifname';
+				$maxlen = 32;
+			}
+			elsif ( defined( $main::nod{$mcvl}{tp} ) and length( $main::nod{$mcvl}{tp} ) > 64 ) {
+				$field  = 'tcpports';
+				$maxlen = 64;
+			}
+			elsif ( defined( $main::nod{$mcvl}{up} ) and length( $main::nod{$mcvl}{up} ) > 64 ) {
+				$field  = 'udpports';
+				$maxlen = 64;
+			}
+			elsif ( defined( $main::nod{$mcvl}{os} ) and length( $main::nod{$mcvl}{os} ) > 64 ) {
+				$field  = 'nodtype';
+				$maxlen = 64;
+			}
+			elsif ( defined( $main::nod{$mcvl}{ty} ) and length( $main::nod{$mcvl}{ty} ) > 64 ) {
+				$field  = 'nodos';
+				$maxlen = 64;
+			}
+			if ($field) {
+				print "\n";
+				print "ERROR:  Field \"$field\" exceeds maximum $maxlen allowed characters;\n";
+				print "        this node will be ignored:\n";
+				print "             name:  $main::nod{$mcvl}{na}\n";
+				print "            nodip:  &misc::Ip2Dec($main::nod{$mcvl}{ip})\n";
+				print "              mac:  $mcvl\n";
+				print "              oui:  $main::nod{$mcvl}{nv}\n";
+				print "        firstseen:  $main::nod{$mcvl}{fs}\n";
+				print "         lastseen:  $main::nod{$mcvl}{ls}\n";
+				print "           device:  $main::nod{$mcvl}{dv}\n";
+				print "           ifname:  $main::nod{$mcvl}{if}\n";
+				print "           vlanid:  $main::nod{$mcvl}{vl}\n";
+				print "         ifmetric:  $main::nod{$mcvl}{im}\n";
+				print "         ifupdate:  $main::nod{$mcvl}{iu}\n";
+				print "        ifchanges:  $main::nod{$mcvl}{ic}\n";
+				print "         ipupdate:  $main::nod{$mcvl}{au}\n";
+				print "        ipchanges:  $main::nod{$mcvl}{ac}\n";
+				print "           iplost:  $main::nod{$mcvl}{al}\n";
+				print "           arpval:  $main::nod{$mcvl}{av}\n";
+				print "         tcpports:  $main::nod{$mcvl}{tp}\n";
+				print "         udpports:  $main::nod{$mcvl}{up}\n";
+				print "          nodtype:  $main::nod{$mcvl}{os}\n";
+				print "            nodos:  $main::nod{$mcvl}{ty}\n";
+				print "         osupdate:  $main::nod{$mcvl}{ou}\n";
+			}
+			else {
+				$sth->execute (	$main::nod{$mcvl}{na},
+						&misc::Ip2Dec($main::nod{$mcvl}{ip}),
+						$mcvl,
+						$main::nod{$mcvl}{nv},
+						$main::nod{$mcvl}{fs},
+						$main::nod{$mcvl}{ls},
+						$main::nod{$mcvl}{dv},
+						$main::nod{$mcvl}{if},
+						$main::nod{$mcvl}{vl},
+						$main::nod{$mcvl}{im},
+						$main::nod{$mcvl}{iu},
+						$main::nod{$mcvl}{ic},
+						$main::nod{$mcvl}{au},
+						$main::nod{$mcvl}{ac},
+						$main::nod{$mcvl}{al},
+						$main::nod{$mcvl}{av},
+						$main::nod{$mcvl}{tp},
+						$main::nod{$mcvl}{up},
+						$main::nod{$mcvl}{os},
+						$main::nod{$mcvl}{ty},
+						$main::nod{$mcvl}{ou} );
+				$nnod++;
+			}
+		}
+		$sth->finish if $sth;
+		$query = 'commit';
+		$dbh->commit;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("WriteNod failed.\n");
 	}
-	$dbh->commit;
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 	&misc::Prt("WNOD:$nnod nodes written to $misc::dbname.nodes\n");
 }
 
@@ -1092,16 +2925,26 @@
 	my $nrrd = 0;
 	my $ncfg = 0;
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 1});
-	my $sth = $dbh->prepare("SELECT * FROM devdel");
-	$sth->execute();
-	my %devdel = ();
-	while (my @dd = $sth->fetchrow_array) {
-		$devdel{$dd[0]} = "$dd[1] - ". localtime($dd[2]);
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
+	my $query = '';
+	eval {
+		$query = "SELECT * FROM devdel";
+		my $sth = $dbh->prepare($query);
+		$sth->execute();
+		my %devdel = ();
+		while (my @dd = $sth->fetchrow_array) {
+			$devdel{$dd[0]} = "$dd[1] - ". localtime($dd[2]);
+		}
+		$sth->finish if $sth;
+		$query = "TRUNCATE devdel";
+		$dbh->do($query);
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("DelDev failed.\n");
 	}
-	$dbh->do("TRUNCATE devdel");
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 
 	foreach my $dv ( keys %devdel ){
 		my $nrrd = &main::rmtree( "$misc::nedipath/rrd/$dv");
@@ -1128,111 +2971,141 @@
 	my $err = $m50 = my $m100 = my $m150 = my $m200 = my $m250 = 0;
 
 	&misc::Prt("\nTopRRD       ------------------------------------------------------------------\n");
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 1});
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
+	my $query = '';
+	my @tet  = ();
+	my @twe  = ();
+	my @nodl = ();
+	my @nodf = ();
+	my @pwr  = ();
+	eval {
+		# Using delta octets to avoid error from missing or rebooted switches. Needs to be divided by rrdstep*1M to get MB/s.
+		# (1000000*$misc::rrdstep) is not portable across databases, because the product may be greater than 31 bits.
+		# That works in MySQL, but not in PostgreSQL.  And there doesn't seem to be any portable way to cast to bigint.
+		# So we just convert to floating point earlier on than would have happened anyway.
+		$query = "SELECT sum(dinoct)/(1000000.0*$misc::rrdstep),sum(doutoct)/(1000000.0*$misc::rrdstep) FROM interfaces WHERE linktype = ''";
+		my $sth = $dbh->prepare($query);
+		$sth->execute();
+		@tet = $sth->fetchrow_array;
+		$sth->finish if $sth;
+		unless($tet[0]){
+			$tet[0] = 0;
+			$tet[1] = 0;
+		}
+
+		# Wired interface (type not 71) errors/s
+		$query = "SELECT sum(dinerr)/$misc::rrdstep,sum(douterr)/$misc::rrdstep FROM interfaces WHERE iftype != 71";
+		$sth = $dbh->prepare($query);
+		$sth->execute();
+		@twe = $sth->fetchrow_array;
+		$sth->finish if $sth;
+		unless($twe[0]){
+			$twe[0] = 0;
+			$twe[1] = 0;
+		}
+
+		# Total Nodes lastseen
+		$query = "SELECT count(lastseen) FROM nodes where lastseen = $main::now";
+		$sth = $dbh->prepare($query);
+		$sth->execute();
+		@nodl = $sth->fetchrow_array;
+		$sth->finish if $sth;
+
+		# Total Nodes firstseen
+		$query = "SELECT count(firstseen) FROM nodes where firstseen = $main::now";
+		$sth = $dbh->prepare($query);
+		$sth->execute();
+		@nodf = $sth->fetchrow_array;
+		$sth->finish if $sth;
 
-	# Using delta octets to avoid error from missing or rebooted switches. Needs to be divided by rrdstep*1M to get MB/s
-	my $sth = $dbh->prepare("SELECT sum(dinoct)/(1000000*$misc::rrdstep),sum(doutoct)/(1000000*$misc::rrdstep) FROM interfaces WHERE linktype = \"\"");
-	$sth->execute();
-	(my @tet) = $sth->fetchrow_array;
-	$sth->finish if $sth;
-	unless($tet[0]){
-		$tet[0] = 0;
-		$tet[1] = 0;
-	}
-
-	# Wired interface (type not 71) errors/s
-	$sth = $dbh->prepare("SELECT sum(dinerr)/$misc::rrdstep,sum(douterr)/$misc::rrdstep FROM interfaces WHERE iftype != 71");
-	$sth->execute();
-	(my @twe) = $sth->fetchrow_array;
-	$sth->finish if $sth;
-	unless($twe[0]){
-		$twe[0] = 0;
-		$twe[1] = 0;
-	}
-
-	# Total Nodes lastseen
-	$sth = $dbh->prepare("SELECT count(lastseen) FROM nodes where lastseen = $main::now");
-	$sth->execute();
-	(my @nodl) = $sth->fetchrow_array;
-	$sth->finish if $sth;
-
-	# Total Nodes firstseen
-	$sth = $dbh->prepare("SELECT count(firstseen) FROM nodes where firstseen = $main::now");
-	$sth->execute();
-	(my @nodf) = $sth->fetchrow_array;
-	$sth->finish if $sth;
-
-	# Total power in Watts
-	$sth = $dbh->prepare("SELECT sum(poe)/1000 FROM interfaces");
-	$sth->execute();
-	(my @pwr) = $sth->fetchrow_array;
-	$sth->finish if $sth;
-	unless($pwr[0]){
-		$pwr[0] = 0;
-	}
-
-	# Count IF ifstat up=3, down=1 and admin down=0 ignoring transients (+192)
-	$sth = $dbh->prepare("SELECT ifstat & 63,count(ifstat & 63) from interfaces group by ifstat & 63");
-	$sth->execute();
-	$ifstat[0] = 0;
-	$ifstat[1] = 0;
-	$ifstat[3] = 0;
-	while (my @is = $sth->fetchrow_array) {
-		$ifstat[$is[0]] = $is[1];
-	}
-	$sth->finish if $sth;
-
-	# Number of monitored targets and last check
-	$sth = $dbh->prepare("select count(status),lastok from monitoring WHERE test != '' AND latency < $misc::latw AND status = 0 group by lastok");
-	$sth->execute();
-	@mok = $sth->fetchrow_array;
-	$sth->finish if $sth;
-
-	if($mok[0]){
-		# Number of slow targets
-		$sth = $dbh->prepare("select count(status) from monitoring WHERE test != '' AND latency > $misc::latw AND status = 0");
-		$sth->execute();
-		@msl = $sth->fetchrow_array;
+		# Total power in Watts
+		$query = "SELECT sum(poe)/1000 FROM interfaces";
+		$sth = $dbh->prepare($query);
+		$sth->execute();
+		@pwr = $sth->fetchrow_array;
 		$sth->finish if $sth;
+		unless($pwr[0]){
+			$pwr[0] = 0;
+		}
 
-		# Number of dead targets
-		$sth = $dbh->prepare("select count(status) from monitoring WHERE test != '' AND status > 0");
+		# Count IF ifstat up=3, down=1 and admin down=0 ignoring transients (+192)
+		$query = "SELECT ifstat & 63,count(ifstat & 63) from interfaces group by ifstat & 63";
+		$sth = $dbh->prepare($query);
 		$sth->execute();
-		@mal = $sth->fetchrow_array;
+		$ifstat[0] = 0;
+		$ifstat[1] = 0;
+		$ifstat[3] = 0;
+		while (my @is = $sth->fetchrow_array) {
+			if (defined $is[0]) {
+				$ifstat[$is[0]] = $is[1];
+			}
+			else {
+				$ifstat[0] += $is[1];
+			}
+		}
 		$sth->finish if $sth;
-		if($mok[1] < (time - $misc::chka * $misc::pause) ){					# moni.pl not running or no one alive
+
+		# Number of monitored targets and last check
+		$query = "select count(status),lastok from monitoring WHERE test != '' AND latency < $misc::latw AND status = 0 group by lastok";
+		$sth = $dbh->prepare($query);
+		$sth->execute();
+		@mok = $sth->fetchrow_array;
+		$sth->finish if $sth;
+
+		if($mok[0]){
+			# Number of slow targets
+			$query = "select count(status) from monitoring WHERE test != '' AND latency > $misc::latw AND status = 0";
+			$sth = $dbh->prepare($query);
+			$sth->execute();
+			@msl = $sth->fetchrow_array;
+			$sth->finish if $sth;
+
+			# Number of dead targets
+			$query = "select count(status) from monitoring WHERE test != '' AND status > 0";
+			$sth = $dbh->prepare($query);
+			$sth->execute();
+			@mal = $sth->fetchrow_array;
+			$sth->finish if $sth;
+			if($mok[1] < (time - $misc::chka * $misc::pause) ){					# moni.pl not running or no one alive
+				$mok[0] = 0;
+				$mal[0] = 0;
+				my $msg = "Last successful check on ".localtime($mok[1]).", is moni running?";
+				my $quoted_info = $dbh->quote($msg);
+				&Insert('events','level,time,source,info,class',"150,$main::now,'NeDi',$quoted_info,'nedi'");
+				&misc::Prt("TRRD:$msg\n");
+			}
+		}else{
 			$mok[0] = 0;
+			$msl[0] = 0;
 			$mal[0] = 0;
-			my $msg = "Last successful check on ".localtime($mok[1]).", is moni running?";
-			&Insert('events','level,time,source,info,class',"\"150\",\"$main::now\",\"NeDi\",\"$msg\",\"nedi\"");
-			&misc::Prt("TRRD:$msg\n");
+			&misc::Prt("TRRD:Nothing up or moni not running!\n");
 		}
-	}else{
-		$mok[0] = 0;
-		$msl[0] = 0;
-		$mal[0] = 0;
-		&misc::Prt("TRRD:Nothing up or moni not running!\n");
-	}
-
-	# Number of cathegorized events during discovery cycle
-	$sth = $dbh->prepare("SELECT level,count(*) FROM events WHERE time > ".(time - $misc::rrdstep)." GROUP BY level");
-	$sth->execute();
-	while ((my @m) = $sth->fetchrow_array) {
-		if($m[0] eq 50){
-			$m50 = $m[1];
-		}elsif($m[0] eq 100){
-			$m100 = $m[1];
-		}elsif($m[0] eq 150){
-			$m150 = $m[1];
-		}elsif($m[0] eq 200){
-			$m200 = $m[1];
-		}elsif($m[0] eq 250){
-			$m250 = $m[1];
+
+		# Number of categorized events during discovery cycle
+		$query = "SELECT level,count(*) FROM events WHERE time > ".(time - $misc::rrdstep)." GROUP BY level";
+		$sth = $dbh->prepare($query);
+		$sth->execute();
+		while ((my @m) = $sth->fetchrow_array) {
+			if($m[0] eq 50){
+				$m50 = $m[1];
+			}elsif($m[0] eq 100){
+				$m100 = $m[1];
+			}elsif($m[0] eq 150){
+				$m150 = $m[1];
+			}elsif($m[0] eq 200){
+				$m200 = $m[1];
+			}elsif($m[0] eq 250){
+				$m250 = $m[1];
+			}
 		}
+		$sth->finish if $sth;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("TopRRD failed.\n");
 	}
-
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 
 	&misc::Prt("TRRD:$misc::nedipath/rrd/top.rrd: Trf=$tet[0]/$tet[1] Err=$twe[0]/$twe[1] Nod=$nodl[0]/$nodf[0]\n");
 	&misc::Prt("TRRD:Pwr=$pwr[0]W IF=$ifstat[3]/$ifstat[1]/$ifstat[0] Mon=$mok[0]/$msl[0]/$mal[0] MSG=$m50/$m100/$m150/$m200/$m250\n");
@@ -1268,7 +3141,7 @@
 		if($err){
 			&misc::Prt("TRRD:File error!\n");
 		}else{
-			RRDs::update "$misc::nedipath/rrd/top.rrd","N:$tet[0]:$tet[1]:$twe[0]:$twe[1]:$nodl[0]:$nodf[0]:$pwr[0]:$ifstat[3]:$ifstat[1]:$ifstat[0]:$mok[0]:$msl[0]:$mal[0]:$m50:$m100:$m150:$m200:$m250";
+			RRDs::update( "$misc::nedipath/rrd/top.rrd","N:$tet[0]:$tet[1]:$twe[0]:$twe[1]:$nodl[0]:$nodf[0]:$pwr[0]:$ifstat[3]:$ifstat[1]:$ifstat[0]:$mok[0]:$msl[0]:$mal[0]:$m50:$m100:$m150:$m200:$m250" );
 			$err = RRDs::error;
 			if($err){
 				&misc::Prt("TRRD:Update error!\n");
@@ -1295,25 +3168,38 @@
 
 	use File::Find;
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 0});
-	my $sth = $dbh->prepare("SELECT * FROM wlan");
-	$sth->execute();
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 0 });
+	my $query = '';
+	eval {
+		$query = "SELECT * FROM wlan";
+		my $sth = $dbh->prepare($query);
+		$sth->execute();
 
-	while ((my @wrow) = $sth->fetchrow_array) {
+		while ((my @wrow) = $sth->fetchrow_array) {
 			my $mc = $wrow[0];
 			$ap{$mc} = $main::now;
-	}
-	my $wprev = keys %ap;
-	print "WLAN:$wprev old Wlan entries read.\n";
+		}
+		$sth->finish if $sth;
+		my $wprev = keys %ap;
+		print "WLAN:$wprev old Wlan entries read.\n";
 
-	find(\&misc::GetAp, $main::opt{w});								# Calls GetAp() in libmisc.pl
+		find(\&misc::GetAp, $main::opt{w});								# Calls GetAp() in libmisc.pl
 
-	$dbh->do("TRUNCATE wlan");
-	$sth = $dbh->prepare("INSERT INTO wlan(mac,time) VALUES ( ?,? )");
-	for my $mc (sort keys %ap ){ $sth->execute ( $mc,$ap{$mc} ) }
-	$dbh->commit;
-	$sth->finish if $sth;
-	$dbh->disconnect;
+		$query = "TRUNCATE wlan";
+		$dbh->do($query);
+		$query = "INSERT INTO wlan(mac,time) VALUES ( ?,? )";
+		$sth = $dbh->prepare($query);
+		for my $mc (sort keys %ap ){ $sth->execute ( $mc,$ap{$mc} ) }
+		$sth->finish if $sth;
+		$query = 'commit';
+		$dbh->commit;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("WlanUp failed.\n");
+	}
+	Disconnect($dbh);
 
 	my $wnew = scalar keys %ap;
 	print "WLAN:$wnew new entries written.\n";
@@ -1336,45 +3222,55 @@
 	my $nmon  = 0;
 	my $sth = "";
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 1});
-
-	if($_[0] =~ /^[0-9]+$/){									# For single dev (used in trap.pl)
-		$sth = $dbh->prepare("SELECT monitoring.name,devip,class,alert,eventfwd,eventdel FROM monitoring LEFT OUTER JOIN devices ON (monitoring.name = devices.device ) WHERE devip = $_[0]");
-	}elsif($_[0] eq "dev"){
-		$sth = $dbh->prepare("SELECT monitoring.name,devip,class,snmpversion & 3,readcomm,test,status,lost,ok,latmax,latavg,uptime,alert,eventfwd,eventdel,depend,monitoring.device FROM monitoring LEFT OUTER JOIN devices ON (monitoring.name = devices.device ) WHERE class = \"dev\"");
-	}elsif($_[0] eq "node"){
-		$sth = $dbh->prepare("SELECT monitoring.name,monip,class,class,class,test,status,lost,ok,latmax,latavg,uptime,alert,eventfwd,eventdel,depend,device FROM monitoring WHERE class = \"node\"");
-	}else{
-		die "no ReadMon class!";
-	}
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
+	my $query = '';
+	eval {
+		if($_[0] =~ /^[0-9]+$/){									# For single dev (used in trap.pl)
+			$query = "SELECT monitoring.name,devip,class,alert,eventfwd,eventdel FROM monitoring LEFT OUTER JOIN devices ON (monitoring.name = devices.device ) WHERE devip = $_[0]";
+			$sth = $dbh->prepare($query);
+		}elsif($_[0] eq "dev"){
+			$query = "SELECT monitoring.name,devip,class,snmpversion & 3,readcomm,test,status,lost,ok,latmax,latavg,uptime,alert,eventfwd,eventdel,depend,monitoring.device FROM monitoring LEFT OUTER JOIN devices ON (monitoring.name = devices.device ) WHERE class = 'dev'";
+			$sth = $dbh->prepare($query);
+		}elsif($_[0] eq "node"){
+			$query = "SELECT monitoring.name,monip,class,class,class,test,status,lost,ok,latmax,latavg,uptime,alert,eventfwd,eventdel,depend,device FROM monitoring WHERE class = 'node'";
+			$sth = $dbh->prepare($query);
+		}else{
+			die "no ReadMon class!";
+		}
 
-	$sth->execute();
-	while ((my @f) = $sth->fetchrow_array) {
-		my $na = $f[0];
-		my $ip = &misc::Dec2Ip($f[1]);
-		$main::srcna{$ip} = $na;
-		$main::mon{$na}{ip} = $ip;
-		$main::mon{$na}{cl} = $f[2];# Consider devp,devh for printers,hypervisors OR syslog,traps to distinguish event icon?
-		$main::mon{$na}{rv} = $f[3];
-		$main::mon{$na}{rc} = $f[4];
-		$main::mon{$na}{te} = $f[5];
-		$main::mon{$na}{st} = $f[6];
-		$main::mon{$na}{lo} = $f[7];
-		$main::mon{$na}{ok} = $f[8];
-		$main::mon{$na}{lm} = $f[9];
-		$main::mon{$na}{la} = $f[10];
-		$main::mon{$na}{up} = $f[11];
-		$main::mon{$na}{al} = $f[12];
-		$main::mon{$na}{ef} = $f[13];
-		$main::mon{$na}{ed} = $f[14];
-		$main::mon{$na}{dy} = $f[15];
-		$main::mon{$na}{dv} = $f[16];								# Used for viewdev
-		$main::mon{$na}{dc} = 0;								# Dependendant count
-		$main::mon{$na}{ds} = 'up';								# Dependency status
-		$nmon++;
+		$sth->execute();
+		while ((my @f) = $sth->fetchrow_array) {
+			my $na = $f[0];
+			my $ip = &misc::Dec2Ip($f[1]);
+			$main::srcna{$ip} = $na;
+			$main::mon{$na}{ip} = $ip;
+			$main::mon{$na}{cl} = $f[2];# Consider devp,devh for printers,hypervisors OR syslog,traps to distinguish event icon?
+			$main::mon{$na}{rv} = $f[3];
+			$main::mon{$na}{rc} = $f[4];
+			$main::mon{$na}{te} = $f[5];
+			$main::mon{$na}{st} = $f[6];
+			$main::mon{$na}{lo} = $f[7];
+			$main::mon{$na}{ok} = $f[8];
+			$main::mon{$na}{lm} = $f[9];
+			$main::mon{$na}{la} = $f[10];
+			$main::mon{$na}{up} = $f[11];
+			$main::mon{$na}{al} = $f[12];
+			$main::mon{$na}{ef} = $f[13];
+			$main::mon{$na}{ed} = $f[14];
+			$main::mon{$na}{dy} = $f[15];
+			$main::mon{$na}{dv} = $f[16];								# Used for viewdev
+			$main::mon{$na}{dc} = 0;								# Dependendant count
+			$main::mon{$na}{ds} = 'up';								# Dependency status
+			$nmon++;
+		}
+		$sth->finish if $sth;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("ReadMon failed.\n");
 	}
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 	&misc::Prt("RMON:$nmon entries read from $misc::dbname.monitoring\n");
 	return $nmon;
 }
@@ -1395,19 +3291,29 @@
 
 	my $nusr  = 0;
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 1});
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
 	my $where = ($_[0])?"WHERE $_[0]":"";
-	my $sth = $dbh->prepare("SELECT user,email,phone,viewdev FROM users $where");
-	$sth->execute();
-	while ((my @f) = $sth->fetchrow_array) {
-		$main::usr{$f[0]}{ml} = $f[1];
-		$main::usr{$f[0]}{ph} = $f[2];
-		$main::usr{$f[0]}{ph} =~ s/\D//g;							# Strip anything that isn't a number
-		$main::usr{$f[0]}{vd} = $f[3];
-		$nusr++;
+	my $query = '';
+	eval {
+		my $user_column = $dbh->quote_identifier('user');
+		$query = "SELECT $user_column,email,phone,viewdev FROM users $where";
+		my $sth = $dbh->prepare($query);
+		$sth->execute();
+		while ((my @f) = $sth->fetchrow_array) {
+			$main::usr{$f[0]}{ml} = $f[1];
+			$main::usr{$f[0]}{ph} = $f[2];
+			$main::usr{$f[0]}{ph} =~ s/\D//g;							# Strip anything that isn't a number
+			$main::usr{$f[0]}{vd} = $f[3];
+			$nusr++;
+		}
+		$sth->finish if $sth;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("ReadUser failed.\n");
 	}
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	Disconnect($dbh);
 	&misc::Prt("RUSR:$nusr entries ($_[0]) read from $misc::dbname.users\n");
 
 	return $nusr;
@@ -1446,15 +3352,32 @@
 				$time =~ s/\"//g;
 				$msg =~ s/\"//g;
 				$msg =~ s/\n/;/g;
-				open (NPIPE, ">>$misc::nagpipe");
-				print NPIPE "[$time] PROCESS_SERVICE_CHECK_RESULT;$lsource;$nag_event_service;$status;NeDi:$msg\n";
-				close NPIPE;
+				if (open (NPIPE, '>>', "$misc::nagpipe")) {
+					print NPIPE "[$time] PROCESS_SERVICE_CHECK_RESULT;$lsource;$nag_event_service;$status;NeDi:$msg\n";
+					close NPIPE;
+				}
+				else {
+					# Note that this can happen when Nagios is temporarily down; the "-p" test above is subject
+					# to a race condition between when that test was performed and when the open() call runs.
+					# So for the moment, we don't treat this as a fatal condition.
+					print("WARNING:  Could not open $misc::nagpipe for writing ($!).\n    Service check result for $lsource service $nag_event_service will not be recorded.\n");
+				}
 			}
 		}
 	}
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 1});
-	my $r = $dbh->do("INSERT INTO $_[0] ($_[1]) VALUES ($_[2])") || die "ERR :INSERT INTO $_[0] ($_[1]) VALUES ($_[2])\n";
-	$dbh->disconnect;
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
+	my $r;
+	my $query = '';
+	eval {
+		$query = "INSERT INTO $_[0] ($_[1]) VALUES ($_[2])";
+		$r = $dbh->do($query);
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("Insert failed.\n");
+	}
+	Disconnect($dbh);
 
 	return $r;
 }
@@ -1473,13 +3396,24 @@
 =cut
 sub Delete {
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 1});
-	my $r = $dbh->do("DELETE FROM  $_[0] WHERE $_[1]") || die "DB-ERR: DELETE FROM  $_[0] WHERE $_[1]\n";
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
+	my $r;
+	my $query = '';
+	eval {
+		$query = "DELETE FROM $_[0] WHERE $_[1]";
+		$r = $dbh->do($query);
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("Delete failed.\n");
+	}
+	elsif (!$r) {
+		print "ERROR: ".$dbh->errstr;	# Something went wrong; probably already reported above, due to RaiseError, and not in this branch.
+	}
+	Disconnect($dbh);
 
-	print "ERR :$dbh->errstr" if (!$r);								# Something went wrong
-	$r = 0 if ($r eq '0E0');									# 0E0 actually means 0
-
-	$dbh->disconnect;
+	$r = 0 if ($r eq '0E0');		# 0E0 actually means 0
 
 	return $r;
 }
@@ -1500,9 +3434,19 @@
 
 	my ($table, $set, $match) = @_;
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 1});
-	my $r = $dbh->do("UPDATE $table SET $set WHERE $match") || die "DB-ERR: UPDATE $table SET $set WHERE $match\n";
-	$dbh->disconnect;
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
+	my $r;
+	my $query = '';
+	eval {
+		$query = "UPDATE $table SET $set WHERE $match";
+		$r = $dbh->do($query);
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("Update failed.\n");
+	}
+	Disconnect($dbh);
 	&misc::Prt("UPDT:$table SET $set WHERE $match\n");
 
 	return $r;
@@ -1524,12 +3468,32 @@
 
 	my ($table, $col, $match) = @_;
 
-	my $dbh = DBI->connect("DBI:mysql:$misc::dbname:$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, AutoCommit => 1});
-	my $sth = $dbh->prepare("SELECT $col FROM $table WHERE $match") || die "DB-ERR: SELECT $col FROM $table WHERE $match\n";
-	$sth->execute()|| die "DB-ERR: SELECT $col FROM $table WHERE $match\n";
-	my @val = $sth->fetchrow_array;
-	$sth->finish if $sth;
-	$dbh->disconnect;
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
+	my $query = '';
+	my @val = ();
+	eval {
+		# Note:  If Select() were truly used on almost any table and column, we would need to
+		# apply "$dbh->quote_identifier($col)" and "$dbh->quote_identifier($table)" identifier
+		# quoting, along with assuring ourselves that $col only contains a single column name
+		# (and not more complex expressions) and that $table only contains a single table name
+		# (and not some complex JOIN condition) in all calls.  In practice, with the actual
+		# calls being made to this routine, such quoting has not yet proven necessary.
+		#
+		# Correct $match quoting must be handled upstream in the caller, due to the possible
+		# complexity of arbitrary match conditions.
+		#
+		$query = "SELECT $col FROM $table WHERE $match";
+		my $sth = $dbh->prepare($query);
+		$sth->execute();
+		@val = $sth->fetchrow_array;
+		$sth->finish if $sth;
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("Select failed.\n");
+	}
+	Disconnect($dbh);
 	if($col =~ /,/ ){
 		return @val;
 	}else{
@@ -1537,4 +3501,183 @@
 	}
 }
 
+
+=head2 FUNCTION QuoteIdentifier()
+
+Quote an identifier for use in an SQL statement.
+
+B<Options> identifer to quote
+
+B<Globals> -
+
+B<Returns> fully quoted/escaped identifier
+
+=cut
+sub QuoteIdentifier {
+
+	my $ident = $_[0];
+	my $quoted_ident = '';
+
+	# FIX LATER:  Opening a separate database connection just to quote a
+	# single identifier is extraordinarily wasteful.  This is one reason we
+	# want to change this library to use a persistent database connection.
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
+	my $query = '';
+	eval {
+		$query = "quote_identifier($ident)";
+		$quoted_ident = $dbh->quote_identifier($ident);
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("QuoteIdentifier failed.\n");
+	}
+	Disconnect($dbh);
+	return $quoted_ident;
+}
+
+
+=head2 FUNCTION QuoteLiteral()
+
+Quote a string literal for use in an SQL statement.
+
+B<Options> string literal to quote
+
+B<Globals> -
+
+B<Returns> fully quoted/escaped string literal (including the appropriate outer quotation marks)
+
+=cut
+sub QuoteLiteral {
+
+	my $literal = $_[0];
+	my $quoted_literal = '';
+
+	# FIX LATER:  Opening a separate database connection just to quote a
+	# single string literal is extraordinarily wasteful.  This is one reason
+	# we want to change this library to use a persistent database connection.
+	my $dbh = Connect("$misc::dbname", "$misc::dbhost", "$misc::dbuser", "$misc::dbpass", { RaiseError => 1, PrintError => 0, AutoCommit => 1 });
+	my $query = '';
+	eval {
+		$query = "quote($literal)";
+		$quoted_literal = $dbh->quote($literal);
+	};
+	if ($@) {
+		print_caller($query, $@);
+		Disconnect($dbh);
+		die("QuoteLiteral failed.\n");
+	}
+	Disconnect($dbh);
+	return $quoted_literal;
+}
+
+
+=head2 FUNCTION EncodeViewdev()
+
+Encode a viewdev as a string literal for inclusion in an SQL insert or update statement.
+This only takes care of encoding, not outside quoting or internal quote escaping.
+
+B<Options> inv, opt, stv strings (components of a viewdev)
+
+B<Globals> -
+
+B<Returns> encoded string literal (still needing escaping and appropriate outer quotation marks)
+
+=cut
+sub EncodeViewdev {
+	my $inv = $_[0];
+	my $opv = $_[1];
+	my $stv = $_[2];
+	return "$inv/$opv/$stv";
+}
+
+
+=head2 FUNCTION DecodeViewdev()
+
+Decode a viewdev into its component parts (inv, opv, stv).
+
+B<Options> viewdev string
+
+B<Globals> -
+
+B<Returns> a list of the component parts of the viewdev
+
+=cut
+sub DecodeViewdev {
+	my $vd = $_[0];
+	return split(m{/},$vd,3);
+}
+
+
+=head2 FUNCTION InterpretViewdev()
+
+Transform a viewdev specification for use in an SQL statement.
+
+B<Options> viewdev string
+
+B<Globals> -
+
+B<Returns> string (WHERE clause component part) ready for inclusion in an SQL statement
+
+=cut
+sub InterpretViewdev {
+	my $vd = $_[0];
+	my ($inv,$opv,$stv) = DecodeViewdev($vd);
+	$stv = QuoteLiteral($stv);
+	return $opv =~ /regexp/ ? RegexpClause($inv,$opv,$stv) : "$inv $opv $stv";
+}
+
+
+=head2 FUNCTION RegexpClause()
+
+Transform a generic relational operation into database-specific SQL.
+
+B<Options> Relational operation components.  Both $c and $v are assumed to
+have been appropriately quoted before being passed to this routine.
+
+B<Globals> -
+
+B<Returns> string (WHERE clause component part) ready for inclusion in an SQL statement
+
+=cut
+sub RegexpClause {
+	my $c = $_[0];
+	my $o = $_[1];
+	my $v = $_[2];
+	if ( defined($misc::dbtype) && $misc::dbtype eq 'postgresql' ) {
+		# PostgreSQL operators
+		if ($o =~ /^not\s+regexpCI$/) {
+			return " $c !~* $v ";
+		} elsif ($o =~ /^not\s+regexp$/) {
+			return " $c !~ $v "; 
+		} elsif ($o eq 'regexpCI') {
+			return " $c ~* $v "; 
+		} elsif ($o eq 'regexp') {
+			return " $c ~ $v ";
+		} elsif ($o eq 'string regexp') {
+			return " cast ($c as text) ~ $v ";
+		} else {
+			die("ERROR:  Invalid regexp operator.\n");
+		}
+	} else {
+		# MySQL operators
+		if ($o =~ /^not\s+regexpCI$/) {
+			return " $c not regexp $v ";
+		} elsif ($o =~ /^not\s+regexp$/) {
+			return " $c not regexp binary $v ";
+		} elsif ($o eq 'regexpCI') {
+			return " $c regexp $v ";
+		} elsif ($o eq 'regexp') {
+			return " $c regexp binary $v ";
+		} elsif ($o eq 'string regexp') {
+			# MySQL already implicitly casts numbers in string context to BINARY
+			# strings, so we don't force it explicitly here (though we could). 
+			# return " cast ($c as binary) ~ $v ";
+			return " $c regexp $v ";
+		} else {
+			die("ERROR:  Invalid regexp operator.\n");
+		}
+	}
+}
+
 1;
--- nedi-std/inc/libmisc.pm	2012-02-11 04:14:15.000000000 -0800
+++ nedi-gw/inc/libmisc.pm	2012-04-12 21:32:37.000000000 -0700
@@ -17,7 +17,8 @@
 use RRDs;
 
 use vars qw($seedlist $netfilter $webdev $nosnmpdev $border $ouidev $descfilter $getfwd $timeout);
-use vars qw($nedipath $backend $dbname $dbuser $dbpass $dbhost $clilib $uselogin $usessh $usepoe);
+use vars qw($nedipath $backend $dbtype $dbname $dbuser $dbpass $dbhost $clilib $uselogin $usessh $usepoe);
+use vars qw($mysql_path $mysqldump_path $psql_path $pg_dump_path);
 use vars qw($rrdcmd $rrdstep $rrdsize $discostep $nmapcmd $nagpipe $snmpwrite $redbuild $guiauth $locsep);
 use vars qw($arpwatch $ignoredvlans $ignoredmacs $useivl $retire $arppoison $macflood);
 use vars qw($notify $chka $latw $cpua $mema $tmpa $trfa $trfw $poew $pause $smtpserver $mailfrom $mailfoot);
@@ -59,14 +60,14 @@
 		$nconf = $main::opt{U}
 	}
 	if (-e "$nconf"){
-		open  ("CONF", $nconf);
+		open (CONF, '<', $nconf) or die "Cannot open $nconf ($!).\n";
 	}elsif (-e "/etc/nedi.conf"){
-		open  ("CONF", "/etc/nedi.conf");
+		open (CONF, '<', "/etc/nedi.conf") or die "Cannot open /etc/nedi.conf ($!).\n";
 	}else{
-		die "Can't find $nconf: $!\n";
+		die "Cannot find $nconf\n";
 	}
 	my @conf = <CONF>;
-	close("CONF");
+	close(CONF);
 
 	foreach my $l (@conf){
 		if ($l !~ /^[#;]|^$/){
@@ -103,11 +104,17 @@
 			elsif ($v[0] eq "descfilter"){$descfilter = $v[1]}
 
 			elsif ($v[0] eq "backend"){$backend = $v[1]}
+			elsif ($v[0] eq "dbtype"){$dbtype = $v[1]}
 			elsif ($v[0] eq "dbname"){$dbname = $v[1]}
 			elsif ($v[0] eq "dbuser"){$dbuser = $v[1]}
 			elsif ($v[0] eq "dbpass"){$dbpass = $v[1]}
 			elsif ($v[0] eq "dbhost"){$dbhost = $v[1]}
 
+			elsif ($v[0] eq "mysql_path"){$mysql_path = $v[1]}
+			elsif ($v[0] eq "mysqldump_path"){$mysqldump_path = $v[1]}
+			elsif ($v[0] eq "psql_path"){$psql_path = $v[1]}
+			elsif ($v[0] eq "pg_dump_path"){$pg_dump_path = $v[1]}
+
 			elsif ($v[0] eq "clilib"){$clilib = $v[1]}
 
 			elsif ($v[0] eq "ignoredvlans"){$ignoredvlans = $v[1]}
@@ -123,6 +130,7 @@
 			elsif ($v[0] eq "rrdstep"){$rrdstep = $v[1]}
 			elsif ($v[0] eq "rrdsize"){$rrdsize = $v[1]}
 			elsif ($v[0] eq "rrdcmd"){$rrdcmd = $v[1]}
+			elsif ($v[0] eq "nmapcmd"){$nmapcmd = $v[1]}
 			elsif ($v[0] eq "nagpipe"){$nagpipe = $v[1]}
 
 			elsif ($v[0] eq "notify"){$notify = $v[1]}
@@ -178,15 +186,21 @@
 	my ($so) = @_;
 
 	unless( exists $sysobj{$so} ){							# Load .def if not done already
+		my $deffile = '';
 		if (-e "$main::p/sysobj/$so.def"){
-			open  ("DEF", "$main::p/sysobj/$so.def");
+			$deffile = "$main::p/sysobj/$so.def";
 			&Prt("SOBJ:Reading $so.def\n");
 		}else{
-			open  ("DEF","$main::p/sysobj/other.def");
+			$deffile = "$main::p/sysobj/other.def";
 			&Prt("SOBJ:$so.def not found, using other.def\n");
 		}
-		my @def = <DEF>;
-		close("DEF");
+		my @def = ();
+		if (open (DEF, '<', $deffile)) {
+			@def = <DEF>;
+			close DEF;
+		}else{
+			die "ERROR:  Could not open $deffile for reading ($!).\n";
+		}
 		$sysobj{$so}{ty} = $so;
 		$sysobj{$so}{hc} = $sysobj{$so}{mv} = $sysobj{$so}{ib} = 0;
 		$sysobj{$so}{cul} = '-;;';
@@ -280,9 +294,9 @@
 =cut
 sub ReadOUIs {
 
-	open  ("OUI", "$main::p/inc/oui.txt" ) or die "no oui.txt in $main::p/inc!";			# Read OUI's first
+	open (OUI, '<', "$main::p/inc/oui.txt" ) or die "no oui.txt in $main::p/inc ($!)!";			# Read OUI's first
 	my @ouitxt = <OUI>;
-	close("OUI");
+	close(OUI);
 
 	my @nics = grep /(base 16)/,@ouitxt;
 	foreach my $l (@nics){
@@ -292,9 +306,9 @@
 			$oui{lc($m[0])} = substr($m[2],0,32);
 		}
 	}
-	open  ("IAB", "$main::p/inc/iab.txt" ) or die "no iab.txt in $main::p/inc!";			# Now add IAB's (00-50-C2)
+	open (IAB, '<', "$main::p/inc/iab.txt" ) or die "no iab.txt in $main::p/inc ($!)!";			# Now add IAB's (00-50-C2)
 	my @iabtxt = <IAB>;
-	close("IAB");
+	close(IAB);
 
 	@nics = grep /(base 16)/,@iabtxt;
 	foreach my $l (@nics){
@@ -499,16 +513,21 @@
 	return unless -f $file;
 	return unless $file =~ /csv$/;
 
-	open  ("KCSV", "$file" ) or print "couldn't open $file\n" && return '';
-	my @kcsv = <KCSV>;
-	close("KCSV");
+	my @kcsv = ();
+	if (open (KCSV, '<', "$file" )) {
+		@kcsv = <KCSV>;
+		close(KCSV);
+	} else {
+		print "couldn't open $file ($!)\n";
+		return '';	# odd return value, considering the routine itself just falls off the end
+	}
 
 	my @aps = grep /(infrastructure)/,@kcsv;
 	foreach my $l (@aps){
-			$l =~ s/[\r\n]//g;
-			my @f = split(/;/,$l);
-			$f[3] =~ s/^(..):(..):(..):(..):(..):(..)/\L$1$2$3$4\E/;
-			$db::ap{lc($f[3])} = $main::now;
+		$l =~ s/[\r\n]//g;
+		my @f = split(/;/,$l);
+		$f[3] =~ s/^(..):(..):(..):(..):(..):(..)/\L$1$2$3$4\E/;
+		$db::ap{lc($f[3])} = $main::now;
    	}
 }
 
@@ -625,9 +644,13 @@
 		}
 	}elsif (-e "$seedlist"){
 		&Prt("SEED:Using $seedlist\n");
-		open  (LIST, "$seedlist");
-		my @list = <LIST>;
-		close(LIST);
+		my @list = ();
+		if (open (LIST, '<', "$seedlist")) {
+			@list = <LIST>;
+			close(LIST);
+		}else{
+			&Prt("SEED:Cannot open $seedlist for reading ($!).\n");
+		}
 		foreach my $l (@list){
 			if ($l !~ /^[#;]|^$/){
 				$l =~ s/[\r\n]//g;
@@ -765,7 +788,7 @@
 			if($clistat !~ /^(OK|not implemented)/ and $notify =~ /b/i){			# If not ok, but supported...
 					my $msg = "Config backup error: $clistat";
 					&Prt("DISC:$msg\n");
-					&db::Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$dv\",\"$msg\",\"cfge\",\"$dv\"");
+					&db::Insert('events','level,time,source,info,class,device',"150,$main::now,'$dv','$msg','cfge','$dv'");
 					$mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $misc::notify =~ /B/;
 			}
 		}
@@ -813,9 +836,9 @@
 	&Prt("\nBuildArp     ------------------------------------------------------------------\n");
 	foreach my $f (@awf){
 		&Prt("FILE:Reading $f\n");
-		open  ("ARPDAT", $f ) or die "ARP:$f not found!";					# read arp.dat
+		open (ARPDAT, '<', $f ) or die "ARP:$f not found!";					# read arp.dat
 		my @adat = <ARPDAT>;
-		close("ARPDAT");
+		close(ARPDAT);
 		foreach my $l (@adat){
 			$l =~ s/[\r\n]//g;
 			my @ad = split(/\s/,$l);
@@ -940,7 +963,7 @@
 	if($newdv){
 		if($_[1] and ($main::nod{$_[0]}{dv} ne $newdv or $main::nod{$_[0]}{if} ne $newif) ){
 			$main::nod{$_[0]}{ic}++;
-			&db::Insert('iftrack','mac,ifupdate,device,ifname,vlanid,ifmetric',"\"$mc\",\"$main::nod{$_[0]}{iu}\",\"$main::nod{$_[0]}{dv}\",\"$main::nod{$_[0]}{if}\",\"$main::nod{$_[0]}{vl}\",\"$main::nod{$_[0]}{im}\"") if !$main::opt{t};
+			&db::Insert('iftrack','mac,ifupdate,device,ifname,vlanid,ifmetric',"'$mc',$main::nod{$_[0]}{iu},'$main::nod{$_[0]}{dv}','$main::nod{$_[0]}{if}',$main::nod{$_[0]}{vl},$main::nod{$_[0]}{im}") if !$main::opt{t};
 			$ifchg++;
 		}
 		$main::nod{$_[0]}{im} = $newmet;
@@ -972,6 +995,7 @@
 
 	my $mc    = substr($_[0],0,12);									# Strip vlid from MAC
 	my $vl    = substr($_[0],12);									# Strip MAC from vlid
+	$vl       = ($vl =~ /^[0-9]+$/)?$vl:0;								# Ensure a valid value is available below.
 	my $upip  = 0;
 	my $hasip = 0;
 
@@ -982,7 +1006,7 @@
 				$upip = 1;
 				$main::nod{$_[0]}{ac}++;
 				my $dip = &Ip2Dec($main::nod{$_[0]}{ip});
-				&db::Insert('iptrack','mac,ipupdate,name,nodip,vlanid,device',"\"$mc\",\"$main::now\",\"$main::nod{$_[0]}{na}\",\"$dip\",\"$vl\",\"$main::nod{$_[0]}{dv}\"") unless $main::opt{'t'};
+				&db::Insert('iptrack','mac,ipupdate,name,nodip,vlanid,device',"'$mc',$main::now,'$main::nod{$_[0]}{na}',$dip,$vl,'$main::nod{$_[0]}{dv}'") unless $main::opt{'t'};
 				$ipchg++;
 			}elsif($main::nod{$_[0]}{au} < $retire){					# Same IP forever, force update
 				$upip = 1;
@@ -1070,7 +1094,7 @@
 			if(!$nodex and $misc::notify =~ /f/i){
 				my $msg = "Node $mc appeared on $main::nod{$mcvl}{if} Vl$main::nod{$mcvl}{vl} as $main::nod{$mcvl}{na} with IP $main::nod{$mcvl}{ip}";
 				&Prt("NODE:$msg\n");
-				&db::Insert('events','level,time,source,info,class,device',"\"100\",\"$main::now\",\"$main::nod{$mcvl}{dv}\",\"$msg\",\"sec\",\"$main::nod{$mcvl}{dv}\"");
+				&db::Insert('events','level,time,source,info,class,device',"100,$main::now,'$main::nod{$mcvl}{dv}','$msg','sec','$main::nod{$mcvl}{dv}'");
 				$mq += &mon::AlertQ("$main::nod{$mcvl}{dv}: $msg\n","",1,$main::nod{$mcvl}{dv}) if $notify =~ /F/;
 			}
 		}else{
@@ -1108,7 +1132,7 @@
 			$portprop{$dv}{$if}{pop} > $macflood){
 			my $msg = "$portprop{$dv}{$if}{pop} MAC entries exceed threshold of $macflood on $if";
 			&Prt("FLOD:$msg\n");
-			&db::Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$dv\",\"$msg\",\"sec\",\"$dv\"");
+			&db::Insert('events','level,time,source,info,class,device',"150,$main::now,'$dv','$msg','sec','$dv'");
 			$mq += &mon::AlertQ("$dv: $msg\n","",1,$dv) if $notify =~ /N/;
 			$nfld++;
 		}
@@ -1135,14 +1159,14 @@
 	&Prt("\nRetireNod    ------------------------------------------------------------------\n");
 	foreach my $mcvl ( keys %main::nod ){
 
-		if ($main::nod{$mcvl}{ls} < $retire){
-			my $mc  = substr($mcvl,0,12);
-			my $vl  = substr($mcvl,12);
-
-			my $vlmatch = ($useivl and $vl =~ /$useivl/)?"AND vlanid=\"$vl\"":"";
-			my $ifd = &db::Delete('iftrack',"mac=\"$mc\" $vlmatch");
-			my $ipd = &db::Delete('iptrack',"mac=\"$mc\" $vlmatch");
-			&Prt("RNOD:Remove $mc $main::nod{$mcvl}{na} $main::nod{$mcvl}{ip} (".localtime($main::nod{$mcvl}{ls}).", $ifd iftrack, $ipd iptrack)\n");
+		if (($main::nod{$mcvl}{ls} || 0) < $retire){
+			my $mc = substr($mcvl,0,12);
+			my $vl = length($mcvl) > 12 ? substr($mcvl,12) : '0';
+
+			my $vlmatch = ($useivl and $vl =~ /$useivl/)?"AND vlanid=$vl":"";
+			my $ifd = &db::Delete('iftrack',"mac='$mc' $vlmatch");
+			my $ipd = &db::Delete('iptrack',"mac='$mc' $vlmatch");
+			&Prt("RNOD:Remove $mc $main::nod{$mcvl}{na} $main::nod{$mcvl}{ip} (".($main::nod{$mcvl}{ls} ? localtime($main::nod{$mcvl}{ls}) : 'Never').", $ifd iftrack, $ipd iptrack)\n");
 			delete $main::nod{$mcvl};
 			$nret++;
 		}
--- nedi-std/inc/libmon.pm	2012-04-20 21:11:49.000000000 -0700
+++ nedi-gw/inc/libmon.pm	2012-04-07 21:08:37.000000000 -0700
@@ -37,7 +37,7 @@
 	$nt  = &db::ReadMon("dev");
 	$nt += &db::ReadMon("node");
 
-	&db::ReadUser("groups & 8 AND (phone != \"\" OR email != \"\")");
+	&db::ReadUser("groups & 8 = 8 AND (phone != '' OR email != '')");
 }
 
 
@@ -121,6 +121,7 @@
 	}
 }
 
+
 =head2 FUNCTION AlertQ()
 
 Queues alerts for delivery within a single SMS or Mail
@@ -140,7 +141,7 @@
 	my $nm = 0;
 	foreach my $u ( keys %main::usr ){
 
-		my $viewdev = ($main::usr{$u}{vd})?&db::Select('devices','device',"device=\"$dev\" AND $main::usr{$u}{vd}"):$dev;
+		my $viewdev = ($main::usr{$u}{vd})?&db::Select('devices','device',"device='$dev' AND ".db::InterpretViewdev($main::usr{$u}{vd})):$dev;
 		if(defined $viewdev and $viewdev eq $dev){						# Send mail only to those who can see the associated device
 
 			if($main::usr{$u}{ml} and $mail and $srv & 1){
@@ -223,9 +224,17 @@
 		if($main::usr{$u}{sms}){
 			&misc::Prt("SMS :$u/$main::usr{$u}{ph}\n");
 			#1. Spooling to smsd:
-			$ns++ if open(SMS, ">/var/spool/sms/outgoing/$u");			# User is filename to avoid flooding
-			print SMS "To:$main::usr{$u}{ph}\n\n$main::usr{$u}{sms}\n";
-			close(SMS);
+			# The two-argument form of open() is (or ought to be, anyway) largely deprecated.
+			# It has some specialized uses not available in the three-argument form, but
+			# generally the three-argument form is much clearer and safer.
+			if (open(SMS, '>', "/var/spool/sms/outgoing/$u")) {			# User is filename to avoid flooding
+				$ns++;
+				print SMS "To:$main::usr{$u}{ph}\n\n$main::usr{$u}{sms}\n";
+				close(SMS);
+			}
+			else {
+				# FIX LATER:  Should there be some significant error handling here?
+			}
 
 			#2. Calling gammu server:
 			#$ns++ if !system "gammu-smsd-inject TEXT $main::usr{$u}{ph} -text \"$main::usr{$u}{sms}\" >/dev/null";
--- nedi-std/inc/libsnmp.pm	2012-04-20 21:11:49.000000000 -0700
+++ nedi-gw/inc/libsnmp.pm	2012-04-11 12:12:43.000000000 -0700
@@ -102,7 +102,7 @@
 
 	if($ip =~ /^$|0.0.0.0|^127/){
 		if($misc::notify =~ /d/i){
-			&db::Insert('events','level,time,source,info,class',"\"100\",\"$main::now\",\"$ip\",\"IP=$ip, not discoverable\",\"nedi\"");
+			&db::Insert('events','level,time,source,info,class',"100,$main::now,'$ip','IP=$ip, not discoverable','nedi'");
 		}
 
 		&misc::Prt("IDNT:$ip is not discoverable\n","Not discoverable\t\t");
@@ -111,7 +111,7 @@
 		&misc::Prt("IDNT:$ip done already\n","Done already\t\t");
 	}elsif($ip !~ /$misc::netfilter/){
 		if($misc::notify =~ /d/i){
-			&db::Insert('events','level,time,source,info,class',"\"100\",\"$main::now\",\"$ip\",\"Netfilter $misc::netfilter, not discoverable\",\"nedi\"");
+			&db::Insert('events','level,time,source,info,class',"100,$main::now,'$ip','Netfilter $misc::netfilter, not discoverable','nedi'");
 		}
 		&misc::Prt("IDNT:$ip doesn't match netfilter $misc::netfilter\n","Netfilter $misc::netfilter\t\t");
 		return "";
@@ -157,7 +157,7 @@
 		$na = "";
 		&misc::Prt("ERR :$err\n","No response from $id, not discoverable\t\t");
 		if($misc::notify =~ /d/i){
-			&db::Insert('events','level,time,source,info,class',"\"100\",\"$main::now\",\"$ip\",\"No response from $id, not discoverable\",\"nedi\"");
+			&db::Insert('events','level,time,source,info,class',"100,$main::now,'$ip','No response from $id, not discoverable','nedi'");
 		}
 	}else{
 		$na = &misc::Strip($r->{$namO});
@@ -186,7 +186,7 @@
 			$so = &misc::Strip($r->{$sysO});
 			if(exists $main::dev{$na} and $main::dev{$na}{so} ne $so and $misc::notify =~ /s/i){
 				my $msg = "Sysobjid changed from $main::dev{$na}{so} to $so";
-				&db::Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$na\",\"$msg\",\"nedi\",\"$na\"");
+				&db::Insert('events','level,time,source,info,class,device',"150,$main::now,'$na','$msg','nedi','$na'");
 				$misc::mq += &mon::AlertQ("$na: $msg\n","",1,$na) if $misc::notify =~ /S/;
 			}
 		}
@@ -199,7 +199,7 @@
 		if(!$err and defined $r->{$desO}){$de = &misc::Strip($r->{$desO});}
 		if ($de =~ /$misc::descfilter/){							# Only define device, if not filtered
 			$session->close;
-			&db::Insert('events','level,time,source,info,class',"\"100\",\"$main::now\",\"$ip\",\"Descfilter $misc::descfilter, not discoverable\",\"nedi\"") if $misc::notify =~ /d/i;
+			&db::Insert('events','level,time,source,info,class',"100,$main::now,'$ip','Descfilter $misc::descfilter, not discoverable','nedi'") if $misc::notify =~ /d/i;
 			&misc::Prt("IDNT:Descfilter $misc::descfilter\n","Descfilter $misc::descfilter\t");
 			return;
 		}else{
@@ -207,7 +207,7 @@
 				unless(exists $main::dev{$na}){
 					my $msg = "New Device with ID $id and IP $ip found";
 					&misc::Prt("IDNT:$msg\n");
-					&db::Insert('events','level,time,source,info,class,device',"\"100\",\"$main::now\",\"$na\",\"$msg\",\"nedi\",\"$na\"") if $misc::notify =~ /d/i;
+					&db::Insert('events','level,time,source,info,class,device',"100,$main::now,'$na','$msg','nedi','$na'") if $misc::notify =~ /d/i;
 					$misc::mq += &mon::AlertQ("$na: $msg\n","",1,$na) if $misc::notify =~ /D/;
 					$main::dev{$na}{fs} = $main::now;
 					$main::dev{$na}{rv} = $ver;					# Only set SNMP readversion upon 1st or re-discovery to avoid v1 fallback in case of communication problems!
@@ -362,7 +362,7 @@
 				$sn = 'err' if $sn eq "noSuchObject";
 				if($main::dev{$na}{sn} and $main::dev{$na}{sn} ne $sn and $misc::notify =~ /s/i){
 					my $msg = "Serial number changed from $main::dev{$na}{sn} to $sn";
-					&db::Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$na\",\"$msg\",\"nedi\",\"$na\"");
+					&db::Insert('events','level,time,source,info,class,device',"150,$main::now,'$na','$msg','nedi','$na'");
 					$misc::mq += &mon::AlertQ("$na: $msg\n","",1,$na) if $misc::notify =~ /S/;
 				}
 				$main::dev{$na}{sn} = $sn;
@@ -385,7 +385,7 @@
 				my $bi = substr($bimg,0,63);
 				if($main::dev{$na}{bi} and $main::dev{$na}{bi} ne $bi and $misc::notify =~ /s/i){
 					my $msg = "Bootimage changed from $main::dev{$na}{bi} to $bi";
-					&db::Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$na\",\"$msg\",\"nedi\",\"$na\"");
+					&db::Insert('events','level,time,source,info,class,device',"150,$main::now,'$na','$msg','nedi','$na'");
 					$misc::mq += &mon::AlertQ("$na: $msg\n","",1,$na) if $misc::notify =~ /S/;
 				}
 				$main::dev{$na}{bi} = $bi;
@@ -470,6 +470,7 @@
 		}
 	}
 
+
 	if($skip !~ /g/){
 		if($misc::sysobj{$so}{cpu}){
 			$r  = $session->get_request($misc::sysobj{$so}{cpu});
@@ -481,7 +482,7 @@
 				$main::dev{$na}{cpu} = &misc::Strip($r->{$misc::sysobj{$so}{cpu}});
 				if($misc::notify =~ /s/i and $main::dev{$na}{cpu} > $misc::cpua){
 					my $msg = "CPU load of $main::dev{$na}{cpu}% exceeds threshold of ${misc::cpua}%";
-					&db::Insert('events','level,time,source,info,class,device',"\"200\",\"$main::now\",\"$na\",\"$msg\",\"nedi\",\"$na\"");
+					&db::Insert('events','level,time,source,info,class,device',"200,$main::now,'$na','$msg','nedi','$na'");
 					$misc::mq += &mon::AlertQ("$na: $msg\n","",1,$na) if $misc::notify =~ /S/;
 				}
 				&misc::Prt("CPU :Utilization = $main::dev{$na}{cpu}%\n");
@@ -516,7 +517,7 @@
 				&misc::Prt("MEM :$msg\n");
 
 				if($misc::notify =~ /s/i and $al){
-					&db::Insert('events','level,time,source,info,class,device',"\"200\",\"$main::now\",\"$na\",\"$msg\",\"nedi\",\"$na\"");
+					&db::Insert('events','level,time,source,info,class,device',"200,$main::now,'$na','$msg','nedi','$na'");
 					$misc::mq += &mon::AlertQ("$na: $msg\n","",1,$na) if $misc::notify =~ /S/;
 				}
 			}
@@ -548,7 +549,7 @@
 				$main::dev{$na}{tmp} = int(&misc::Strip($r->{$misc::sysobj{$so}{tmp}}) * $misc::sysobj{$so}{tmu});
 				if($misc::notify =~ /s/i and $main::dev{$na}{tmp} > $misc::tmpa){
 					my $msg = "Temperature of $main::dev{$na}{tmp}C exceeds threshold of ${misc::tmpa}C";
-					&db::Insert('events','level,time,source,info,class,device',"\"200\",\"$main::now\",\"$na\",\"$msg\",\"nedi\",\"$na\"");
+					&db::Insert('events','level,time,source,info,class,device',"200,$main::now,'$na','$msg','nedi','$na'");
 					$misc::mq += &mon::AlertQ("$na: $msg\n","",1,$na) if $misc::notify =~ /S/;
 				}
 				&misc::Prt("TEMP:Environment = $main::dev{$na}{tmp} Degrees Celcius\n");
@@ -609,7 +610,7 @@
 
 	&misc::Prt("\nInterfaces   ------------------------------------------------------------------\n");
 
-	&db::ReadInt("device = \"$na\"");
+	&db::ReadInt("device = '$na'");
 	if($skip =~ /i/ and $skip =~ /t/ and $skip =~ /e/ and $skip =~ /d/ and $skip =~ /b/ and $skip =~ /w/ and $skip =~ /A/ and $skip =~ /O/){	# Don't create session, if everything's skipped
 		&misc::Prt("IF  :Skipping all IF data, no write\n");
 		return 1;
@@ -1121,7 +1122,7 @@
 							if($misc::notify =~ /u/i and $main::int{$na}{$aifx{$k}}{sta}){# Don't notify if IF is shutdown
 								my $msg = "Duplicate IP $iaddr found on " . join(', ', keys %{$misc::ifip{$iaddr}});
 								&misc::Prt("$msg\n");
-								&db::Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$na\",\"$msg\",\"nedi\",\"$na\"");
+								&db::Insert('events','level,time,source,info,class,device',"150,$main::now,'$na','$msg','nedi','$na'");
 								$misc::mq += &mon::AlertQ("$na: $msg\n","",1,$na) if $misc::notify =~ /U/;
 							}
 						}
@@ -1552,7 +1553,7 @@
 						$misc::portprop{$na}{$lif}{lnk} = 1;
 						if($misc::notify =~ /d/i){
 							my $msg = "Potential $neb{$i}{$n}{'dp'} loop on $lif!";
-							&db::Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$na\",\"$msg\",\"nedi\",\"$na\"");
+							&db::Insert('events','level,time,source,info,class,device',"150,$main::now,'$na','$msg','nedi','$na'");
 							$misc::mq += &mon::AlertQ("$na: $msg\n","",1,$na) if $misc::notify =~ /D/;
 						}
 					}elsif($neb{$i}{$n}{'na'} =~ /$misc::border/){
@@ -1660,7 +1661,7 @@
 							&misc::Prt( sprintf ("%-4.4s:IP address: %s\n",$neb{$i}{$n}{'dp'},$neb{$i}{$n}{'ip'}) );
 							$misc::portprop{$na}{$lif}{nsd} = 1;
 							if($misc::notify =~ /d/i){
-								&db::Insert('events','level,time,source,info,class,device',"\"100\",\"$main::now\",\"$na\",\"$neb{$i}{$n}{'dp'}:$neb{$i}{$n}{'na'} IP=$neb{$i}{$n}{'ip'} on $neb{$i}{$n}{'if'}\",\"nedi\",\"$na\"");
+								&db::Insert('events','level,time,source,info,class,device',"100,$main::now,'$na','$neb{$i}{$n}{dp}:$neb{$i}{$n}{na} IP=$neb{$i}{$n}{ip} on $neb{$i}{$n}{if}','nedi','$na'");
 							}
 						}else{
 							&misc::Prt( sprintf ("%-4.4s:Queueing of %s ",$neb{$i}{$n}{'dp'},$neb{$i}{$n}{'na'}) );
@@ -1825,7 +1826,7 @@
 							}elsif ($misc::arp{$mc} eq '0.0.0.0'){		# ...or no IP found
 								&misc::Prt(" no IP found");
 								if($misc::notify =~ /d/i){
-									&db::Insert('events','level,time,source,info,class,device',"\"100\",\"$main::now\",\"$mc\",\"OUI device ($oui) IP=0.0.0.0\",\"nedi\",\"$na\"");
+									&db::Insert('events','level,time,source,info,class,device',"100,$main::now,'$mc',".db::QuoteLiteral("OUI device ($oui) IP=0.0.0.0").",'nedi','$na'");
 								}
 							}else{
 								push (@misc::todo,"$mc");
@@ -1847,7 +1848,7 @@
 			&misc::Prt("ARP :$myarpc{$mc} IPs for $mc\n");
 			my $fmc = substr($mc,0,4) . "." . substr($mc,4,4) . "." . substr($mc,8,4);
 			my $msg = "$myarpc{$mc} IP addresses found for $fmc";
-			&db::Insert('events','level,time,source,info,class,device',"\"150\",\"$main::now\",\"$na\",\"$msg\",\"sec\",\"$na\"");
+			&db::Insert('events','level,time,source,info,class,device',"150,$main::now,'$na','$msg','sec','$na'");
 			$misc::mq += &mon::AlertQ("$na: $msg\n","",1,$na) if $misc::notify =~ /N/;
 		}
 	}
--- nedi-std/moni.pl	2012-04-20 21:11:49.000000000 -0700
+++ nedi-gw/moni.pl	2012-04-11 12:06:24.000000000 -0700
@@ -45,7 +45,7 @@
 use Getopt::Std;
 use Net::SNMP qw(ticks_to_time);
 
-use vars qw($now $warn $p $mq %opt %dev %usr %mon %depdevs %depdown %depcount %msgq);
+use vars qw($now $warn $p $mq %opt %dev %usr %mon %depdevs %depdown %depcount %msgq %srcna);
 
 getopts('Dt:v',\%opt) || &HELP_MESSAGE;
 
@@ -65,13 +65,21 @@
 	my $ntgt = &mon::InitMon();
 	my @tgts = keys %mon;
 	my $t  = pop @tgts;
-	my $msg = "moni.pl test using first monitored device: $t";
-	&db::Insert('events','level,time,source,info,class,device',"\"$opt{t}\",\"$now\",\"$mon{$t}{dv}\",\"$msg\",\"moni\",\"$mon{$t}{dv}\"");
-	&db::Insert('incidents','level,name,deps,start,end,user,time,grp,comment,device',"\"$opt{t}\",\"$t\",\"0\",\"$now\",\"0\",\"\",\"0\",\"1\",\"\",\"$mon{$t}{dv}\"");
-	&db::Insert('incidents','level,name,deps,start,end,user,time,grp,comment,device',"\"$opt{t}\",\"$t\",\"0\",\"$now\",\"".($now+$misc::pause)."\",\"\",\"0\",\"1\",\"\",\"$mon{$t}{dv}\"");
+	if (defined $t) {
+		my $msg = "moni.pl test using first monitored device: $t";
+		if ($opt{t} !~ /^\d+$/) {
+			die "ERROR:  The -t option takes a numeric argument.\n";
+		}
+		&db::Insert('events','level,time,source,info,class,device',"$opt{t},$now,'$mon{$t}{dv}','$msg','moni','$mon{$t}{dv}'");
+		&db::Insert('incidents','level,name,deps,start,'.db::QuoteIdentifier('end').','.db::QuoteIdentifier('user').',time,grp,comment,device',"$opt{t},'$t',0,$now,0,'',0,1,'','$mon{$t}{dv}'");
+		&db::Insert('incidents','level,name,deps,start,'.db::QuoteIdentifier('end').','.db::QuoteIdentifier('user').',time,grp,comment,device',"$opt{t},'$t',0,$now,".($now+$misc::pause).",'',0,1,'','$mon{$t}{dv}'");
 
-	my ($mq,$sq) = &mon::AlertQ("$msg\n","$msg ",$mon{$t}{al},$mon{$t}{dv});
-	my $af = &mon::AlertFlush("moni.pl Test",$mq,$sq);
+		my ($mq,$sq) = &mon::AlertQ("$msg\n","$msg ",$mon{$t}{al},$mon{$t}{dv});
+		my $af = &mon::AlertFlush("moni.pl Test",$mq,$sq);
+	}
+	else {
+		&misc::Prt("ERROR:There are no valid targets to monitor at this time.\n");
+	}
 	exit;
 }elsif ($opt{'D'}) {											# Daemonize or...
 	&misc::Daemonize;
@@ -92,8 +100,8 @@
 			if( exists $mon{$mon{$d}{dy}} ){						# Does it exist?
 				push @{$mon{$mon{$d}{dy}}{da}},$d;					# Add to parent dependendants
 			}else{
-				&db::Update('monitoring','depend="-"',"name =\"$d\"");
-				&db::Insert('events','level,time,source,info,class,device',"\"50\",\"$now\",\"$d\",\"Non existant dependency $mon{$d}{dy} removed.\",\"moni\",\"$mon{$d}{dv}\"");
+				&db::Update('monitoring',"depend='-'","name ='$d'");
+				&db::Insert('events','level,time,source,info,class,device',"50,$now,'$d','Non existant dependency $mon{$d}{dy} removed.','moni','$mon{$d}{dv}'");
 				&misc::Prt(" doesn't exist!");
 			}
 		}
@@ -116,7 +124,7 @@
 			&misc::Prt("SKIP:Deps=$mon{$d}{ds}($mon{$d}{dc})\n");
 		}elsif($mon{$d}{te}){
 			if($mon{$d}{ip} eq '0.0.0.0'){							# Check is set and target exists
-				&db::Insert('events','level,time,source,info,class,device',"'150',\"$now\",\"$d\",\"No IP found to check $mon{$d}{te}! Not in devices or nodes?\",\"moni\",\"$mon{$d}{dv}\"") if $mon{$d}{ds} eq 'up';
+				&db::Insert('events','level,time,source,info,class,device',"150,$now,'$d','No IP found to check $mon{$d}{te}! Not in devices or nodes?','moni','$mon{$d}{dv}'") if $mon{$d}{ds} eq 'up';
 				&misc::Prt("SKIP:No IP found! Not in devices or nodes?\n");
 			}else{
 				if($mon{$d}{te} eq "ping"){
@@ -128,7 +136,7 @@
 					if($latency and $mon{$d}{up} > $uptime and $mon{$d}{up} < 4294900000){	# Ignore alledged reboot, due to 32bit overflow
 						my $wup = ticks_to_time($mon{$d}{up});
 						&misc::Prt("BOOT:Rebooted! Was up for $wup\n");
-						&db::Insert('events','level,time,source,info,class,device',"'150',\"$now\",\"$d\",\"Rebooted (was up for $wup)!\",\"moni\",\"$mon{$d}{dv}\"");
+						&db::Insert('events','level,time,source,info,class,device',"150,$now,'$d','Rebooted (was up for $wup)!','moni','$mon{$d}{dv}'");
 						$mq += &mon::AlertQ("- $d rebooted! Was up for $wup\n","$d rebooted! ",$mon{$d}{al},$mon{$d}{dv});
 					}
 				}
@@ -137,24 +145,24 @@
 					my $latmax = ($latency > $mon{$d}{lm})?$latency:$mon{$d}{lm};		# Update max if higher than previous
 					my $latavg = sprintf("%.0f",( ($ok - 1) * $mon{$d}{la} + $latency)/$ok);# This is where school stuff comes in handy (sprintf to round)
 
-					&db::Update('monitoring',"status=\"0\",lastok=\"$now\",uptime=\"$uptime\",ok=\"$ok\",latency=\"$latency\",latmax=\"$latmax\",latavg=\"$latavg\"","name =\"$d\"");
+					&db::Update('monitoring',"status=0,lastok=$now,uptime=$uptime,ok=$ok,latency=$latency,latmax=$latmax,latavg=$latavg","name='$d'");
 					&misc::Prt("UP  :");
 					&MarkDep($d,'up',0);							# Mark everytime to avoid errors when moni is restarted
 					if($mon{$d}{st} >= $misc::chka){
 						my $msg = "$d recovered".(($mon{$d}{dc})?", affects $mon{$d}{dc} more targets!":"");
 						my $dnt  = sprintf("was down for %.1fh", $mon{$d}{st}*$misc::pause/3600);
 						&misc::Prt("$msg\n");
-						&db::Insert('events','level,time,source,info,class,device',"'50',\"$now\",\"$d\",\"$msg, $dnt\",\"moni\",\"$mon{$d}{dv}\"");
-						&db::Update('incidents',"end=\"$now\"","name =\"$d\" AND end=0");
+						&db::Insert('events','level,time,source,info,class,device',"50,$now,'$d','$msg, $dnt','moni','$mon{$d}{dv}'");
+						&db::Update('incidents',db::QuoteIdentifier('end')."=$now","name='$d' AND ".db::QuoteIdentifier('end')."=0");
 						$mq += &mon::AlertQ("- $msg, latency ${latency}ms, $dnt\n","$msg ",$mon{$d}{al},$mon{$d}{dv});
 					}else{
 						&misc::Prt("Last status=$mon{$d}{st}\n");
 					}
-					&db::Insert('events','level,time,source,info,class,device',"'150',\"$now\",\"$d\",\"Latency ${latency}ms exceeds threshold of ${misc::latw}ms\",\"moni\",\"$mon{$d}{dv}\"") if($latency > $misc::latw);
+					&db::Insert('events','level,time,source,info,class,device',"150,$now,'$d','Latency ${latency}ms exceeds threshold of ${misc::latw}ms','moni','$mon{$d}{dv}'") if($latency > $misc::latw);
 				}else{
 					my $st = ++$mon{$d}{st};
 					my $lo = ++$mon{$d}{lo};
-					&db::Update('monitoring',"status=\"$st\",lost=\"$lo\"","name =\"$d\"");
+					&db::Update('monitoring',"status=$st,lost=$lo","name ='$d'");
 					&misc::Prt("DOWN:");
 					&MarkDep($d,'down',0);							# Mark everytime to avoid errors when moni is restarted
 					if($mon{$d}{st} == $misc::chka){
@@ -165,11 +173,11 @@
 							$downmsg .= ", affects $mon{$d}{dc} more targets!";
 						}
 						&misc::Prt("$downmsg\n");
-						&db::Insert('events','level,time,source,info,class,device',"\"$lvl\",\"$now\",\"$d\",\"$downmsg\",\"moni\",\"$mon{$d}{dv}\"");
-						&db::Insert('incidents','level,name,deps,start,end,user,time,grp,comment,device',"\"$lvl\",\"$d\",\"$mon{$d}{dc}\",\"$now\",\"0\",\"\",\"0\",\"1\",\"\",\"$mon{$d}{dv}\"");
+						&db::Insert('events','level,time,source,info,class,device',"$lvl,$now,'$d','$downmsg','moni','$mon{$d}{dv}'");
+						&db::Insert('incidents','level,name,deps,start,'.db::QuoteIdentifier('end').','.db::QuoteIdentifier('user').',time,grp,comment,device',"$lvl,'$d',$mon{$d}{dc},$now,0,'',0,1,'','$mon{$d}{dv}'");
 						$mq += &mon::AlertQ("- $downmsg!\n","$downmsg ",$mon{$d}{al},$mon{$d}{dv});
 					}elsif( $mon{$d}{st} == 1 or !($mon{$d}{st} % 10) ){			# Notify 1st and every 10th time
-						&db::Insert('events','level,time,source,info,class,device',"\"150\",\"$now\",\"$d\",\"Is unreachable for $mon{$d}{st} time".(($mon{$d}{st} > 1)?"s":"")."\",\"moni\",\"$mon{$d}{dv}\"");
+						&db::Insert('events','level,time,source,info,class,device',"150,$now,'$d','Is unreachable for $mon{$d}{st} time".(($mon{$d}{st} > 1)?"s":"")."','moni','$mon{$d}{dv}'");
 					}
 
 				}
@@ -187,7 +195,7 @@
 		&misc::Prt("Took ${took}s, sleeping ${sl}s\n\n");
 		sleep($sl);
 	}else{
-		&db::Insert('events','level,time,source,info,class',"\"150\",\"$now\",\"NeDi\",\"Monitoring took ${took}s, increase pause!\",\"moni\"");
+		&db::Insert('events','level,time,source,info,class',"150,$now,'NeDi','Monitoring took ${took}s, increase pause!','moni'");
 		&misc::Prt("No time to pause!\n\n");
 	}
 }
--- nedi-std/nedi.pl	2012-04-20 21:11:49.000000000 -0700
+++ nedi-gw/nedi.pl	2012-04-17 12:15:18.000000000 -0700
@@ -87,6 +87,7 @@
 	&misc::RetrVar();
 
 # Functions to be debugged go here
+#	Note that UnStock() REQUIRES an argument.
 #	&db::UnStock();
 	&misc::BuildArp() if(defined $misc::arpwatch);
 
@@ -106,11 +107,18 @@
 		$adminuser = $ARGV[0];
 		$adminpass = $ARGV[1];
 	}else{												# interactive credentials then...
-		print "\nDB, RRDs and configs files will be cleared, bail out if don't want this!\n";
+		my $database = '';
+		if ( defined($misc::dbtype) && $misc::dbtype eq 'postgresql' ) {
+			$database = 'PostgreSQL';
+		}
+		else {
+			$database = 'MySQL';
+		}
+		print "\nDB, RRDs, and config files will be cleared; bail out if don't want this!\n";
 		print "------------------------------------------------------------------------\n";
-		print "MySQL admin user: ";
+		print "$database admin user: ";
 		$adminuser = <STDIN>;
-		print "MySQL admin pass: ";
+		print "$database admin pass: ";
 		$adminpass = <STDIN>;
 		if($misc::dbhost ne 'localhost'){
 			print "NeDi host (where the discovery runs on: ";
@@ -148,7 +156,7 @@
 	elsif($opt{'s'} =~ /ip=/){
 		my $ip = $opt{'s'};
 		$ip =~ s/.*ip=//;
-		&db::ReadNod("nodip = \"".&misc::Ip2Dec(join('.',unpack( 'C4',gethostbyname($ip))))."\"");
+		&db::ReadNod("nodip = '".&misc::Ip2Dec(join('.',unpack( 'C4',gethostbyname($ip))))."'");
 	}
 	my $fp = ($opt{'s'} =~ /O/)?"-O":"";
 	my $fm = ($opt{'s'} =~ /F/)?"-F":"";
@@ -162,7 +170,12 @@
 			my $tcp = my $udp = "";
 			my $os = my $typ = "?";
 			&misc::Prt("SCAN:$main::nod{$mc}{ip} $main::nod{$mc}{na}:");
-			my @res = split(/\n/,`nmap $up $tp $fp $fm $main::nod{$mc}{ip} 2> /dev/null`);
+			my @res = do {
+			    # Without this pragma, Perl complains:
+			    # Name "misc::nmapcmd" used only once: possible typo ...
+			    no warnings 'once';
+			    split(/\n/,`$misc::nmapcmd $up $tp $fp $fm $main::nod{$mc}{ip} 2> /dev/null`);
+			};
 			foreach my $l (@res){
 				if($l =~ /Host seems down/){$alive = 0;}
 				elsif($l =~ /^([0-9]+)\/tcp/){$tcp .= "$1 ";}
@@ -175,14 +188,14 @@
 			if($alive){
 				if($misc::notify =~ /p/ and $main::nod{$mc}{ou}){		# Log port changes if desired and nodes was scanned before
 					if($main::nod{$mc}{tp} ne $tcp){
-						&db::Insert('events','level,time,source,info,class,device',"\"10\",\"$main::now\",\"$main::nod{$mc}{ip}\",\"TCP Port change from '$main::nod{$mc}{tp}' to '$tcp' detected\",\"node\",\"$main::nod{$mc}{dv}\"");
+						&db::Insert('events','level,time,source,info,class,device',"10,$main::now,'$main::nod{$mc}{ip}','TCP Port change from ''$main::nod{$mc}{tp}'' to ''$tcp'' detected','node','$main::nod{$mc}{dv}'");
 					}
 					if($main::nod{$mc}{up} ne $udp){
-						&db::Insert('events','level,time,source,info,class,device',"\"10\",\"$main::now\",\"$main::nod{$mc}{ip}\",\"UDP Port change from '$main::nod{$mc}{up}' to '$udp' detected\",\"node\",\"$main::nod{$mc}{dv}\"");
+						&db::Insert('events','level,time,source,info,class,device',"10,$main::now,'$main::nod{$mc}{ip}','UDP Port change from ''$main::nod{$mc}{up}'' to ''$udp'' detected','node','$main::nod{$mc}{dv}'");
 					}
 				}
 				&misc::Prt("$typ TCP:$tcp UDP:$udp\n");
-				&db::Update('nodes',"tcpports=\"$tcp\",udpports=\"$udp\",nodtype=\"$typ\",nodos=\"$os\",osupdate=\"$now\"","mac = \"$mc\"") if(!$opt{t});
+				&db::Update('nodes',"tcpports='$tcp',udpports='$udp',nodtype='$typ',nodos='$os',osupdate=$now","mac = '$mc'") if(!$opt{t});
 			}else{
 				&misc::Prt("is down\n");
 			}
@@ -198,36 +211,51 @@
 	&misc::ReadOUIs();
 	&db::ReadDev($opt{'A'});
 	&db::ReadAddr();
-	&db::ReadLink('linktype = "STAT"');								# Static links will override DP
-	my $nusr = &db::ReadUser("groups & 8 AND (phone != \"\" OR email != \"\")");			# Read users for Mail alerts
+	&db::ReadLink("linktype = 'STAT'");								# Static links will override DP
+	my $nusr = &db::ReadUser("groups & 8 = 8 AND (phone != '' OR email != '')");			# Read users for Mail alerts
 
-	my $nseed = &misc::InitSeeds();
-	my $nthrd = &db::Select('system','value','name="threads"');
-	my $first = &db::Select('system','value','name="first"');
+	my $nseed   = &misc::InitSeeds();
+	my $nthrd   = &db::Select('system','value',"name='threads'");
+	my $first   = &db::Select('system','value',"name='first'");
+	my $nodlock = &db::Select('system','value',"name='nodlock'");
+	# If these rows are not already present in the database for some reason,
+	# the code below won't operate correctly.  So by adding reasonable default
+	# values here, we make the system self-healing.
+	if (not defined $nthrd) {
+		&db::Insert('system','name,value',"'threads','0'");
+		$nthrd = 0;
+	}
+	if (not defined $first) {
+		&db::Insert('system','name,value',"'first','0'");
+		$first = 0;
+	}
+	if (not defined $nodlock) {
+		&db::Insert('system','name,value',"'nodlock','0'");
+	}
 
 	if ($opt{t}){
 		print "MAIN:Ignoring $nthrd thread".(($nthrd > 1)?"s":"")." for testing\n" if $opt{'v'};
 	}elsif ($nthrd > 0){
-		print "MAIN:$nthrd thread".(($nthrd > 1)?"s":"").", 1st from ".localtime($first) if $opt{'v'};
+		print "MAIN:$nthrd thread".(($nthrd > 1)?"s":"").", 1st ".($first ? ('from '.localtime($first)) : 'ever') if $opt{'v'};
 		if (($now - $first + 60) > $misc::discostep ){						# Check for stale threads (based on OXO's idea)
 			print " is stale, resetting!\n" if $opt{'v'};
-			&db::Update('system',"value=\"$now\"",'name="first"');
-			&db::Update('system','value="1"','name="threads"');				# Make sure we're back to 1!
-			&db::Insert('events','level,time,source,info,class',"\"200\",\"$now\",\"NeDi\",\"$nthrd thread(s), 1st from ".localtime($first)." is older than $misc::discostep seconds!\",\"nedi\"");
+			&db::Update('system',"value='$now'","name='first'");
+			&db::Update('system',"value='1'","name='threads'");				# Make sure we're back to 1!
+			&db::Insert('events','level,time,source,info,class',"200,$now,'NeDi','$nthrd thread(s), 1st ".($first ? ('from '.localtime($first)) : 'ever')." is older than $misc::discostep seconds!','nedi'");
 		}else{
 			print " seems ok adding this one\n" if $opt{'v'};
-			&db::Update('system','value=value+1','name="threads"');				# Register new thread
+			&db::Update('system','value=cast(value as bigint)+1',"name='threads'");		# Register new thread
 		}
 	}else{
 		if ($nthrd < 0){
-			my $err = "$nthrd thread(s) error, 1st from ".localtime($first)." make sure interval is longer than discovery takes!";
-			print "MAIN:$err" if $opt{'v'};
-			&db::Insert('events','level,time,source,info,class',"\"200\",\"$now\",\"NeDi\",\"$err\",\"nedi\"");
+			my $err = "$nthrd thread(s) error, 1st ".($first ? ('from '.localtime($first)) : 'ever')."; make sure interval is longer than discovery takes!";
+			print "MAIN:$err\n" if $opt{'v'};
+			&db::Insert('events','level,time,source,info,class',"200,$now,'NeDi','$err','nedi'");
 		}else{
 			print "MAIN:No threads, set 1st at ".localtime($now)."\n" if $opt{'v'};
 		}
-		&db::Update('system','value="1"','name="threads"');					# Register first thread
-		&db::Update('system',"value=\"$now\"",'name="first"');
+		&db::Update('system',"value='1'","name='threads'");					# Register first thread
+		&db::Update('system',"value='$now'","name='first'");
 	}
 	print "\n";
 	print "DP-"   if($opt{p});
@@ -255,31 +283,31 @@
 			&db::DelDev();
 			unless($opt{'S'} =~ /f/ and $opt{'S'} =~ /r/){
 				&misc::BuildArp() if(defined $misc::arpwatch);
-				while( my $nlock = &db::Select('system','value','name="nodlock"') ){	# Wait until nodes are unlocked by a parallel thread;
+				while( my $nlock = &db::Select('system','value',"name='nodlock'") ){	# Wait until nodes are unlocked by a parallel thread;
 					if( ($now - $nlock + 60) > $misc::discostep ){			# Force unlock, if stale
 # TODO: Use PID instead of date and check if it's still running? (based on Steffen's idea): print "Process ($pid) is ",(kill(SIGCHLD,$pid)!=0)?'running':'not running';
 						&misc::Prt("MAIN:Nodelock at ".localtime($nlock)." is stale!\n");
-						&db::Update('system','value="0"','name="nodlock"');
-						&db::Insert('events','level,time,source,info,class',"\"200\",\"$now\",\"NeDi\",\"Nodelock @".localtime($nlock)." is stale!\",\"nedi\"");
+						&db::Update('system',"value='0'","name='nodlock'");
+						&db::Insert('events','level,time,source,info,class',"200,$now,'NeDi','Nodelock @".localtime($nlock)." is stale!','nedi'");
 					}else{
-						&misc::Prt("MAIN:Nodelock at ".localtime($nlock)." waiting for unlock\n","N");
+						&misc::Prt("MAIN:Nodelock at ".localtime($nlock)." waiting for unlock (sleeping for $misc::pause seconds)\n","N");
 						sleep $misc::pause;
 					}
 				}
-				&db::Update('system',"value=\"$now\"",'name="nodlock"');		# Set node lock in system table...
-				&db::Insert('events','level,time,source,info,class',"\"50\",\"$now\",\"NeDi\",\"MAIN:Nodelock set by PID $$\",\"nedi\"") if $misc::notify =~ /N/; 
+				&db::Update('system',"value='$now'","name='nodlock'");		# Set node lock in system table...
+				&db::Insert('events','level,time,source,info,class',"50,$now,'NeDi','MAIN:Nodelock set by PID $$','nedi'") if $misc::notify =~ /N/; 
 				&misc::Prt("MAIN:Nodes table locked at ".localtime(time)."\n");
 				&db::ReadNod();
 				&misc::BuildNod();
 				my $nret = &misc::RetireNod();
 				&db::WriteNod() if !$opt{'t'};
-				&db::Update('system','value="0"','name="nodlock"');			# ...unlock them again
+				&db::Update('system',"value='0'","name='nodlock'");			# ...unlock them again
 				&misc::Prt("MAIN:Nodes table unlocked at ".localtime(time)."\n") if $misc::notify =~ /d/i;
 
 				&misc::Prt("MAIN:$misc::nip IP and $misc::nnip non-IP nodes processed, $nret retired\n");
 				&misc::Prt("MAIN:$misc::ipchg IP and $misc::ifchg IF changes detected\n") if ($misc::ipchg or $misc::ifchg);
 			}
-			my $nthrd = &db::Select('system','value','name="threads"');
+			my $nthrd = &db::Select('system','value',"name='threads'") || 0;
 			&misc::Prt("MAIN:$nthrd threads running right now\n");
 			&db::TopRRD() if $nthrd == 1 and $opt{'S'} !~ /o/;
 			&mon::AlertFlush("NeDi Discovery Alert",$misc::mq);
@@ -287,7 +315,7 @@
 	}else{
 		print "Nothing discovered, nothing written...\n";
 	}
-	&db::Update('system','value=value-1','name="threads"') if !$opt{t};				# Deregister thread, if not testing
+	&db::Update('system','value=cast(value as bigint)-1',"name='threads'") if !$opt{t};				# Deregister thread, if not testing
 	print "END :Took " . int((time - $now)/60) . " minutes\n\n";
 }
 
@@ -308,7 +336,9 @@
 	print "Discovery Options  --------------------------------------------------------\n";
 	print "-a ip	Add single device or ip range (e.g. 10.10.10)\n";
 	print "-t ip	Test IP only, but don't write anything\n";
-	print "-A cond	Add devices from DB cond=all or e.g.'loc regexp \"here\"'\n";
+	print "-A cond	Add devices from DB cond=all or e.g.,\n";
+	print "		MySQL:       \"location regexp 'here'\"\n";
+	print "		PostgreSQL:  \"location ~ 'here'\"\n";
 	print "-p	Discover LLDP,CDP,FDP or NDP neighbours\n";
 	print "-o	OUI discovery (based on ARP chache entries)\n";
 	print "-r	Route table discovery (on L3 devices)\n";
--- nedi-std/syslog.pl	2012-04-20 21:11:49.000000000 -0700
+++ nedi-gw/syslog.pl	2012-04-11 11:24:30.000000000 -0700
@@ -133,21 +133,21 @@
 		elsif($sev =~ /[012]/)	{$level = 200}
 		else			{$level = 50}
 
-		if($mon{$src}{ed} =~ /^\d+$/ and $mon{$src}{ed} > $level){					# skip if eventdel is number & higher than level
+		if(defined($mon{$src}{ed}) and $mon{$src}{ed} =~ /^\d+$/ and $mon{$src}{ed} > $level){		# skip if eventdel is number & higher than level
 			&misc::Prt("DROP:$src	$mon{$src}{ed}>$level in $raw\n");
-		}elsif($mon{$src}{ed} !~ /^\d+$|^$/ and $info =~ /$mon{$src}{ed}/){				# skip if eventdel matches info
+		}elsif(defined($mon{$src}{ed}) and $mon{$src}{ed} !~ /^\d+$|^$/ and $info =~ /$mon{$src}{ed}/){	# skip if eventdel matches info
 			&misc::Prt("DROP:$src	/$mon{$src}{ed}/ in $raw\n");
 		}else{
 			&misc::Prt("PROC:$src ($_[0])\tL:$level ($pri)\nMESG:$info\n");
-			&db::Insert('events','level,time,source,info,class,device',"\"$level\",\"$now\",\"$src\",\"$info\",\"$mon{$src}{cl}\",\"$mon{$src}{dv}\"");
-			if($mon{$src}{ef} ne "" and $info =~ /$mon{$src}{ef}/){
+			&db::Insert('events','level,time,source,info,class,device',"$level,$now,'$src','$info','$mon{$src}{cl}','$mon{$src}{dv}'");
+			if(defined($mon{$src}{ef}) and $mon{$src}{ef} ne "" and $info =~ /$mon{$src}{ef}/){
 				my $mq = &mon::AlertQ("Event: $info\n","$src: $info",$mon{$src}{al},$mon{$src}{dv});
 				my $af = &mon::AlertFlush("$src syslog alert",$mq);
 			}
 		}
 	}else{
 		&misc::Prt("PROC:$src ($_[0])\tL:$level ($pri)\nMESG:$info\n");
-		&db::Insert('events','level,time,source,info,class',"\"$level\",\"$now\",\"$src\",\"$info\",\"-\"");
+		&db::Insert('events','level,time,source,info,class',"$level,$now,'$src','$info','-'");
 	}
 }
 
--- nedi-std/trap.pl	2012-04-20 21:11:49.000000000 -0700
+++ nedi-gw/trap.pl	2012-04-11 11:27:58.000000000 -0700
@@ -67,9 +67,10 @@
 $info =~ s/[^\w\t\/\Q(){}[]!@#$%^&*-+=',.:<>? \E]//g;
 
 my $level = 10;
+# Notice that this $src overrides the first $src we accepted from <STDIN> above.
 my $src = $ip;
 &db::ReadMon( &misc::Ip2Dec($ip) );
-&db::ReadUser("groups & 8 AND (phone != \"\" OR email != \"\")");
+&db::ReadUser("groups & 8 = 8 AND (phone != '' OR email != '')");
 
 if(exists $srcna{$src}){
 	$src = $srcna{$src};
@@ -98,5 +99,5 @@
 }
 
 unless($mon{$src}{ed} ne "" and $info =~ /$mon{$src}{ed}/){					# insert only if drop doesn't match
-	&db::Insert('events','level,time,source,info,class,device',"\"$level\",\"$now\",\"$src\",\"$info\",\"trap\",\"$src\"");
+	&db::Insert('events','level,time,source,info,class,device',"$level,$now,'$src','$info','trap','$src'");
 }
--- nedi-std/nedi.conf	2012-02-11 04:14:15.000000000 -0800
+++ nedi-gw/nedi.conf	2012-04-23 09:41:43.000000000 -0700
@@ -122,27 +122,43 @@
 # Backend & Libraries
 #============================================================================
 
-# Set backend to MSQ for MySQL (others not implemented yet).
+# Set backend to MSQ for both MySQL and PostgreSQL databases (even though you
+# would think that PSQ should be used for PostgreSQL).  The backend modules for
+# these databases have been combined into one module, with the actual database
+# calls determined by the "dbtype" specified below.  Other backend modules are
+# not implemented yet, but would likely follow the same structure if they are.
 backend		MSQ
 ;backend	PSQ
 ;backend	ORC
 
-# DB params
+# DB params.  dbtype can be either "mysql" or "postgresql".
+dbtype		mysql
 dbname		nedi
 dbuser		nedi
 dbpass		dbpa55
 dbhost		localhost
 
+# Where to find the standard database programs.
+# Only the paths for the program matching your dbtype will matter.
+# Absolute pathnames are in order here.
+mysql_path	/usr/bin/mysql
+mysqldump_path	/usr/bin/mysqldump
+psql_path	/usr/bin/psql
+pg_dump_path	/usr/bin/pg_dump
+
 # CLI library to use
 clilib		IoPty
 
 # Points to executable (leave empty to disable graphs)
 rrdcmd		rrdtool
 
+# Points to executable
+nmapcmd		/usr/bin/nmap
+
 # Location of NeDi
 nedipath	/var/nedi
 
-# Prefix to call Cacti CLI tools for adding graphs in Topology-Graph
+# Prefix to call Cacti CLI tools for adding graphs in Devices-Graph
 ;cacticli	/usr/bin/php /usr/share/cacti/site/cli
 
 # Cacti integration. Uncomment, if you want Devices-Status to link to Cacti.
@@ -178,8 +194,8 @@
 # w	average PoE
 notify		aBdefLmnopstuw
 
-# Time in secondes between monitoring polls. Note its sequencial for now, due to new design.
-# Should be threaded soon, but for now use a bigger pause...
+# Time in secondes between monitoring polls.  Note that it is sequential for now,
+# due to new design.  Should be threaded soon, but for now use a bigger pause ...
 pause		300
 
 # Thresholds for monitored values:
@@ -318,7 +334,7 @@
 module	Other		Info			php	oth
 #module	Other		Nagios			cinf	oth
 
-# Authentication for GUI users can be set to MySQL or by PAM
+# Authentication for GUI users can be set to the local nedi database ("local") or by PAM.
 # local, none, pam, radius, ldap
 # Append -pass to use GUI user for device access (e.g. in Devices-Write)
 guiauth		local
