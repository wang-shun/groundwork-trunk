# cacti_feeder.conf - the master feeder configuration file
#
# Copyright 2014,2015 GroundWork Open Source, Inc. ("GroundWork")
# All rights reserved.  This program is free software; you can
# redistribute it and/or modify it under the terms of the GNU
# General Public License version 2 as published by the Free
# Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# The values specified here are used to control the behavior of the Cacti Feeder.
#
# Disable or enable the feeder completely. 
# When disabled, no processing of any endpoints will be done.
feeder_enabled = no

# How often (seconds) to check to see if cacti system indicated that its ready for the feeder to run
system_indicator_check_frequency = 30

# The cacti system readiness indicator file - presence of this file will indicate to the feeder to go ahead process/sync endpoints
system_indicator_file = /usr/local/groundwork/foundation/feeder/run_cacti_feeder

# Which servers, aka endpoints, this feeder is going to feed.
# Endpoints will be processed in the order the are specified here.
# At least one needs to be defined. More than one can be defined by repeating the endpoint directive.
# The format is : 
#   endpoint = <simple endpoint name>:<path to it's configuration file>
# The <simple endpoint name> is not a hostname but just an identifier referenced in logging by the feeder. 
# The endpoint hostname itself is defined in the associated configuration file.
# For clarity, it's recommended to have this name be the hostname of the endpoint.
# The <path to it's configuration file> needs to be a fully qualified filename.
endpoint = localhost:/usr/local/groundwork/config/cacti_feeder_localhost.conf
#endpoint = standby1:/usr/local/groundwork/config/cacti_feeder_standby1.conf
#endpoint = standby2:/usr/local/groundwork/config/cacti_feeder_standby2.conf

# Retry cache size warning and critical thresholds. These are in Mb and determine the status of cache_size services.
# Any number of endpoints can have their retry cache limits defined using this block. They are also optional.
# If warning or critical thresholds are exceeded, the cache_errors service will convey this information.
# A critical threshold is also used to determine whether to truncate a cache file.
<retry_cache_limits>

    <localhost>
        warning = 50
        critical = 75
    </localhost>

</cache_limits>

# In the event of failing to create a new Feeder object for the endpoint, wait this many seconds, and retry this many times
endpoint_max_retries = 3
endpoint_retry_wait  = 5

# Directory in which endpoint retry caches are stored
retry_cache_directory = /usr/local/groundwork/foundation/feeder/retry_caches

# Cacti database options ...
cactidbtype = postgresql 
cactidbhost = localhost
cactidbport = 5432
cactidbname = cacti
cactidbuser = cactiuser
cactidbpass = cactiuser

# To use the feeder against a standalone mysql based Cacti installation ...
# (ensure grant privs on to cacti user at this host on the Cacti side)
# cactidbtype = mysql
# cactidbhost = cactisystemhostname
# cactidbport = 3306
# cactidbname = cacti
# cactidbuser = cactiuser
# cactidbpass = cactiuser

# Cacti threshold qualification options ...
# Whether to qualify threshold alerts by checking the threshold fail count against the threshold fail trigger.
check_thold_fail_count = yes
# Whether to qualify baseline alerts by checking the baseline fail count against the baseline fail trigger.
check_bl_fail_count = yes

# ----------------------------------------------------------------
# Logger settings
# ----------------------------------------------------------------

# Where the log file is to be written.
logfile = /usr/local/groundwork/foundation/container/logs/cacti_feeder.log

# There are six predefined log levels within the Log4perl package:  FATAL,  
# ERROR, WARN, INFO, DEBUG, and TRACE (in descending priority).  We define
# two custom levels at the application level to form the full useful set:
# FATAL, ERROR, WARN, NOTICE, STATS, INFO, DEBUG, and TRACE.  To see an
# individual message appear, your configured logging level here has to at
# least match the priority of that logging message in the code.
GW_RAPID_log_level = "ERROR"

# The application-level logging level is set separately from the logging 
# level used by the GW::RAPID package, to avoid drowning in low-level
# detail from the GW::RAPID module. 
feeder_log_level = "INFO"

# Application-level logging configuration, for that portion of the logging
# which is currently handled by the Log4perl package.
log4perl_config = <<EOF

# Use this to send everything from FATAL through ${GW_RAPID_log_level}
# (for messages from the GW::RAPID package) or ${feeder_log_level}
# (for messages from the application level) to the logfile.
log4perl.category.GW.RAPID.module = ${GW_RAPID_log_level}, cacti_feeder_logfile
log4perl.category.cacti_feeder    = ${feeder_log_level}, cacti_feeder_logfile

# Add the Screen appender if you want to see output to stdout ...
#log4perl.category.cacti_feeder = ${feeder_log_level}, cacti_feeder_logfile, Screen

log4perl.appender.cacti_feeder_logfile          = Log::Log4perl::Appender::File
log4perl.appender.cacti_feeder_logfile.filename = ${logfile}
log4perl.appender.cacti_feeder_logfile.utf8     = 0
log4perl.appender.cacti_feeder_logfile.layout   = Log::Log4perl::Layout::PatternLayout
log4perl.appender.cacti_feeder_logfile.layout.ConversionPattern = [%d{EEE MMM dd HH:mm:ss yyyy}] %C: %m%n
log4perl.appender.Screen            =  Log::Log4perl::Appender::Screen
log4perl.appender.Screen.stderr     =  0
log4perl.appender.Screen.layout     =  Log::Log4perl::Layout::SimpleLayout

EOF

# End of configuration
