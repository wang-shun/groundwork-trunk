# Copyright 2016 GroundWork Open Source, Inc. ("GroundWork")
# All rights reserved.  This program is free software; you can
# redistribute it and/or modify it under the terms of the GNU
# General Public License version 2 as published by the Free
# Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# The values specified here are used to control the behavior of the Cacti Feeder
# for this localhost endpoint.

# Disable or enable the feeder for the localhost endpoint.
# The feeder will only process cacti hosts and thresholds when this option is set to yes.
enable_processing = yes

# Foundation feeder application type. Leave this set to CACTI.
app_type = CACTI

# Log how long each cycle is taking  
cycle_timings = yes

# Cacti feeder health and metrics virtual hosts GroundWork hostgroup.
health_hostgroup = cacti_feeder

# REST end point host and credentials are in ws_client_config_file
ws_client_config_file = "/usr/local/groundwork/config/ws_client.properties"
api_timeout = 30

# Forcing a CRL check means the Perl GW::RAPID package will insist on having a
# Certificate Revocation List file available if the server is configured to use SSL
# (as specified in the foundation_rest_url setting of the file listed above as the
# ws_client_config_file option value).  This should be enabled for a properly secure
# SSL setup; you will then need to provide a valid CRL file, even if it doesn't
# list any revoked certificates, in the /usr/local/groundwork/common/openssl/certs/
# directory.  Disabling this is a less-secure setup, as then the HTTPS connection
# does not protect against a man-in-the-middle attack.  If the server does not use
# SSL, this option has no effect.
# [yes/no]
force_crl_check = no

# Bundling options that determine how many to bundle up in one REST API call for CRUD ops
host_bundle_size          = 30
hostgroup_bundle_size     = 30
service_bundle_size       = 50
events_bundle_size        = 50
notifications_bundle_size = 30

# Update frequency options
# Switch this to yes to send all updates on every cycle. 
# Setting to yes turns off full_update_frequency functionality ie always sends all updates on every cycle
# Setting to no turns on full_update_frequency functionality ie only sends all updates on every full_update_frequency'th cycle
always_send_full_updates = yes
# Period on which to post all cacti host and service states, regardless of whether 
# or not they changed eg setting this to 3 means on every 3rd cycle, post everything,
# and on cycles in between, just post hosts and/or services with state changes.
# All updates are sent out on the very first cycle each time the feeder is (re)started.
# This option is overridden by always_send_full_updates = yes
full_update_frequency = 3

# Notification and event options
# Enable/disable notifications for cacti host and service state changes.
post_notifications = yes
# Enable/disable creation of events in Foundation for cacti host and service state changes.
# Generally leave this to yes unless instructed otherwise by GroundWork.
post_events = yes

# Hostgroup related options
# What subset of hosts to check Cacti thresholds for.  
# Typically, this hash would have one hostgroup in it, eg a child server, or have none.
# Another way of saying this is : Only process cacti thresholds which are for hosts that are already in these Foundation hostgroups.
# Note : this acts like an early filter - any hosts that were created by this feeder that are not in these hostgroups will be deleted.
<constrain_to_hostgroups> 
   #childgroup
   #Cacti Hostgroup 1
   #Cacti Hostgroup 2
</constrain_to_hostgroups> 

# What hostgroup(s) to add hosts to by default 
<default_hostgroups>
    cactigroup
    #cactigroup2
    # cactigroup 3
</default_hostgroups>

# Service state options
# Note : This feature is not included in this release.
# Only *add* services (ie cacti interface services) if they are in a state listed.
# Valid states are : any, ok, unscheduled critical
# Make note of the cacti->GW translation table here
# These are GW states only, not cacti. maybe a future rev.
# This filtering only applies to things being created for the first time in Foundation.
# Note that this does not affect services that already exist - state changes for those 
# are processed normally.
#process_service_states = "unscheduled critical"
# leave this empty for no constraints
# currently only supported values are OK and UNSCHEDULED CRITICAL
# but this is designed for expansion later on eg with WARNING or other GW states
#<constrain_to_service_states>
   #UNSCHEDULED CRITICAL
   #OK
#</constrain_to_service_states>

# Feeder Unique Identifier options
# Globally unique identifier for this feeder instance.
# This is used for setting the value of AgentId which is field that is attached to host, hostgroup and service objects
# in Foundation that are/were created by this feeder.  
# When the feeder runs, if the value of guid is set to 'undefined', then the feeder will 
# write a new value in this config file for this option.
# Generally don't touch this unless otherwise instructed by GroundWork.
guid = undefined

# Auditing options
# The feeder can produce an audit trail of the following things :
#    - creation of new hosts, new hostgroups, new services
#    - deletion of hosts, hostgroups, services
# On each feeder cycle, if any of the above  things happens, Foundation audit events will be created. 
# There is an overhead in performance for auditing. 
auditing = yes

# Testing options
# For testing purposes, emulate cacti host and interface states and removal etc.
# To disable testing, set this value to a non existent file, or an empty file, or blank.
cacti_system_test_tweaks_file = 

# Set this to true if the feeder should send in host status updates, false if not.
# Note that the feeder will always create a host with a status from the feeder regardless of this setting.
update_hosts_statuses = no

# The maximum age in seconds of entries in the retry cache. Entries with timestamps older than this 
# maximum age will be discarded during the retry cache import stage (1 day =  86400 seconds).
retry_cache_max_age = 172800

# Send feeder metrics data to performance graphs for feeder metrics.
send_feeder_perf_data = yes

# Feeder.pm module error emulation (fmee) is used for QA and testing purposes.
# Adding a Feeder.pm sub name into this block will cause that sub to return 0.
# 'timestamp' can also be used to emulate a failure at a specific retry cache entry.
#<fmee>
    #timestamp = some epoch time that matches a retry cache entry timestamp
    #feeder_upsert_hosts
    #feeder_upsert_hostgroups
    #feeder_upsert_services
    #feeder_delete_hosts
    #feeder_delete_services
    #check_foundation_objects_existence
    #flush_audit
    #initialize_health_objects
    #license_installed
    #check_license
#</fmee>

# End of configuration
