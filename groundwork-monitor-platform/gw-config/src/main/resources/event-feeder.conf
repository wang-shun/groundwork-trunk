# event-feeder.conf

# Copyright (c) 2014-2017 GroundWork Open Source, Inc. (GroundWork).
# All rights reserved.  Use is subject to GroundWork commercial license terms.

# The values specified here are used to control the behavior of the
# nagios2collage_eventlog.pl script.

# ----------------------------------------------------------------
# General config options.
# ----------------------------------------------------------------

# Possible debug_level values:
# 0 = minimal data printed
# 1 = print just error info and summary statistical data
# 2 = print basic debug info
# 3 = print debug info, including output data
# 4 = print detailed debug info, including input lines
debug_level = 1

# The absolute pathname to the Nagios event log file.
eventfile = "/usr/local/groundwork/nagios/var/nagios.log"

# The absolute pathname to a seek file which the nagios2collage_eventlog.pl
# process uses to keep track of its place within the Nagios event log file.
seekfile = "/usr/local/groundwork/nagios/var/nagios_seek.tmp"

# The absolute pathname to where the nagios2collage_eventlog.pl writes
# its own loggging data.
logfile = "/usr/local/groundwork/foundation/container/logs/nagios2collage_eventlog.log"

# Rough measure of max time to hoard incoming messages before passing them on.
sync_timeout_seconds = 5

# Wait time in seconds between checks of the Nagios nagios.log file.
cycle_sleep_time = 5

# Seconds to sleep before restarting after failure, to prevent tight looping.
failure_sleep_time = 10

# The name of the server which is running this daemon.  For a parent server,
# this is typically just set to "localhost".
thisnagios = "localhost"

# Whether to use the REST API instead of the ${remote_port} socket API
# to send event data to Foundation.
# [true/false]
use_rest_api = true

# ----------------------------------------------------------------
# Options for controlling special-case treatment of events for
# certain services.
# ----------------------------------------------------------------

# The settings here are designed to modify certain aspects of the events sent
# to Foundation.  By default, all events processed by this feeder are sent to
# Foundation using an application type of NAGIOS and a consolidation criteria
# of NAGIOSEVENT.  Those settings make sense because the event feeder is most
# commonly processing events for services that originate in Nagios itself.
# But there may be exceptional situations in which an override is desired.
# Consult with GroundWork Support if that is the case.  This section of the
# configuration allows such exceptions to be locally configured at your site.
#
# Note that this capability currently only works if use_rest_api (above) is
# set to a true value.
#
# In each of the following stanzas, you can specify a Perl-compatible regular
# expression in the <service> element to match the particular service(s) whose
# event attributes you wish to alter from the defaults.  The expression you
# specify will be automatically anchored at both ends (^ and $) when it is
# evaluated.  So you must not specify those pattern elements, but you must
# ensure that your expression otherwise characterizes the full service name(s)
# you wish to match for that particular attribute mapping.  You may enclose your
# pattern in "double-quotes" if that makes it easier to delineate here; those
# enclosing quotes will not become part of the pattern itself.
#
# Be careful and precise in how you define your service-name patterns.  If a
# service name matches more than one stanza, an arbitrary choice will be made,
# and the other matches will be ignored for that service.  So, don't do that.
#
# Specifying a consolidation criteria here only makes sense if both the event
# feeder and the status feeder actually send all of the individual fields needed
# for that criteria.  (The status feeder is involved because it manufactures
# a few events to compensate for situations in which Nagios does not create
# events for certain state transitions.)  In some cases, such data might not be
# available to the event feeder or status feeder.  So, some checking of the code
# against the definition of the consolidation criteria in the database may be
# needed to validate that your choice will actually work.
#
# We show some examples here just to give you the general idea; these may or may
# not be useful mappings.  A <service> stanza can be fully commented out by just
# commenting out all of its interior options.

<attribute_mappings>

    <service "syslog_.*">
        # application_type       = "SYSLOG"
        # consolidation_criteria = "SYSLOG"
    </service>

    <service gdma_21_wmi_cpu>
        # application_type       = "GDMA"
        # consolidation_criteria = "NAGIOSEVENT"
    </service>

    <service nedi_switch>
        # application_type       = "NEDI"
        # consolidation_criteria = "NEDIEVENT"
    </service>

</attribute_mappings>

# Control which types of Nagios events get forwarded to Foundation and thus
# to the Event Console.  These are specialized settings which should almost
# always be set to true.
# [true/false]
send_host_notification_events    = true
send_service_notification_events = true

# ----------------------------------------------------------------
# Options for sending event data to Foundation via the
# Foundation REST API.
# ----------------------------------------------------------------

# The application name by which the nagios2collage_eventlog.pl process
# will be known to the Foundation REST API.
rest_api_requestor = "Nagios event feeder"

# Where to find credentials for accessing the Foundation REST API.
ws_client_config_file = "/usr/local/groundwork/config/ws_client.properties"

# This is NOT the minimum size ...
rest_event_bundle_size = 25
# but this is the maximum size.
max_rest_event_bundle_size = 50

# Bundling REST messages sent to Foundation might reduce downstream race
# conditions in the current version of Foundation.  If that is so, we would
# be willing to wait a small period of time for additional messages to come
# in, before sending on any received messages.  Thus we might possibly want
# to retain some messages across (relatively short) feeder cycles, and thus
# we need to flush any such retained messages whenever we handle a shutdown
# request.
#
# Must all queued results be sent in the same cycle, or can some be held
# over from one processing cycle to the next?  We now set this to true,
# because our ${rest_event_bundle_size} setting is fairly large and we
# don't want to be holding on to messages for any significant length of
# time waiting for a bundle to fill up.
# [true/false]
flush_rest_bundle_each_cycle = true

# There are six predefined log levels within the Log4perl package:  FATAL,
# ERROR, WARN, INFO, DEBUG, and TRACE (in descending priority).  We define
# two custom levels at the application level to form the full useful set:
# FATAL, ERROR, WARN, NOTICE, STATS, INFO, DEBUG, and TRACE.  To see an
# individual message appear, your configured logging level here has to at
# least match the priority of that logging message in the code.
GW_RAPID_log_level = "WARN"

# Application-level logging configuration, for that portion of the logging
# which is currently handled by the Log4perl package.
#
# As recommended in the Log4perl documentation, we DO NOT try to mirror Perl
# package names here as logging category names.  A more sensible classification
# of categories provides more intelligent control across applications.
log4perl_config = <<EOF

# Use this to send everything from FATAL through ${GW_RAPID_log_level} to the logfile.
log4perl.category.Nagios.Event.Feeder.GW.RAPID = ${GW_RAPID_log_level}, Logfile

# Send all Log4perl lines to the same log file as the rest of this application.
log4perl.appender.Logfile          = Log::Log4perl::Appender::File
log4perl.appender.Logfile.filename = ${logfile}
log4perl.appender.Logfile.utf8     = 0
log4perl.appender.Logfile.layout   = Log::Log4perl::Layout::PatternLayout
log4perl.appender.Logfile.layout.ConversionPattern = [%d{EEE MMM dd HH:mm:ss yyyy}] %m%n

EOF

# ----------------------------------------------------------------
# Options for sending event data to Foundation via the
# legacy XML socket API.
# ----------------------------------------------------------------

# The following setting applies to logging of data sent to the legacy Foundation
# XML socket API.
#
# Set to false to log Foundation messages as ISO-8859-1, to true to log as UTF-8.
log_as_utf8 = false

# Where to access the legacy Foundation XML socket API.
remote_host = ${thisnagios}
remote_port = 4913

# The max_xml_bundle_size has complex downstream effects.  Before changing
# this value, please consult with GroundWork Support or GroundWork
# Professional Services.
#
# This is NOT the minimum size ...
xml_bundle_size = 25
# but this is the maximum size.
max_xml_bundle_size = 50

# This is the actual SO_SNDBUF value, as set by setsockopt().  This is
# therefore the actual size of the data buffer available for writing,
# irrespective of additional kernel bookkeeping overhead.  This will
# have no effect without the companion as-yet-undocumented patch to
# IO::Socket::INET.  Set this to 0 to use the system default socket send
# buffer size.  (Note that the value specified here is likely to be limited
# to something like 131071 by the sysctl net.core.wmem_max parameter.)
send_buffer_size = 262144

# This timeout is here only for use in emergencies, when Foundation has
# completely frozen up and is no longer reading (will never read) a socket
# we have open.  We don't want to set this value so low that it will
# interfere with normal communication, even given the fact that Foundation
# may wait a rather long time between sips from this straw as it processes
# a large bundle of messages that we sent it, or is otherwise busy and just
# cannot get back around to reading the socket in a reasonably short time.
# [seconds; to address GWMON-7407; set to 0 to disable]
socket_send_timeout = 60

# Bundling XML messages sent to Foundation helps reduce downstream race
# conditions in the current version of Foundation.  Hence we are willing to
# wait a small period of time for additional messages to come in, before
# sending on any received messages.  Thus we might possibly want to retain
# some messages across (relatively short) feeder cycles, and thus we
# need to flush any such retained messages whenever we handle a shutdown
# request.
#
# Must all queued results be sent in the same cycle, or can some be held
# over from one processing cycle to the next?  We now set this to true,
# because our ${xml_bundle_size} setting is fairly large and we don't want to
# be holding on to messages for any significant length of time waiting for
# a bundle to fill up.
# [true/false]
flush_xml_bundle_each_cycle = true

