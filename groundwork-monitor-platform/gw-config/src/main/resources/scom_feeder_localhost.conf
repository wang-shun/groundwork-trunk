# scom_feeder_localhost.conf - the localhost endpoint configuration file
#
# Copyright 2014-15 GroundWork Open Source, Inc. ("GroundWork")
# All rights reserved.  This program is free software; you can
# redistribute it and/or modify it under the terms of the GNU
# General Public License version 2 as published by the Free
# Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# The values specified here are used to control the behavior of the 
# SCOM Feeder for this localhost endpoint.

# Disable or enable the feeder for the endpoint.
enable_processing = yes

# Log how long each cycle is taking  
cycle_timings = yes

# Feeder health and metrics virtual hosts GroundWork hostgroup.
health_hostgroup = scom_feeder


# REST end point host and credentials are in ws_client_config_file
ws_client_config_file = "/usr/local/groundwork/config/ws_client.properties"
api_timeout = 30
RAPID_debug = no

# Forcing a CRL check means the Perl GW::RAPID package will insist on having a
# Certificate Revocation List file available if the server is configured to use SSL
# (as specified in the foundation_rest_url setting of the file listed above as the
# ws_client_config_file option value).  This should be enabled for a properly secure
# SSL setup; you will then need to provide a valid CRL file, even if it doesn't
# list any revoked certificates, in the /usr/local/groundwork/common/openssl/certs/
# directory.  Disabling this is a less-secure setup, as then the HTTPS connection
# does not protect against a man-in-the-middle attack.  If the server does not use
# SSL, this option has no effect.
# [yes/no]
force_crl_check = no

# Bundling options that determine how many to bundle up in one REST API call for CRUD ops
host_bundle_size          = 30
hostgroup_bundle_size     = 30
service_bundle_size       = 50
events_bundle_size        = 50
notifications_bundle_size = 30

# Update frequency options - currently disabled in this feeder
# Switch this to yes to send all updates on every cycle. 
# Setting to yes turns off full_update_frequency functionality ie always sends all updates on every cycle
# Setting to no turns on full_update_frequency functionality ie only sends all updates on every full_update_frequency'th cycle
# always_send_full_updates = yes
# Period on which to post all host and service states, regardless of whether 
# or not they changed eg setting this to 3 means on every 3rd cycle, post everything,
# and on cycles in between, just post hosts and/or services with state changes.
# All updates are sent out on the very first cycle each time the feeder is (re)started.
# This option is overridden by always_send_full_updates = yes
# full_update_frequency = 3

# Notification and event options
# Enable/disable notifications for host and service state changes.
post_notifications = yes
# Enable/disable creation of events in Foundation for host and service state changes.
# Generally leave this to yes unless instructed otherwise by GroundWork.
post_events = yes

# Hostgroup related options
# Only process events which are for hosts that are already in these Foundation hostgroups.
<constrain_to_hostgroups> 
   # Hostgroup1
   # Hostgroup2
</constrain_to_hostgroups> 

# Feeder Unique Identifier options
# Globally unique identifier for this feeder instance.
# This is used for setting the value of AgentId which is field that is attached to host, hostgroup and service objects
# in Foundation that are/were created by this feeder.  
# When the feeder runs, if the value of guid is set to 'undefined', then the feeder will 
# write a new value in this config file for this option.
# Generally don't touch this unless otherwise instructed by GroundWork.
guid = undefined

# Auditing options
# The feeder can produce an audit trail of the following things :
#    - creation of new hosts, new hostgroups, new services
#    - deletion of hosts, hostgroups, services
# On each feeder cycle, if any of the above  things happens, Foundation audit events will be created. 
# There is an overhead in performance for auditing. 
auditing = yes

# Process resolved/closed SCOM events
process_resolved_events = yes

# Process SCOM objects in maintainence mode
process_in_maintenance = yes

# Set this to true if the feeder should send in host status updates, false if not.
# Note that the feeder will always create a host with a status from the feeder regardless of this setting.
update_hosts_statuses = no

# The maximum age in seconds of entries in the retry cache. Entries with timestamps older than this 
# maximum age will be discarded during the retry cache import stage (1 day =  86400 seconds).
retry_cache_max_age = 172800

# Hostgroup derivation options.
# You can use certain SCOM event xml fields as macros for building hostgroup names:
#   Macro                 Field from the SCOM event xml
#   {category}            Category
#   {computerdomain}      ComputerDomain
#   {managementgroupname} ManagementGroupName
#   {managementserver}    ManagementServer
#   Example : SCOM_Feeder_{managementgroupname}_{category}

# If a SCOM event host name matches a regex, put the host in the associated hostgroup.
# This block can be left empty.
<hostname_hostgroup_mappings>
    # host name regex => hostgroup assignment(s)
    # Example 1 - if the hostname has BOS1 in it, then put it in hostgroup SCOM_Feeder:Boston:{category} : BOS1 = SCOM_Feeder:UCB:{category}
    # Example 2 : Microsoft = MS_hg_by_name_{category}_{computerdomain}_{managementgroupname}_{managementserver}
</hostname_hostgroup_mappings>

# If a SCOM event has a service that matches a regex, put the host in the associated hostgroup.
# The service is the GroundWork service name that is derived from various SCOM event fields.
# This block can be left empty.
<servicename_hostgroup_mappings>
    # service name regex => hostgroup assignment(s)
    # Example 1 : SQL.*200(7|8) = serv_hg1
    # Example 2 : Veeam = SCOM_Feeder_Veeam_group
    # Example 3 : Microsoft = MS_hg_by_service_{category}
</servicename_hostgroup_mappings>

# Default hostgroups to use if any of the above regex's don't resolve.
# This block requires at least one entry.
<default_hostgroups>
    SCOM_Feeder:{category}
</default_hostgroups>

# Processing of SCOM events can be limited to just a subset based on host name rules. 
# For example, to limit processing to events with hosts beginning with 'pnc' or 'oracle', 
# you might include ^pnc and ^oracle as two rules here.
<hostname_constraint_filters>
    #^pnc
    #^oracle
</hostname_constraint_filters>

# Processing of SCOM events can be limited to just a subset based on service name rules also. 
# For example, to limit processing to events for IIS services and Microsoft Operating System, 
# you might include Microsoft.Windows.OperatingSystem  and Microsoft.Windows.InternetInformationServices 
# as two rules here.
<servicename_constraint_filters>
    #Microsoft.Windows.OperatingSystem
    #Microsoft.Windows.InternetInformationServices
</servicename_constraint_filters>

# Hostname-based exclusion filters.
# Regular expressions in this block are used against event hostnames. If there is a match, the event will be excluded from processing.
# This block can be left empty.
<hostname_exclusion_filters>
    # Example 1 - if the hostname contains 'BOS1', then don't process this event : BOS1
</hostname_exclusion_filters>

# Servicename-based exclusion event processing based on servicename regex
# Regular expressions in this block are used against event services. If there is a match, the event will be excluded from processing.
# This block can be left empty.
<servicename_exclusion_filters>
    # Example 1 - if the service contains the string 'Veeam.Virt.Extensions', then don't process the event : Veeam.Virt.Extensions
    # Example 2 : Veeam.Virt.Extensions.VMware.(VMHOST|VMGUEST)
    # Example 3 : Microsoft.SQLServer.DBEngine
</servicename_exclusion_filters>

# What defines a host being down, in terms of raw event xml fields and their values.
# This is experimental since haven't seen enough events to be 100% that this works.
# As of scom_feeder.pl version 2.0.6:
# SCOM works by generating an event for a problem, but then updates it's resolution state for when it is ok again. 
# So in this case, if the host down criteria was met, but the resolution state = 255, then that indicates that the 
# issue was cleared ie the host is up again.
<host_down_criteria>
    
    # Criteria blocks are processed in alphabetical order. 
    # First one to be satisfied is used and host is assumed to be DOWN.
    # If none are satisfied, then host assumed to be UP.
    # Within a criteria block, all of the raw event field regexes need to match in order for the host to be regarded as DOWN.
    # Refer to an event xml file to see other fields.

    <criteria1>
        # Which fields to use as qualifying criteria. Any number of fields can be defined.
        # <raw event field>  = <regex>
        Category =  ^StateCollection$                                # If the Category is StateCollection
        Name     =  ^Failed to Connect to Computer$                  # And the Name is 'Failed to Connect to Computer'
        _hostname_field = Description                                # Then use the Description field ...
        _hostname_location = ^The computer (.*) was not accessible.$ # ... to extract hostname like this ie its the bit in (.*)
    </criteria1>

    <criteria2>
        Category =  ^Custom$                            # If the Category is 'Custom'
        Name     =  ^No ping reply$                     # And the Name is 'No ping reply'
        _hostname_field = MonitoringObjectDisplayName   # Then use the MonitoringObjectDisplayName field ...
        _hostname_location = ^(.*)$                     # ... to extract the hostname 
    </criteria2>

    <criteria3>
        Category =  ^StateCollection$                   # If the Category is 'StateCollection'
        Name     =  ^Health Service Heartbeat Failure$  # And the Name is 'Health Service Heartbeat Failure'
        _hostname_field = MonitoringObjectDisplayName   # Then use the MonitoringObjectDisplayName field ...
        _hostname_location = ^(.*)$                     # ... to extract the hostname 
    </criteria3>

</host_down_criteria>

# Custom hostname mapping control.
# Sometimes events have hostname information in fields other than where the default feeder logic expects.
# This section allows you to define where to extract hostname data for various event structures.
# This is experimental since haven't seen enough events to be 100% that this works.
<custom_hostname_mapping_rules>
    
    # Mapping blocks are processed in alphabetical order.
    # First one to be satisfied is used.
    # All of the raw event field regexes need to match in order for the hostname to get remapped via the _hostname_ options 

    <remap1>
        # <raw event field>  = <regex>
        Category             = ^StateCollection$                             # If category is 'StateCollection'
        MonitoringObjectPath = ^Microsoft.SystemCenter.AgentWatchersGroup$   # And if MonitoringObjectPath = this regex
        _hostname_field      = MonitoringObjectDisplayName                   # Then the hostname can be found in MonitoringObjectDisplayName ...
        _hostname_location   = ^(.*)$                                        # ... using this extraction regex
    </remap1>
    
</custom_hostname_mapping_rules>


# Foundation feeder application type. Leave this set to SCOM.
app_type = SCOM

# Send feeder metrics data to performance graphs. This is experimental.
send_feeder_perf_data = no
 
# End of configuration
