# status-feeder.properties
#
# Copyright 2011-2018 GroundWork Open Source, Inc. ("GroundWork").
# All rights reserved.  This program is free software; you can
# redistribute it and/or modify it under the terms of the GNU
# General Public License version 2 as published by the Free
# Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

######################################################################
## GroundWork Status Feeder Configuration Properties
######################################################################

# The values specified here are used to control the behavior of the
# nagios2collage_socket.pl script.

# Possible debug_level values:
# 0 = no info of any kind printed, except for startup/shutdown
#     messages and major errors
# 1 = print just error info and summary statistical data
# 2 = also print basic debug info
# 3 = also print XML messages
# 4 = also print detailed debug info
# 5 = also print ridiculously detailed debug info
debug_level = 1

# Where the log file is to be written.
logfile = /usr/local/groundwork/foundation/container/logs/nagios2collage_socket.log

# An identifier for the particular instance of Nagios we are tracking.
# This should be set to the output of `hostname -s`, though in a pinch,
# localhost will do.
thisnagios = localhost

# Major version number of the Nagios release being used.
# Currently, should be 3.
nagios_version = 3

# Absolute pathname of the Nagios status file.
statusfile = /usr/local/groundwork/nagios/var/status.log

# Wait time in seconds between checks of the Nagios status.log file.
cycle_sleep_time = 15

# Time between full updates to the local Foundation, in seconds.  This
# is the longest you want to wait for updates to the LastCheckTime in
# Foundation.  Set this to a longer time on busy systems.  In previous
# releases, we suggested a 90 second minimum, 300 second maximum.  The
# longer the time, the larger the bundles of updates.  Setting this too
# long could result in a "bumpy" performance curve, as the system processes
# large bundles.  Old advice:  If you set this near the maximum, you might
# also want to also increase the max_xml_bundle_size below.
#
# Starting with the GroundWork 7.0.2 release, it makes sense to set this
# to 0, in order that all timing-related changes get flushed downstream
# immediately during the cycle when they are first sensed.  This helps
# smooth out the load on the receiving side.
local_full_update_time = 0

# Whether to skip the usual initialization of the status feeder upon
# startup, that it accomplishes by reading data from Foundation.  If this
# option is enabled, the feeder will instead skip the first cycle except
# for reading Nagios data.  It will use that data to form its data cache,
# and start processing instead on the following cycle.  This feature is
# still experimental, and thus it is disabled by default.
# [true/false]
skip_initialization = false

# Normal time between checks to ensure that Foundation is still in sync
# with Nagios, in seconds.  With our synchronization protocol in play, the
# system should never really get out of sync in a way that this checking
# would be needed to catch, but it provides a backup mechanism to recognize
# when the unexpected happens and automatically restart to recover.  This
# checking imposes a modest amount of extra database and analysis load that
# scales with the size of your monitoring setup, so you might not want to
# run it on every cycle.  But you do want to run it often enough to catch
# trouble relatively soon if it arises, so the status feeder can recognize
# it, restart, and either self-heal or generate events to warn of the
# problem.  Once a sync check fails in some cycle, it will continue to run
# on every cycle until it succeeds, regardless of the setting here.  Set
# this to 0 if you want to completely disable this checking; you might do
# do that if you are very confident that the system won't ever encounter
# any synchronization problems that won't be fixed by other means.  Set
# this to 1 if you want to be paranoid and always check on every cycle.
# Set this to perhaps 900 if you want to check every now and then.
#
# IMPORTANT:  If you ever enable this capability, please file a case with
# GroundWork Support and have them forward this situation to Engineering,
# so we get some feedback that this feature was found useful in the field.
normal_sync_check_period = 0

# If set to true, then send only state changes and heartbeats.
# If set to false, then send full data on every processing cycle,
# regardless of whether the state has changed.  (You are unlikely
# to ever want this set to false.)
# [true/false]
smart_update = true

# Whether to continue running if submitting state updates to the server
# fails because the server is overloaded.  If this option is enabled, the
# feeder will avoid updating its internal cache for hosts and services not
# updated in Foundation during the present cycle, abort this cycle, and
# sleep until the next cycle.  The intent is to avoid further overloading
# the server with additional updates while it is under stress.  If this
# option is not enabled, the feeder will stop and restart, reinitializing
# itself to ensure that its cached copy of Foundation data is accurate.
# This option is only effective if both use_rest_api and smart_update are
# also enabled.
# [true/false]
continue_after_blockage = true

# Selection of optional fields.
#
# Certain data fields are processed by the status feeder but are not
# forwarded by default to Foundation because most customers never access
# these values.  Not sending data that will never be used significantly
# reduces the network, processing, and storage load.  A few customers
# have uses for these values, though, so here we provide a means to
# control whether particular non-default fields are sent.
#
# Here are the non-default fields in question:
#
#     Object   Nagios status.log field   Foundation field name     Category
#     -------  ------------------------  ------------------------  ------------------------------------------------
#     host     last_time_down            TimeDown                  timing change [status; UNIX epoch timestamp]
#     host     last_time_unreachable     TimeUnreachable           timing change [status; UNIX epoch timestamp]
#     host     last_time_up              TimeUp                    timing change [status; UNIX epoch timestamp]
#     host     obsess_over_host          isObsessOverHost          data change [setup; 0 => dismiss, 1 => obsess]
#     host     process_performance_data  isProcessPerformanceData  data change [setup; 0 => ignore, 1 => process]
#     host     is_flapping               isHostFlapping            data change [status; 0 => stable, 1 => flapping]
#     service  last_time_critical        TimeCritical              timing change [status; UNIX epoch timestamp]
#     service  last_time_ok              TimeOK                    timing change [status; UNIX epoch timestamp]
#     service  last_time_unknown         TimeUnknown               timing change [status; UNIX epoch timestamp]
#     service  last_time_warning         TimeWarning               timing change [status; UNIX epoch timestamp]
#     service  obsess_over_service       isObsessOverService       data change [setup; 0 => dismiss, 1 => obsess]
#     service  process_performance_data  isProcessPerformanceData  data change [setup; 0 => ignore, 1 => process]
#     service  is_flapping               isServiceFlapping         data change [status; 0 => stable, 1 => flapping]
#
# Data fields are classified into different sending categories, described
# below.  If you do not want to send any optional fields for a given sending
# category, leave the corresponding setting as an empty string ("").  If you
# do want to send some optional fields in a given sending category, list the
# Foundation field names here in a quoted, space-separated list.  For example,
# you might configure the following:
#
#     send_on_service_timing_change = "TimeOK TimeWarning TimeCritical TimeUnknown"
#
# IMPORTANT:  To keep the system load down, only configure the non-default
# fields you know you will actually use.
#
# The sending categories are as follows:
#
# send_in_any_host_message
# send_in_any_service_message
#     All of these fields are always included in any message sent for the
#     object.  A change in any of these fields will force a message for the
#     host or service to be sent.  These categories have no support for any
#     non-default fields, so they are not configurable below.
#
# send_on_host_data_change
# send_on_service_data_change
#     These fields are only sent if their individual values have changed.
#     A change in any of these fields will force a message for the host or
#     service to be sent.  The non-default fields that can be specified
#     for these categories are marked above as "data change".
#
# send_on_host_timing_change
# send_on_service_timing_change
#     These fields are only sent if their individual values have changed.
#     However, a change in any of these fields will by itself only force
#     a message for the host or service to be sent if it is time for a
#     heartbeat.  Otherwise, the change will not be posted to Foundation
#     until either a data change occurs for this host or service, or the
#     next heartbeat cycle occurs.  The non-default fields that can be
#     specified for these categories are marked above as "timing change".
#
send_on_host_data_change = ""
send_on_host_timing_change = ""
send_on_service_data_change = ""
send_on_service_timing_change = ""

# Send a console message when Nagios and Foundation are out of sync?
# true => send warning; false => don't send warning.
# [true/false]
send_sync_warning = true

# Whether to send pending-to-ok transition events, or just skip them.
# [true/false]
send_events_for_pending_to_ok = true

# Seconds to sleep before restarting after failure,
# to prevent tight looping.
failure_sleep_time = 10

# Nagios object monitoring results are classified with a state type of
# either SOFT (perhaps transient) or HARD (seemingly persistent).  The
# ignore_soft_states option specifies how Nagios SOFT states are to be
# treated when forwarding this data to Foundation.  Regardless of the
# setting of this option, all the ancillary data (such as the plugin output
# and the SOFT/HARD state type) is always sent to Foundation unchanged.
#
# If the ignore_soft_states option is disabled, the raw monitoring-state
# result (UP/DOWN/UNREACHABLE for a host, OK/WARNING/CRITICAL/UNKNOWN for a
# service) is also forwarded directly, as-is.  Conversely, if this option
# is enabled, we will instead always forward the last HARD state known to
# Nagios as the supposed current state of the object.  So in this case,
# until Nagios finishes its sequence of SOFT-state object-check retries,
# the apparent state in Foundation will remain stable.
#
# Regardless of the setting of this option, SOFT states that occur right
# after a new host or service is added to the system will be reported to
# Foundation as PENDING instead of whatever Nagios has received as the
# last check result.  The host or service state will continue to be sent
# as PENDING until the first HARD state occurs.  This choice allows our
# availability graphing to correctly reflect the period until we get the
# first HARD state transition, marking it all as PENDING since nothing
# is definitively known until then.  After that, the ignore_soft_states
# setting here controls how SOFT states are treated.
#
# This type of filtering is allowed because we treat SOFT and HARD states
# differently, sending state data for either type, but sending events only
# for HARD states and not for SOFT states.  This can confuse some system
# components on the Foundation side which do not fully understand SOFT
# states, leading to somewhat misleading display of the monitoring data.
# Enabling this option reduces the amount of monitoring noise in the system,
# and results in a more consistent display of state data across components.
# [true/false]
ignore_soft_states = true

# Sometimes certain services generate stale status which should be totally
# suppressed, because those services are configured on the server but are not
# really monitored there.  The ignore_stale_status option provides blanket
# control over this behavior, for all services tracked by the status feeder,
# not just some selection of services.  This is a blunt instrument for use
# only on child servers, and even then only in specialized circumstances not
# described here.  It is a workaround until such time as we have a finer
# resolution of configuration control over what individual services get
# monitored on a child server.
#
# The normal setting of this option is false.  Consult with GroundWork Support
# to discuss the infrequent situations where a true setting might be of use.
# [true/false]
ignore_stale_status = false

# Set this to true to prevent ScheduleDowntimeDepth property being sent through
# via the REST API for both hosts and services. Leave commented out for now.
# This provides some basis for a new and upcoming feature in a future release.
# suppress_downtime_update = false

# ----------------------------------------------------------------
# Options for controlling special-case treatment of events for
# certain services.
# ----------------------------------------------------------------

# The status feeder generates a few artificial events on its own.  They are
# manufactured to compensate for Nagios itself not generating events for
# PENDING-to-UP (for hosts) and PENDING-to-OK (for services) transitions.
#
# The settings in this section are designed to modify certain aspects of those
# service-state transition events.  These settings must exactly mirror the same
# group of settings for the event feeder (in the sibling event-feeder.conf
# file).  See that config file for details of both intent and exact syntax.
#
# Note that this capability currently only works if use_rest_api (below) is
# set to a true value.

<attribute_mappings>

    <service "syslog_.*">
        # application_type       = "SYSLOG"
        # consolidation_criteria = "SYSLOG"
    </service>

    <service gdma_21_wmi_cpu>
        # application_type       = "GDMA"
        # consolidation_criteria = "NAGIOSEVENT"
    </service>

    <service nedi_switch>
        # application_type       = "NEDI"
        # consolidation_criteria = "NEDIEVENT"
    </service>

</attribute_mappings>

# ----------------------------------------------------------------
# Options for sending to Foundation
# ----------------------------------------------------------------

# Whether to use the new Foundation REST API instead of the older
# Foundation socket API to send data to Foundation.  Currently,
# this should be set to false, since support in this feeder for the
# REST API is still under development.
# [true/false]
use_rest_api = true

# Maximum number of events to accumulate before sending them all as
# a bundle.
max_event_bundle_size = 50

# syncwait is a multiplier of cycle_sleep_time to wait on updates while
# Foundation processes a sync.  Typical value is 20.  In theory, you
# might need to increase this if you see deadlocks after commit in the
# framework.log file.  In practice, though, the need for this should
# have completely disappeared now that we have proper synchronization
# with pre-flight and commit operations in place.
syncwait = 20

# ----------------------------------------------------------------
# Options for sending event data to Foundation via the
# Foundation REST API.
# ----------------------------------------------------------------

# The application name by which the nagios2collage_socket.pl process
# will be known to the Foundation REST API.
rest_api_requestor = "Nagios status feeder"

# Where to find credentials for accessing the Foundation REST API.
ws_client_config_file = "/usr/local/groundwork/config/ws_client.properties"

# Max time to wait for the server to respond to a REST API call before aborting
# from the client side, specified as integer seconds.  Triggering of the
# client-side timeout on a REST call may appear as an $outcome{response_status}
# of "Internal Server Error" even though it's really a client-side issue.
rest_api_timeout = 60

# Typical number of messages to send in each bundle sent via the
# new REST API, for efficiency.  This is NOT the absolute minimum
# size, as there may occasionally be smaller bundles sent.
rest_bundle_size = 100

# Maximum number of messages sent in a bundle via the new REST API.
# ??? seems to work reasonably well in testing.
max_rest_bundle_size = 150

# These flags control whether most calls to the Foundation REST API use
# asynchronous processing.  This provides a significant performance
# improvement, so all of these flags are normally set to true in a
# production setup.  These flags are here primarily so this behavior can
# be easily controlled when the code is under development.
# [true/false]
use_async_upsert_hosts    = true
use_async_upsert_services = true

# There are six predefined log levels within the Log4perl package:  FATAL,
# ERROR, WARN, INFO, DEBUG, and TRACE (in descending priority).  We define
# two custom levels at the application level to form the full useful set:
# FATAL, ERROR, WARN, NOTICE, STATS, INFO, DEBUG, and TRACE.  To see an
# individual message appear, your configured logging level here has to at
# least match the priority of that logging message in the code.
#
# WARNING:  Setting this value any higher than "INFO" will generate HUGELY
# voluminous amounts of data, which will slow down your system and soon fill
# your disk.  DO NOT DO SO in production for any significant length of time.
GW_RAPID_log_level = "WARN"

# Application-level logging configuration, for that portion of the logging
# which is currently handled by the Log4perl package.
#
# As recommended in the Log4perl documentation, we DO NOT try to mirror Perl
# package names here as logging category names.  A more sensible classification
# of categories provides more intelligent control across applications.
log4perl_config = <<EOF

# Use this to send everything from FATAL through ${GW_RAPID_log_level} to the logfile.
log4perl.category.Nagios.Status.Feeder.GW.RAPID = ${GW_RAPID_log_level}, Logfile

# Send all Log4perl lines to the same log file as the rest of this application.
log4perl.appender.Logfile          = Log::Log4perl::Appender::File
log4perl.appender.Logfile.filename = ${logfile}
log4perl.appender.Logfile.utf8     = 0
log4perl.appender.Logfile.layout   = Log::Log4perl::Layout::PatternLayout
log4perl.appender.Logfile.layout.ConversionPattern = [%d{EEE MMM dd HH:mm:ss yyyy}] %m%n

EOF

# ----------------------------------------------------------------
# Options for sending event data to Foundation via the
# legacy XML socket API.
# ----------------------------------------------------------------

# If use_rest_api is false, where to send results to (the local)
# Foundation.  Other mechanisms (NSCA, or GDMA spooling; see below)
# are used to send results to parent or parent-standby systems.
foundation_host = localhost
foundation_port = 4913

# Typical number of messages to send in each bundle sent via the
# old socket API, for efficiency.  This is NOT the absolute minimum
# size, as there may occasionally be smaller bundles sent.
xml_bundle_size = 5

# Maximum number of XML messages sent in a bundle via the old socket API.
# 150 seems to work reasonably well in testing.
max_xml_bundle_size = 150

# When a new XML message is generated, send any accumulated XML messages
# if this much time has elapsed since we last sent any messages, even if
# we haven't yet gathered enough for a full "xml_bundle_size" bundle.
# This helps prevent messages from waiting too long for companions
# before an entire bundle is sent.
sync_timeout_seconds = 5

# This is the actual SO_SNDBUF value, as set by setsockopt().  This is
# therefore the actual size of the data buffer available for writing,
# irrespective of additional kernel bookkeeping overhead.  This will
# have no effect without the companion as-yet-undocumented patch to
# IO::Socket::INET.  Set this to 0 to use the system default socket send
# buffer size.  A typical value to set here is 262144.  (Note that the
# value specified here is likely to be limited to something like 131071
# by the sysctl net.core.wmem_max parameter.)
send_buffer_size = 262144

# Socket timeout (in seconds), to address GWMON-7407.  Typical value
# is 60.  Set to 0 to disable.
#
# This timeout is here only for use in emergencies, when Foundation
# has completely frozen up and is no longer reading (will never read)
# a socket we have open.  We don't want to set this value so low that
# it will interfere with normal communication, even given the fact that
# Foundation may wait a rather long time between sips from this straw
# as it processes a large bundle of messages that we sent it, or is
# otherwise busy and just cannot get back around to reading the socket
# in a reasonably short time.
socket_send_timeout = 60

# ----------------------------------------------------------------
# Options for sending state data to parent/standby server(s)
# ----------------------------------------------------------------

# State data may be sent to one or more parent/parent-standby servers in
# addition to a local Foundation database.  Such data is sent in three
# possible forms, representing escalating levels of insistence.  The
# exact logic is somewhat more complex, but this gives you the idea.
#
# * State changes are sent to the remote system whenever a state change
#   within Nagios is detected, and thereafter roughly as long as the
#   state is still "soft" within Nagios.  This last condition allows the
#   parent system to mirror the local Nagios logic that determines when
#   soft states turn into hard states.
#
# * Heartbeats are sent to the remote system on a periodic basis, and
#   include any state data which has not been sent since the last
#   heartbeat (roughly, because it has not changed or not been in a soft
#   state after a change, and thus has not been part of a state-change
#   message), but which has been checked since the last heartbeat (and
#   found to be still in the same state).
#
# * Full dumps may be sent to the remote system on a periodic basis.
#   These dumps include all state data, regardless of whether it has
#   been checked or has changed since the last full dump.  Such dumps
#   are used as a kind of fallback measure to ensure that the local and
#   remote systems stay sychronized over the long term, no matter what
#   kinds of transient failures might occur in the short term.
#
# Sending of state changes and heartbeats is enabled in tandem, because
# it only makes sense to send both kinds of data or neither.  Sending
# of full dumps is enabled independently, via the full-dump interval
# (though such dumps will only be sent if sending of state changes and
# heartbeats is also enabled).
#
# State data may be sent via either direct NSCA (send_nsca) invocations,
# or indirectly by using the GDMA spooler.  These channels may be
# independently controlled here, using options below.  Most of the
# configuration for the GDMA spooler, including where it will send the
# state data, is done separately in the spooler's own configuration
# file.
#
# Finally, note that sending state data to parent/standby server(s)
# is only supported if smart_update (configured above) is true.

# Whether to use actual last-check-time timestamps in state data sent to
# parent/standby servers.  Historically, this option was not available
# and the behavior was as if it were set "false".  In that case, the
# last-check timestamps sent to the parent/standby were all substituted
# with the current time, each time the data got sent.  That could be
# misleading, diverging more and more from the actual last-check time,
# if in fact some checks get stalled and do not execute.  So there is
# little reason to change this option from what we now recognize should
# be a standard "true" setting.  We only provide this option as a means
# of quickly restoring the old behavior if we find some problem with the
# recommended new behavior, passing along accurate per-check timestamps.
# [true/false]
send_actual_check_timestamps = true

# ----------------------------------------------------------------
# Options for sending state data via direct NSCA invocations
# ----------------------------------------------------------------

# Send state changes and heartbeats via NSCA?
# true => send, in which case you must at least define primary_parent;
# false => do not send.
# [true/false]
send_state_changes_by_nsca = false

# Where to send primary heartbeats via NSCA.  Must be a valid hostname
# or IP address, if send_state_changes_by_nsca is true.  Otherwise, set
# this to a quoted empty string.
primary_parent = ""

# Also send heartbeats via NSCA to a second parent?
# true => send, in which case you must define secondary_parent;
# false => do not send to secondary_parent.
# [true/false]
send_to_secondary_NSCA = false

# Where to send secondary heartbeats via NSCA.  Must be a valid hostname
# or IP address, if send_state_changes_by_nsca and send_to_secondary_NSCA
# are true.  Otherwise, set this to a quoted empty string.
secondary_parent = ""

# Seconds between NSCA heartbeats (approximate; will be at least
# this, possibly this + remote_full_update_time).
nsca_heartbeat_interval = 60 * 60

# Seconds between NSCA full dumps (approximate).
# Set to zero to disable, if desired.
nsca_full_dump_interval = 8 * 60 * 60

# Port the parent (and secondary parent) NSCA is listening on
# (normally 5667).
nsca_port = 5667

# Limit the size of batched NSCA sends to avoid overloads
# (typical value 100).
max_messages_per_send_nsca = 100

# Sleep this many seconds between sending batches of
# max_messages_per_send_nsca results.  This is used to throttle the
# sending of data, so as not to overwhelm the receiver with large data
# pulses and increase the risk of data loss due to a transient sending
# failure.
nsca_batch_delay = 2

# When sending a heartbeat via NSCA, if we get no answer from the
# parent after this many seconds, give up on sending the heartbeat.
nsca_timeout = 10

# ----------------------------------------------------------------
# Options for sending state data via the GDMA spooler
# ----------------------------------------------------------------

# Whether to send state data and heartbeats via the GDMA spooler.
# [true/false]
send_state_changes_by_gdma = false

# Seconds between GDMA heartbeats (approximate).
gdma_heartbeat_interval = 60 * 60

# Seconds between GDMA full dumps (approximate).
# Set to zero to disable, if desired.
gdma_full_dump_interval = 8 * 60 * 60

# Absolute path to the base of the GDMA software installation
# (typically, "/usr/local/groundwork/gdma").  This will be used to
# locate the spool file the status feeder will write into.  Can be set
# to a quoted empty string if send_state_changes_by_gdma is false.
gdma_install_base = /usr/local/groundwork/gdma

# The maximum number of as-yet-unspooled results to save for a
# following attempt at spooling, if an attempt to spool fails.
# This is mainly a fail-safe mechanism, to avoid a potentially
# infinite memory leak.  You may set this to 0 to discard all
# such unspooled messages.
max_unspooled_results_to_save = 20000

