<?xml version="1.0"?>
<!DOCTYPE taglib PUBLIC
  "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN"
  "http://java.sun.com/dtd//web-jsptaglibrary_1_2.dtd">

<taglib>


  <tlib-version>x.x.x</tlib-version>
  <jsp-version>1.2</jsp-version>
  <short-name>ice</short-name>
  <uri>http://www.icesoft.com/icefaces/component</uri>
  <display-name>ICEfaces Component Suite</display-name>

  <tag>

    <name>effect</name>
    <tag-class>com.icesoft.faces.component.effect.ApplyEffectTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
       Add effects to parent component 
    ]]></description>

    <attribute>
      <name>autoReset</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Set the fire value to false after effect has been fired.
        Default is true.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>effectType</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    <table>
    <tr><td>effectType</td><td>Description</td><td>Options</td></tr>
    <tr>
        <td>appear</td>
        <td>Fade in an element from hidden to visiable</td>
        <td>
            <table>
            <tr>
                <th>option</th>
                <th>Description</th>
                <th>Default Value</th>
            </tr>
            <tr>
                <td>from</td>
                <td>Starting opacity</td>
                <td>0.0</td>
            </tr>
            <tr>
                <td>to</td>
                <td>Ending opacity</td>
                <td>1.0</td>
            </tr>
            </table>
        </td>
    <tr>
        <td>fade</td>
        <td>Fade out an element from visiable to hidden</td>
        <td>
            <table>
            <tr>
                <th>option</th>
                <th>Description</th>
                <th>Default Value</th>
            </tr>
            <tr>
                <td>from</td>
                <td>Starting opacity</td>
                <td>1.0</td>
            </tr>
            <tr>
                <td>to</td>
                <td>Ending opacity</td>
                <td>0.0</td>
            </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td>highlight</td>
        <td>Highlight an element in a specifed color, the fade to the backgroud color</td>
        <td>
            <table>
            <tr>
                <th>option</th>
                <th>Description</th>
                <th>Default Value</th>
            </tr>
            <tr>
                <td>startcolor</td>
                <td>Highlight color</td>
                <td>"#ffff99"</td>
            </tr>
            </table>        
        </td>
    </tr>
    <tr>
        <td>pulsate</td>
        <td>Flash an element</td>
        <td>
            None
        </td>
    </tr>
    <tr>
        <td>scale</td>
        <td>Change the dimenstions of an element</td>
        <td>
            <table>
            <tr>           <th>option</th>
                <th>Description</th>
                <th>Default Value</th>
            </tr>
            <tr>
                <td>scaleX</td>
                <td>Scale X</td>
                <td>true</td>
            </tr>
            <tr>
                <td>scaleY</td>
                <td>Scale Y</td>
                <td>true</td>
            </tr>
            <tr>
                <td>scaleContent</td>
                <td>scale Content</td>
                <td>true</td>
            </tr>
            <tr>
                <td>scaleFromCenter</td>
                <td>scale From Center</td>
                <td>true</td>
            </tr>
            <tr>
                <td>scaleMode</td>
                <td>can be 'box' or 'contents' </td>
                <td>'box'</td>
            </tr>
            <tr>
                <td>scaleFrom</td>
                <td>Starting percent to scale from</td>
                <td>100.0</td>
            </tr>
            <tr>
                <td>scaleTo</td>
                <td>Ending percent to scale to</td>
                <td>0</td>
            </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td>puff</td>
        <td>Grow and fade an element</td>
        <td>
            None
        </td>
    </tr>
    <tr>
        <td>blindup</td>
        <td>Remove an element by rolling it up</td>
        <td>
            None
        </td>
    </tr>
    <tr>
        <td>blinddown</td>
        <td>Show an element by rolling it down</td>
        <td>
            None
        </td>
    </tr>
        <tr>
        <td> swtichoff
       </td>
        <td>Flash and then fold the element. Removing it from the display</td>
        <td>
            None
        </td>
    </tr>
        <tr>
        <td> dropout
       </td>
        <td>Move the element down and fade. Removing it from the display</td>
        <td>
            None
        </td>
    </tr>
        <tr>
        <td> shake
        </td>
        <td>Shake an element from left to right</td>
        <td>
            None
        </td>
    </tr>
        <tr>
        <td>slidedown
        </td>
        <td>Slide an element doen from the top</td>
        <td>
            None
        </td>
    </tr>
        <tr>
        <td>slideup
        </td>
        <td>Slide an element uo to the top. Removing it from the display</td>
        <td>
            None
        </td>
    </tr>
        <tr>
        <td>squish
        </td>
        <td>Squish an element off of the display</td>
        <td>
            None
        </td>
    </tr>
        <tr>
        <td>grow
        </td>
        <td>Grow an element from hidden to its normal size</td>
        <td>
            None
        </td>
    </tr>
        <tr>
        <td>shrink
        </td>
        <td>Shrink an element off of the display</td>
        <td>
            None
        </td>
    </tr>
    <tr>
        <td>fold
        </td>
        <td>Fold and element into smaller picese, util it is removed from the diplsay</td>
        <td>
            None
        </td>
    </tr>
    <tr>
        <td>move
        </td>
        <td>Move and element to a new location</td>
        <td>
            <table>
            <tr>
                <th>option</th>
                <th>Description</th>
                <th>Default Value</th>
            </tr>
            <tr>
                <td>x</td>
                <td>New X or left position</td>
                <td>0</td>
            </tr>
            <tr>
                <td>y</td>
                <td>New Y or top position</td>
                <td>0</td>
            </tr>
            <tr>
                <td>mode</td>
                <td>relative or absoulte</td>
                <td>relative</td>
            </tr>
            </table>
        </td>
    </tr>
    <table>
      ]]></description>
    </attribute>

    <attribute>
      <name>event</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Javascript event to fire this effect on.
        click, dblclick, mousedown , mouseup, mousemove,mouseover, mouseout,
        keypress, keydown, keyup
      ]]></description>
    </attribute>

    <attribute>
      <name>fire</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        TODO
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>options</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        A comma seperated list of options and their values.
        Example: highlight:'#dd0000',duration:1.0
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>sequence</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Used to fire a number of effects in sequence.
        Defines the sequence name for this effect
      ]]></description>
    </attribute>

    <attribute>
      <name>sequenceNumber</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Used to fire a number of effects in sequence.
        Defines the sequenceNumber of a sequence. Starts at 1,
        lower number are fired first.
      ]]></description>
    </attribute>

    <attribute>
      <name>submit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Fires a partial submit to the server when effect is complete.
      ]]></description>
    </attribute>

    <attribute>
      <name>transitory</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        When true records modifications to the CSS of the effected element.
        This will be sent to the server on the next submit.
        Default True
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelBorder</name>
    <tag-class>com.icesoft.faces.component.panelborder.PanelBorderTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The panelBorder is a layout container component that arranges and resizes specified child
            containers to fit in five regions: north, south, east, west, and center. These regions are
            defined using facets.<br>
            The panelBorder component can be used to provide a general layout scheme for a page.<br>
            Note: A panelBorder facet needs a container type component as a child (e.g.,
            panelGroup, panelGrid or form). panelGroup renders a span tag, which doesn't
            work properly if using Mozilla. panelGrid can be used to avoid display problems. 
    ]]></description>

    <attribute>
      <name>align</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>bgcolor</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Name or code of the background color for this table.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>border</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Width (in pixels) of the border to be drawn around this table.
      ]]></description>
    </attribute>

    <attribute>
      <name>cellpadding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Definition of how much space the user agent should leave between
        the border of each cell and its contents.
      ]]></description>
    </attribute>

    <attribute>
      <name>cellspacing</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Definition of how much space the user agent should leave between
        the left side of the table and the leftmost column, the top of
        the table and the top of the top side of the topmost row, and so
        on for the right and bottom of the table. It also specifies the
        amount of space to leave between cells.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Direction indication for text that does not inherit
        directionality. Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>frame</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code specifying which sides of the frame surrounding this table
        will be visible. Valid values are: none (no sides, default
        value); above (top side only); below (bottom side only); hsides
        (top and bottom sides only); vsides (right and left sides only);
        lhs (left hand side only); rhs (right hand side only); box (all
        four sides); and border (all four sides).
      ]]></description>
    </attribute>

    <attribute>
      <name>height</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        height of the entire table, for visual user agents.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code describing the language used in the generated markup for
        this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>layout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		layout | north | south | west | east | center |
		===================|========|========|=======|========|========|
		default | top | bottom | left | right | center | horizontal
		reverse | top | bottom | right | left | center | vertical
		reverse | bottom | top | left | right | center | center only |
		none | none | none | none | center | hide north | none | bottom
		| left | right | center | hide east | top | bottom | left | none
		| center | hide south | top | none | left | right | center |
		hide west | top | bottom | none | right | center |
      ]]></description>
    </attribute>

    <attribute>
      <name>renderCenter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If false, the center facet will not be rendered. The layout
		attribute overrides this property.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderEast</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If false, the east facet will not be rendered. The layout
		attribute overrides this property.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderNorth</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If false, the north facet will not be rendered. The layout
		attribute overrides this property.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderSouth</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If false, the south facet will not be rendered. The layout
		attribute overrides this property.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderWest</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If false, the west facet will not be rendered. The layout
		attribute overrides this property.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>rules</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code specifying which rules will appear between cells within
        this table. Valid values are: none (no rules, default value);
        groups (between row groups); rows (between rows only); cols
        (between columns only); and all (between all rows and columns).
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
             <p>
              Space-separated list of CSS style class(es) to be applied when this
              element is rendered. This value must be passed through as the 
              "class" attribute on generated markup.<br/>
              <p>Defines the base class name for all style classes. Default value is <b>icePnlBrdr</b></p>
              <ul>
                <li>icePnlBrdrNorth</li>
                <li>icePnlBrdrEast</li>
                <li>icePnlBrdrWest</li>
                <li>icePnlBrdrSouth</li>
                <li>icePnlBrdrCenter</li>
              </ul>              
  		 </p>                   
      ]]></description>
    </attribute>

    <attribute>
      <name>summary</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Summary of this table's purpose and structure, for user agents
        rendering to non-visual media such as speech and Braille.
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for
		this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Width of the entire table, for visual user agents.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>column</name>
    <tag-class>com.icesoft.faces.component.UIColumnTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Renders a UIComponent that represents a single column of data within a parent <code>UIData</code> component.</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>colspan</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
        This is exactly an html colspan attribute. Due to the iterative nature 
        of the table body, this attribute is not suitable inside the body of the 
        dataTable. So this attribute will only be apply on the columns that are 
        descendent of the colmnGroup component.
        </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>groupOn</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
         <p>
              The groupOn attribute, enables the application to show the one to 
              many relationship in the tabular format. Only the distinct values will 
              be rendered for the grouped column, and its rowspan value will be 
              set to its none distinct count.  </p>
              <b> Note: </b>
               <ul>
                 <li> Application must provide the sorted data for the grouped column.          
                 <li> This attribute is just for the layout, it does not have any effect 
              on the underlying dataModel.
              </ul>
              &lt;ice:dataTable var="employee" .. &gt;<br/>
                    &nbsp;&nbsp;&lt;ice:column groupOn="#{employee.deptName}" &gt;<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText value="#{employee.deptName}"/&gt;<br/>
                    &nbsp;&nbsp;&lt;/ice:colum&gt;<br/>
                    &nbsp;&nbsp;&lt;ice:column &gt;<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText value="#{employee.name}"/&gt;<br/>
                    &nbsp;&nbsp;&lt;/ice:colum&gt;<br/>                    
                    .....<br/>
             &lt;/ice:dataTable .. &gt;               
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>rowspan</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
        This is exactly an html rowspan attribute. Due to the iterative nature 
        of the table body, this attribute is not suitable inside the body of the 
        dataTable. So this attribute will only be apply on the columns that are 
        descendent of the colmnGroup component. <br/>
        <b>Hint: </b> The groupOn attribute might give you the result, which you 
        need from the rowspan inside the body of the table. 
        </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through as
        the "class" attribute on generated markup. <p>
        If this attribute is defined on the column, the new styleClass will be 
        extending the existing styleClasses.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>columnGroup</name>
    <tag-class>com.icesoft.faces.component.ColumnGroupTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>
		To get the multiple dataTable headers or footers with allowable colspan 
		and rowspan, you need to use the columnGroup component inside the 
		"header" or the "footer" facet of the ice:dataTable component. </p>
        <p>
        The "facet" can have a single child only, so one columGroup is 
        required inside the facet. The ice:headerRow component is a valid child of the columnGroup component.
        </p>
        <p>
         &lt;ice:dataTable .. &gt;<br/>
                 &lt;f:facet name="header"&gt;<br/>
                    &nbsp;&nbsp;&lt;ice:columnGroup&gt;<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:headerRow&gt;<br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:column rowspan="2"&gt;<br/>
                              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText value="First Name"/&gt;<br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ice:column&gt; <br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:column rowspan="2"&gt; <br/>
                              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText value="Last Name"/&gt;<br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ice:column&gt; <br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:column colspan="2"&gt; <br/>
                              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText value="Contact Info"/&gt;<br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ice:column&gt;     <br/>                      
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;/ice:headerRow&gt;<br/>

                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:headerRow&gt;<br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:column&gt; <br/>
                              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText value="Phone"/&gt;<br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ice:column&gt; <br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:column&gt; <br/>
                              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText value="Email"/&gt;<br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ice:column&gt; <br/>  &nbsp;&nbsp;&nbsp;&nbsp;&lt;/ice:headerRow&gt;<br/>                        
                    &nbsp;&nbsp;&lt;/ice:columnGroup&gt;<br/>
                 &lt;/f:facet&gt;<br/>
                    &lt;ice:column&gt;<br/>
                        &lt;ice:outputText id="firstName" value="#{person.firstName}"/&gt;<br/>
                    &lt;/ice:colum&gt;<br/>
                    .....<br/>
                &lt;/ice:dataTable .. &gt;    
        </p>                    
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>columns</name>
    <tag-class>com.icesoft.faces.component.UIColumnsTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The difference between the <code>UIColumns</code> and the 
		<code>UIColumn</code> is that the UIColumn renders just a single "td" element, 
		while the <code>UIColumns</code> can render as much TDs as the length of 
		the dataModel. <br/> Like the data table the datamodel can be used through 
		the <code>vale</code> and <code>var</code> attributes.  		      
		</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>first</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Zero-relative row number of the first row to be displayed. If this
      property is set to zero, rendering will begin with the first row of the
      underlying data.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The number of rows to display, starting with the one identified
		by the "first" property. If this value is set to zero, all
		available rows in the underlying data model will be displayed.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The data model for this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>var</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Name of a request-scope attribute under which the model data for
		the row selected by the current value of the "rowIndex" property
		(i.e. also the current value of the "rowData" property) will be
		exposed.
      ]]></description>
    </attribute>

    <attribute>
      <name>varStatus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>Name of a request-scope attribute under which the current indexed  
        state will be exposed. This is modeled after the Facelets JSTL c:forEach  
        varStatus. The varStatus object has 5 sub-properties:</p>
        <dl>
        <dt>int <b>begin</b></dt> 
        <dd>Corresponds to the UIData container's <b>first</b> property, the 
            index at which it begins iteration.</dd>
        <dt>int <b>end</b></dt>
        <dd>The ending index of iteration, corresponding to the UIData 
            container's <b>first</b> plus <b>rows</b> minus 1. Note: 
            If the UIData's DataModel's isRowAvailable() method returns false, 
            prematurely ending iteration, then the actual ending index may not 
            equal the value for this <b>end</b> property.</dd>
        <dt>int <b>index</b></dt>
        <dd>The current iteration index. Corresponding to the UIData 
            container's getRowIndex() value, which also corresponds with the 
            UIData's DataModel's getRowIndex() value.</dd>
        <dt>boolean <b>first</b></dt>
        <dd>Defined simply as: <b>varStatus.index == varStatus.begin</b></dd>
        <dt>boolean <b>last</b></dt>
        <dd>Defined simply as: <b>varStatus.index == varStatus.end</b>. Note: 
            This has the same limitations as the <b>end</b> property.</dd>
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>dataExporter</name>
    <tag-class>com.icesoft.faces.component.dataexporter.DataExporterTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p> The ice:dataExporter component can be used to export the 
		data contents of an ice:dataTable component into a variety of formats.<br/>
		There are following two formats supported by the component:
		<ul>
		   <li>Excel
		   <li>CSV
		</ul>
		The outputTypeHandler attribute allows developer to define custom output
		formats.
        <br/>
            The <b>label</b>, <b>image</b> and <b>renderLabelAsButton</b> are interrelated. Their order of precedence are as follows:
            <ul>
                <li>If image URL is specified, the label text will become the alt text for the image, the image is 
                a clickable anchor to trigger the export operation. This supercedes the following two configurations.</li>
                <li>If renderLabelAsButton=true, the label text will used for a rendered button that will trigger the export operation.</li>
                <li>(default) The label text is rendered as an anchor which, when clicked, will trigger the export operation.</li>
            </ul>
		</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>clickToCreateFileText</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	    Note: This is deprecated as of 1.8.1. Specifying a value for this attribute will have no effect.
      ]]></description>
    </attribute>

    <attribute>
      <name>for</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		  ID of the dataTable that this dataExporter component will export data from.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>ignorePagination</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        This is false by default. If true the dataExporter
        will ignore the "first" and "rows" properties on the associated dataTable.
      ]]></description>
    </attribute>

    <attribute>
      <name>image</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The URL of an image that will be rendered instead of the 'label' attribute 
        text which the user can click on to initiate a data export download. When 
        this attribute is specified, the 'label' text will be used for the 'title' 
        and 'alt' text on the image element.
      ]]></description>
    </attribute>

    <attribute>
      <name>includeColumns</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>This attribute lets you define the order and number of columns that needs to be added to
        the generated output. It takes comma separated column indexes. 
        Note that index starts with 0. <br/><br/>
        If there are 6 columns in the table and you want to add only 1st, 4th 
        and 6th column to the generated output:<br/>
        &lt;ice:dataExporter includeColumns="0,3,5"... &gt;
        <br/>
        The column order of the above example can be changed a well:</br>
        &lt;ice:dataExporter includeColumns="5,0,3"... &gt;
        <br/>
        By default all columns will be included to the output, and in the default order.
        </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The value of this attribute will be rendered to download the generated file.
        If it has not been defined then the file name will be rendered instead.
      ]]></description>
    </attribute>

    <attribute>
      <name>outputTypeHandler</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Custom output handler can be define using this attribute. The custom handler
        must be a type of com.icesoft.faces.component.dataexporter.OutputTypeHandler
      ]]></description>
    </attribute>

    <attribute>
      <name>popupBlockerLabel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>    
        When used in a browser with a popup blocker enabled downloading the 
        exported file will require two clicks instead of a single click. In this 
        case the value of this attribute will be used to update the label for 
        the dataExporter to reflect that the user must click the link/button/image 
        again to complete the download process.. 
        </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>renderLabelAsButton</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    This is false by default. If true the label text will be the label of a rendered button, instead of an anchor link.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
             <p>
              Space-separated list of CSS style class(es) to be applied when this
              element is rendered. This value must be passed through as the 
              "class" attribute on generated markup.<br/>
              Default value is <b>iceDatExp<b/></p>
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
        It can have one of the following value:
        <ul>
           <li>excel</li>
           <li>csv</li>
        </ul>
        <b>Note:</b> If the custom handler has been defined using the <i>outputTypeHandler</i>
        attribute then it will take percedence over this attribute. 
        </p>         
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>dataPaginator</name>
    <tag-class>com.icesoft.faces.component.datapaginator.DataPaginatorTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The dataPaginator component is used in conjunction with a dataTable. The dataPaginator may be used
            to render a set of page navigation facets and access attributes of the underlying DataModel specified
            in the associated dataTable. Using the dataPaginator, a dataTable containing a large DataModel can
            be viewed as multiple "pages" of table rows instead of as one large table.<br>
            The dataPaginator component can be used to provide a more manageable, performant view into a large 
            DataModel. 
    ]]></description>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing an action listener method that will be 
		notified when the paginator would be clicked. 
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>displayedRowsCountVar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		A parameter name, under which the actual displayed rows count is set in 
		request scope similar to the var parameter.
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>fastStep</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		step (pages) used for fastforward and fastrewind.
      ]]></description>
    </attribute>

    <attribute>
      <name>firstRowIndexVar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		A parameter name, under which the actual first displayed row index is set 
		in request scope similar to the var parameter.
      ]]></description>
    </attribute>

    <attribute>
      <name>for</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Id of the dataTable.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		True means, that the default ActionListener should be executed immediately 
		(i.e. during Apply Request Values phase of the request processing lifecycle)
		, rather than waiting until the Invoke Application phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>keyboardNavigationEnabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p> Enables keyboard support. Default value is true. When true 
        it enables the following keys: Home, End, PageUp and PageDown to navigate
        to First, Last, Previous and Next page respectively.<br/>
        <b>Note:</b> Shortcut keys would only be processed when focus is on one of a
        paginator button or focus is on one of a row in the datatable when keyboardNavigationEnabled
        is true on rowSelector as well.        
        </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>lastRowIndexVar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		A parameter name, under which the actual last displayed row index is set in 
		request scope similar to the var parameter.
      ]]></description>
    </attribute>

    <attribute>
      <name>pageCountVar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		A parameter name, under which the actual page count is set in request scope 
		similar to the var parameter.
      ]]></description>
    </attribute>

    <attribute>
      <name>pageIndexVar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		A parameter name, under which the actual page index is set in request scope 
		similar to the var parameter.
      ]]></description>
    </attribute>

    <attribute>
      <name>paginator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If set true, then the page number links will be rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>paginatorMaxPages</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The maximum amount of pages to be displayed in the paginator.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderFacetsIfSinglePage</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If set to false, then the data scroller will not be rendered when 
		only a single page of data exists.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>rowsCountVar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		A parameter name, under which the actual rows count is set in request 
		scope similar to the var parameter.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
             <p>
              Space-separated list of CSS style class(es) to be applied when this
              element is rendered. This value must be passed through as the 
              "class" attribute on generated markup.<br/>
              Default value is <b>iceDatPgr<b/></p>
              if enabled
              <ul>
                <li>iceDatPgrScrBtn</li>
                <li>iceDatPgrScrOut</li>
                <li>iceDatPgrSrcCol</li>
                <li>iceDatPgrCol</li>
                <li>iceDatPgrTbl</li>                
              </ul>   
              if disabled
              <ul>
                <li>iceDatPgrScrBtn-dis</li>
                <li>iceDatPgrScrOut-dis</li>          <li>iceDatPgrSrcCol-dis</li>
                <li>iceDatPgrCol-dis</li>
                <li>iceDatPgrTbl-dis</li>                
              </ul>                          
      ]]></description>
    </attribute>

    <attribute>
      <name>vertical</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		True means, that the padinatior would render vertically, default is false.		
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>inputFile</name>
    <tag-class>com.icesoft.faces.component.inputfile.InputFileTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The inputFile component can be used to provide a user-specified file upload capability.<br>
		    The inputFile component renders an file input HTML element. Users specify a file to upload
            either by entering the path to a file directly, or by  clicking the  <b>Browse</b>  button
            to open a file-system navigation dialog window.  Clicking the  <b>Upload</b>  button uploads
            the specified file to the server.<br>
            Note: Newer browsers now make the field, where users previously could type in the file path,
            be read-only, to prevent users from entering invalid file paths. Clicking into that field can 
            summon the file selection dialog, just as clicking on the  <b>Browse</b>  button would.<br>
            Note: The web.xml parameter com.icesoft.faces.uploadDirectoryAbsolute when set to true will use 
            the value of the com.icesoft.faces.uploadDirectory parameter as an absolute directory.<br>
            Note: If the styleClass, buttonClass or the inputTextClass need to be set, then the css file
            must be referenced using the ice:outputStyle component.<br/>
            Note: In order to set the height and width of this component, it is recomended to use the height and the width
            attribute of this component instead of setting it using the style or styleClass. This is due to 
            the rendering of an iframe.
    ]]></description>

    <attribute>
      <name>accept</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		 Passed through to root element. 
      ]]></description>
    </attribute>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing the application action to invoke when
		this component is activated by the user. The expression must
		evaluate to a either a String or a public method that takes no
		parameters, and returns a String (the logical outcome) which is
		passed to the NavigationHandler for this application.<br/>
		Note: Long processing, for more than a few seconds, should be done
		from a worker thread, spawned by your action method. Otherwise the
		browser will timeout, and the inputFile component will disappear.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing an action listener method that will be 
		notified when this component is activated by the user. The expression 
		must evaluate to a public method that takes an ActionEvent parameter, 
		with a return type of void.<br/> 
		Note: Long processing, for more than a few seconds, should be done
		from a worker thread, spawned by your action method. Otherwise the
		browser will timeout, and the inputFile component will disappear.
      ]]></description>
    </attribute>

    <attribute>
      <name>autoUpload</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
            This attribute is false by default. It makes the inputFile component 
            to automatically upload the file on selection.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>buttonClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        style class for the submit button.
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>failOnEmptyFile</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
            This attribute is true by default. It makes the inputFile component 
            throw an exception if the file size is 0. Setting it to false lets 
            files be uploaded with 0 size, without the component throwing any exception. 
            In that case, the application can handle 0 sized file using the actionListener.
      ]]></description>
    </attribute>

    <attribute>
      <name>file</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Bean property that will be a reference to the uploaded file.
        Note: This is deprecated. Instead you should use actionListener,
        and when in the callback method, call InputFile.getFileInfo(),
        which will give you information on both successful and failed
        file upload attempts.
      ]]></description>
    </attribute>

    <attribute>
      <name>fileNamePattern</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The name of the file being uploaded must conform with this pattern. The regular 
		expression can be use to define the valid file name to be uploaded.<br>
		If the file name does not match with the pattern, the file will not be 
		uploaded and an actionEvent and an exception would be fired and thrown
		respectively.
		<pre>
		public void action(ActionEvent event) {
             InputFile inputFile = (InputFile) event.getSource();
		     if (inputFile.getStatus() == InputFile.INVALID) {
                inputFile.getFileInfo().getException().printStackTrace();
             }
        }
        </pre>
        The default pattern is set to <b>".+"</b> for any name lenght > 0. Let say
        to allow only .pdf files to be uploaded the pattern would be <b>".+\.pdf"</b><br/>
      ]]></description>
    </attribute>

    <attribute>
      <name>height</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        height of the component.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that, if this component is activated by the user,
          notifications should be delivered to interested listeners and actions
          immediately (that is, during Apply Request Values phase) rather than
          waiting until Invoke Application phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>inputTextClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        style class for the inputText.
      ]]></description>
    </attribute>

    <attribute>
      <name>inputTextSize</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        size of the input text.
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Text that will appear on the submit button.
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onchange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus and its value 
		has been modified since gaining focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>outputStream</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        If there is an EL expression specified for this attribute, then the 
        inputFile component will not save the uploaded file to the filesystem, 
        but will instead write it to the java.io.OutputStream that it attains 
        from evaluating this EL expression. The OutputStream will be gotten
        within a JSF lifecycle, but may be written to inside of and outside of 
        any lifecycles.
      ]]></description>
    </attribute>

    <attribute>
      <name>progressListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		<p>
		MethodBinding representing a progress listener method that will be notify 
		the application on the percentage of the file being uploaded. The expression 
		must evaluate to a public method that takes a single parameter of type 
		com.icesoft.faces.component.inputfile.InputFileProgressEvent, with a return type of void.
		</p>
		<p>
       These are some things to consider when implementing the progressListener. 
		<ul>
			<li>Beans which implement the progressListener must be in session scope. </li>
			<li>The PersistentFacesState must be set in the constructor of session bean. </li>
			<li>The progressListener method may invoke the executeAndRender() call on the PersistentFacesState instance, or may use the OnDemandRenderer, in order to render the page. </li>
			<li>The progressListener method must take a single argument of type com.icesoft.faces.component.inputfile.InputFileProgressEvent. </li>
			<li>From the InputFileProgressEvent's getComponent() or getSource() methods, developers may attain a reference to the InputFile component. </li>
			<li>If the progressListener is being invoked due to the inputFile causing a form submit (refer to the <b>submitOnUpload</b> attribute), then the InputFile's FileInfo object's isPreUpload() or isPostUpload() method will return true, depending if the form post is from before or after the file upload. </li>
		</ul>
		</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>progressRender</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>Historically, when the inputFile's current file upload was progressing,  
        and the <b>progressListener</b> was invoked, the <b>progressListener</b>'s bean 
        would implement <b>com.icesoft.faces.async.render.Renderable</b>, and use the 
        <b>com.icesoft.faces.async.render.RenderManager</b> in conjunction with the 
        <b>com.icesoft.faces.async.render.OnDemandRenderer</b>, to do a server push, 
        to update the view in the browser with the current progress. It could also invoke 
        either <b>PersistentFacesState.render()</b> or <b>PersistentFacesState.renderLater()</b>,    to accomplish the same thing.</p>
        <p>As of ICEfaces 1.7.1, you can just set <b>progressRender="true"</b>, and the server 
        push will happen for you, without setting up all that glue code in the bean. 
        You still have to set your <b>outputProgress</b> component's progress percent 
        in the bean via the <b>progressListener</b>, and you have to enabled asynchronous 
        mode, by setting the <b>com.icesoft.faces.synchronousUpdate</b> context parameter 
        to false.</p>
        <p>As of ICEfaces 1.8 DR#2, the RenderManager method is completely outdated, 
        since now the inputFile requires a full JSF lifecycle for each progress event,
        meaning that now it automatically renders itself. Neither is it necessary to set 
        <b>progressRender="true"</b>, since it is true by default. It's possible to 
        set <b>progressRender="false"</b>, to disable the lifecycles, but that will also 
        disable the <b>progressListener</b> and <b>actionListener</b> MethodBindings and 
        the <b>file</b> settable ValueBinding, since these all happen within JSF lifecycles.</p>
        <p>Note: The default value is true.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
                <p>
              Space-separated list of CSS style class(es) to be applied when this
              element is rendered. This value must be passed through as the 
              "class" attribute on generated markup.<br/>
              Default value is <b>iceInpFile</b>.<br/>        
              Style classes used, if enabled:
                     <ul>
                       <li>iceInpFile</li>
                       <li>iceInpFileBtn</li>
                       <li>iceInpFileTxt</li>                      
                     </ul>
              if disabled
                     <ul>
                       <li>iceInpFile-dis</li>
                       <li>iceInpFileBtn-dis</li>
                       <li>iceInpFileTxt-dis</li>                      
                     </ul>  
              </p>       
      ]]></description>
    </attribute>

    <attribute>
      <name>submitOnUpload</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>Depending on the value of <b>submitOnUpload</b>, the inputFile may post its 
        enclosing form, before and/or after the file upload occurs. Possible values are:</p>
        <dl>
        <dt>none</dt>
        <dd>File uploading will not cause the inputFile's enclosing form, and any other of the form fields, to be submitted to the server.</dd>
        <dt>preUpload</dt>
        <dd>The inputFile's enclosing form, and any other of the form fields, will be submitted to the server, immediately before the file uploading begins.</dd>  <dt>postUpload</dt>
        <dd>The inputFile's enclosing form, and any other of the form fields, will be submitted to the server, immediately after the file uploading finishes.</dd>
        <dt>preAndPostUpload</dt>
        <dd>The inputFile's enclosing form, and any other of the form fields, will be submitted to the server, both before and after the file uploading takes place.</dd>
        </dl>        
        <p>This is to support two different use cases. Applications running in synchronous 
        mode can not make use of server push, so to depict the beginning and the ending 
        of the file upload requires browser initiated JSF lifecycles, accomplished via 
        form submissions. As well, for some applications, it's desirable to submit other 
        form fields when the user clicks on the file upload button, so that they may be 
        processed together with the uploaded file.</p>
        <p>Note: The default value is <b>none</b>.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>uniqueFolder</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		This uniqueFolder attribute works in conjunction with the com.icesoft.faces.uploadDirectory
		parameter with four possible combinations as illustrated in the table below:
		<table border="1">
			<tr><td></td><td colspan="2" align="center"> <b>com.icesoft.faces.uploadDirectory</b> </td></tr>
			<tr><td><b>uniqueFolder</b></td><td align="center"><b>Set</b></td><td align="center"><b>Not Set</b></td></tr>
			<tr><td>True</td><td>/application-context/uploadDirectory/sessionid/</td><td>/application-context/sessionid/</td></tr>
			<tr><td>False</td><td>/application-context/uploadDirectory/</td><td>/application-context/</td></tr>
		</table>
		Note: The default value is true.
      ]]></description>
    </attribute>

    <attribute>
      <name>uploadDirectory</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Describes the directory where any uploaded files should be placed.  
        Overrides the com.icesoft.faces.uploadDirectory context-param 
        for this specific inputFile.
      ]]></description>
    </attribute>

    <attribute>
      <name>uploadDirectoryAbsolute</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        If the uploadDirectory should be interpretted as an absolute 
        path into the filesystem, or as a relative path from the deployment directory.
        Overrides the com.icesoft.faces.uploadDirectoryAbsolute context-param 
        for this specific inputFile.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The current value of this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        width of the component.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>gMap</name>
    <tag-class>com.icesoft.faces.component.gmap.GMapTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
                   This component uses the version 2 of the Google Maps API. In
                   order to use the google maps, an API key is required. The API
                   key can be obtained from the google maps' website. You must need to specify
                   the API key in the web.xml(e.g.)<br/>
                   &lt;context-param&gt;<br/>        &nbsp;&nbsp;&nbsp;&lt;param-name&gt;com.icesoft.faces.gmapKey&lt;/param-name&gt;<br/>
                    &nbsp;&nbsp;&nbsp;&lt;param-value&gt;ABQIAAAADlu0Z........&lt;/param-value&gt;<br/>
                   &lt;/context-param&gt;
    ]]></description>

    <attribute>
      <name>address</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The ice:gMap component can locate an address on the map, using the GClientGeocoder implicitly.
        <br/>(e.g.) To render a map with the default location.<br/>
         &lt;ice:gMap address="Calgary"/&gt;
         <br/><br/>
         To locate the address dynamically, the address needs to be bind with the bean and "locateAddress" attribute needs to return "true", when map needs to be located (e.g.)<br/>

         &lt;ice:inputText value="#{gmap.address}" valueChangeListener="#{gmap.addressChanged}" /&gt;<br/>
         &lt;ice:gMap address="#{gmap.address}" locateAddress="#{gmap.locateAddress}"/&gt;<br/><br/>
         Note: The valueChangeListener sets the value of the "locateAddress" to true of false, that causes the address to be locate on the google map.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>latitude</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The latitude of the Map    
      ]]></description>
    </attribute>

    <attribute>
      <name>locateAddress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        This attribute tells to the map to locate the address if set to true.        
      ]]></description>
    </attribute>

    <attribute>
      <name>longitude</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The longitude of the Map
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.
        <br/><br/>
        The base name for all style classes. Default value is iceGmp        
        <ul>
            <li>iceGmpMapTd (this class will apply on the td, that contains the google map)</li>
            <li>iceGmpTxtTd (this class will apply on the td, that contains the default textual div used by GDirection component</li>
        <ul>
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Type of the map. The following are the valid values:
        <ul>
           <li>Satellite</li>
           <li>Hybrid</li>
           <li>Map</li>
        </ul>  
        To render a map in Statellite view: <br/>
        &lt;ice:GMap type="Satellite" address="Calgary" /&gt;   
      ]]></description>
    </attribute>

    <attribute>
      <name>zoomLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Set the zoom level of the map
        &lt;ice:GMap zoomLevel="6"  /&gt;   
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>gMapControl</name>
    <tag-class>com.icesoft.faces.component.gmap.GMapControlTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
        This component adds the control to the ice:gMap. This component must need to be a child of ice:gMap component. (e.g.)<br/>
            &lt;ice:gMap&gt;<br/>
                &lt;ice:gMapControl name="GLargeMapControl"/&gt;<br/> 
               &lt;ice:gMapControl name="GScaleControl"/&gt;<br/> 
           &lt;/ice:gMap&gt;<br/>      
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The name represents the control of the google map. The following are the valid values.
        <ul>
            <li>GSmallMapControl</li>
            <li>GLargeMapControl</li>
            <li>GSmallZoomControl</li>
            <li>GScaleControl</li>
            <li>GMapTypeControl</li>
            <li>GOverviewMapControl</li>                                                                        
        </ul>                
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>gMapDirection</name>
    <tag-class>com.icesoft.faces.component.gmap.GMapDirectionTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
            The gMapDirection component uses the google map's GDirections API to get the direction from point A to point B. This component must need to be a child of ice:gMap component.
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>from</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Point A
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>locateAddress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        This attribute tells to the map to get the direction if set to true.        
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>textualDivId</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        This attribute reference the id of the panelGroup, that displays the textual direction. (e.g.)<br/>
        &lt;ice:GMap&gt;<br/>
             &lt;ice:GDirection textualDivId="textDiv" ...../&gt;</br>
         &lt;/ice:GMap&gt; </br>
         &lt;ice:panelGroup id="textDiv"/&gt;
      ]]></description>
    </attribute>

    <attribute>
      <name>to</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Point B
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>gMapGeoXml</name>
    <tag-class>com.icesoft.faces.component.gmap.GMapGeoXmlTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
           This component uses google map's GGeoXml API, to support the KML and GeoRSS data formats for displaying geographic information.<br/>
          &lt;ice:gMap latitude="41.875696" longitude="-87.624207" zoomLevel="11"&gt;<br/>
              &nbsp;&nbsp;&nbsp;&lt;ice:gMapGeoXml url="http://mapgadgets.googlepages.com/cta.kml"/&gt;</br>
          &lt;/ice:gMap&gt;<br/>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Url of the Kml or GeoRSS
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>gMapLatLng</name>
    <tag-class>com.icesoft.faces.component.gmap.GMapLatLngTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
            This component is a wrapper of google map's GLatLng API. Can be child of gMapMarker component.
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>latitude</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The latitude
      ]]></description>
    </attribute>

    <attribute>
      <name>longitude</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The longitude
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>gMapLatLngs</name>
    <tag-class>com.icesoft.faces.component.gmap.GMapLatLngsTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
        This component can be a child of gMapMarker component and its value attribute can be a list of gMapLatLng component. 
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        List of GLatLng component
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>gMapMarker</name>
    <tag-class>com.icesoft.faces.component.gmap.GMapMarkerTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
            This component uses the google map's GMarker API, which displays the 
            points on the map. <br/>
            To define the marker the "longitude" and the "latitude" attributes of this 
            component can be used (e.g.)
            <p>
            &lt;ice:gMap&gt;<br/>
            &nbsp;&nbsp;&lt;ice:gMapMarker latitude="51" longitude="-90"/&gt;<br/>   &lt;/ice:gMap&gt;    
            </p>
            In addition to that the "gMapLatLng" and "gMapLatLngs" components can 
            be used as its children (e.g.)<br/>
            &lt;ice:gMap&gt;<br/>
            &nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:gMapMarker latitude="51" longitude="-90"&gt;<br/>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:gMapLatLng latitude="51.067591" longitude="-114.084862"/&gt;<br/>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:gMapLatLngs value="#{gmap.points}"/&gt; <br/>  
            &nbsp;&nbsp;&lt;/ice:gMapMarker&gt;<br/>
            &lt;/ice:gMap&gt;<br/>              
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>latitude</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      ]]></description>
    </attribute>

    <attribute>
      <name>longitude</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        To
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>headerRow</name>
    <tag-class>com.icesoft.faces.component.HeaderRowTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>
		This component represents a single header row. The ice:column is its valid 
		children. <br/><br/>
		         &lt;ice:dataTable .. &gt;<br/>
                 &lt;f:facet name="header"&gt;<br/>
                    &nbsp;&nbsp;&lt;ice:columnGroup&gt;<br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:headerRow&gt;<br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:column rowspan="2"&gt;<br/>
                              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText value="First Name"/&gt;<br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ice:column&gt; <br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:column rowspan="2"&gt; <br/>
                              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText value="Last Name"/&gt;<br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ice:column&gt; <br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:column colspan="2"&gt; <br/>
                              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText value="Contact Info"/&gt;<br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ice:column&gt;     <br/>                      
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;/ice:headerRow&gt;<br/>

                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:headerRow&gt;<br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:column&gt; <br/>
                              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText value="Phone"/&gt;<br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ice:column&gt; <br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:column&gt; <br/>
                              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText value="Email"/&gt;<br/>
                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ice:column&gt; <br/>
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;/ice:headerRow&gt;<br/>                        
                    &nbsp;&nbsp;&lt;/ice:columnGroup&gt;<br/>
                 &lt;/f:facet&gt;<br/>
                    &lt;ice:column&gt;<br/>
                        &lt;ice:outputText id="firstName" value="#{person.firstName}"/&gt;<br/>
                    &lt;/ice:colum&gt;<br/>
                    .....<br/>
                &lt;/ice:dataTable .. &gt;  
		</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through as
        the "class" attribute on generated markup. <p>
        If this attribute is defined on the this component, the new styleClass will be 
        extending the existing styleClasses.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>checkbox</name>
    <tag-class>com.icesoft.faces.component.CheckboxTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Render a checkbox for a selectManyCheckbox component
		  when the layout of the selectManyCheckbox component is "spread".</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>for</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        ID of the selectManyCheckbox component to which this checkbox belongs.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>index</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Index of the SelectItem mapped to this checkbox, starting with zero.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>commandButton</name>
    <tag-class>com.icesoft.faces.component.CommandButtonTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Renders an HTML "input" element.</p><p>Decode Behavior</p><ul><p>Obtain the <code>Map</code> from the "requestParameterMap"
          property of the <code>ExternalContext</code>.  If the value in the
          <code>Map</code> for the value of the "clientId" property of the
          component is <code>null</code>, create a String by concatenating
          the value of the "clientId" property of the component with the
          String ".x" (without the quotes).  Create another String in the
          same manner, but concatenate ".y" (without the quotes).  If
          <code>null</code> is the value in the <code>Map</code> for both
          Strings, return from <code>decode()</code>.  If the value in the
          <code>Map</code> for the value of the "clientId" property of the
          component is not <code>null</code>, get the value of the "type"
          attribute, and convert it to lower case.  If the result is equal
          to the String "reset" (without the quotes), return from
          <code>decode()</code>.  Otherwise, create a
          <code>javax.faces.event.ActionEvent</code> around the component,
          and pass it to the <code>queueEvent()</code> method of the
          component, which must be an instance of
          <code>UICommand</code>.</p></ul><p>Encode Behavior</p><ul><p>Render the clientId of the component as the value of the
          "name" attribute.  Render the current value of the component as
          the value of the "value" attribute.  If the "styleClass" attribute
          is specified, render its value as the value of the "class"
          attribute.</p></ul>
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing the application action to invoke when
		this component is activated by the user. The expression must
		evaluate to a either a String or a public method that takes no
		parameters, and returns a String (the logical outcome) which is
		passed to the NavigationHandler for this application.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing an action listener method that will be 
		notified when this component is activated by the user. The expression 
		must evaluate to a public method that takes an ActionEvent parameter, 
		with a return type of void. 
      ]]></description>
    </attribute>

    <attribute>
      <name>alt</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Alternate textual description of the element rendered by this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>image</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Absolute or relative URL of the image to be displayed for this button. 
        If specified, this "input" element will be of type "image". Otherwise, 
        it will be of the type specified by the "type" property with a label 
        specified by the "value" property.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onchange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus and its value 
		has been modified since gaining focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onselect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when text within this element is selected by 
		the user.
      ]]></description>
    </attribute>

    <attribute>
      <name>panelConfirmation</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The id of the ice:panelConfirmation component linked to this button.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>readonly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that this component will prohibit changes by the user. 
		The element may receive focus unless it has also been disabled. This
        attribute is valid for input types "text" and "password" only. It is
        non-functional for other input types like "radio" or "checkbox".
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The base name for all style classes. Default value is <b>iceCmdBtn</b> if 
		enabled and <b>iceCmdBtn-dis</b> if disabled.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Advisory title information about markup elements generated
          for this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Type of button to create. Valid values are "submit" and "reset". If not 
        specified, or not a valid value, the default value is "submit".
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The current value of this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>commandLink</name>
    <tag-class>com.icesoft.faces.component.CommandLinkTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Render an HTML "a" anchor element that acts like a
          form submit button when clicked.</p><p>General Behaviour</p><p>Both the encode and decode behavior require the ability to get
          the id/name for a hidden field whose value is set by the
          JavaScript form submit.  This name must be constructed as
          follows:</p><ul><li><p>Get the clientId for the form of which this component is a
          child.</p></li><li><p>Append
          <code>NamingContainer.SEPARATOR_CHAR</code>.</p></li><li><p>Append a constant string that is the same for all command
          link components in the tree.</p></li></ul><p>In the following text, this String is called
          hiddenFieldName.</p><p>Decode Behavior</p><ul><p>Obtain the "clientId" property of the component.  Obtain the
          <code>Map</code> from the "requestParameterMap" property of the
          <code>ExternalContext</code>.  Derive hiddenFieldName as above.
          Get the entry in the <code>Map</code> under the key that is the
          hiddenFieldName.  If the there is no entry, or the entry is the
          empty String, or the entry is not equal to the value of the
          "clientId" property, return immediately.  If there is an entry,
          and its value is equal to the value of the "clientId" property,
          create a new <code>javax.faces.event.ActionEvent</code> instance
          around the component and call <code>queueActionEvent()</code> on
          the component, passing the event.</p></ul><p>Encode Behavior</p><ul><p>Render "#" as the value of the "href" attribute. Render the current 
          value of the component as the link text if it is specified. Render 
          javascript that is functionally equivalent to the following as the value 
          of the "onclick" attribute:</p><p><code>document.forms['CLIENT_ID']['hiddenFieldName'].value='CLIENT_ID';
          document.forms['CLIENT_ID']['PARAM1_NAME'].value='PARAM1_VALUE';
          document.forms['CLIENT_ID']['PARAM2_NAME'].value='PARAM2_VALUE';
          return false;</code></p><p>document.forms['CLIENT_ID'].submit()" where hiddenFieldName is
          as described above, CLIENT_ID is the clientId of the UICommand
          component, PARAM*_NAME and PARAM*_VALUE are the names and values,
          respectively, of any nested UIParameter children.  The name and
          the value must be URLEncoded.  If the "styleClass" attribute is
          specified, render its value as the value of the "class" attribute.
          Render any non-UIParameter children as normal inside of the "a"
          element.  These will appear as the link text.  Allow the form
          renderer to output a single "input" element (for the entire page,
          regardless of how many command link components are in the page) of
          "type" "hidden" whose "name" is the value of hiddenFieldName, and
          which must not have a "value" attribute.  Multiple occurrences of
          command link components in the tree should not cause multiple
          hiddenFieldName hidden fields.  Allow the form renderer to output
          an "input" element of "type" "hidden" for each of the nested
          UIParameter children, taking the name property (but not the value)
          from each one in turn.</p></ul>
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing the application action to invoke when
		this component is activated by the user. The expression must
		evaluate to a either a String or a public method that takes no
		parameters, and returns a String (the logical outcome) which is
		passed to the NavigationHandler for this application.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing an action listener method that will be 
		notified when this component is activated by the user. The expression 
		must evaluate to a public method that takes an ActionEvent parameter, 
		with a return type of void. 
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>charset</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			The character encoding of the resource designated by this hyperlink.
      ]]></description>
    </attribute>

    <attribute>
      <name>coords</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The position and shape of the hot spot on the screen (for use in 
		client-side image maps).
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>hreflang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The language code of the resource designated by this hyperlink.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>panelConfirmation</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The id of the ice:panelConfirmation component associated to this link.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>rel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The relationship from the current document to the anchor specified by 
		this hyperlink. The value of this attribute is a space-separated list 
		of link types.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>rev</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		A reverse link from the anchor specified by this hyperlink to the 
		current document. The value of this attribute is a space-separated list 
		of link types.
      ]]></description>
    </attribute>

    <attribute>
      <name>shape</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The shape of the hot spot on the screen (for use in client-side image 
		maps). Valid values are: default (entire region); rect (rectangular 
		region); circle (circular region); and poly (polygonal region).
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The base name for all style classes. Default value is <b>iceCmdLnk</b> if enabled
		and <b>iceCmdLnk-dis</b> if disabled.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Name of a frame where the resource retrieved via this hyperlink is to 
		be displayed.
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The content type of the resource designated by this hyperlink.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The current value of this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>dataTable</name>
    <tag-class>com.icesoft.faces.component.DataTableTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Renders an HTML "table" element compliant with the HTML 401
          specification.  Please consult the javadoc for <code>UIData</code>
          to supplement this specification.  If the "styleClass" attribute
          is specified, render its value as the value of the "class"
          attribute on the "table" element.  Any pass-through attributes are
          also rendered on the "table" element.  </p><p>Rendering the header</p><ul><p>If the <code>UIData</code> component has a "header" facet, or
          any of the child <code>UIColumn</code> components has a "header"
          facet, render a "thead" element.  If the <code>UIData</code>
          component has a "header" facet, encode its contents inside of "tr"
          and "th" elements, respectively.  Output the value of the
          "headerClass" attribute of the <code>UIData</code> component, if
          present, as the value of the "class" attribute on the "th".
          Output the number of child <code>UIColumn</code> components of the
          <code>UIData</code> component as the value of the "colspan"
          attribute on the "th".  Output "colgroup" as the value of the
          "scope" attribute on the "th" element. </p><p>If any of the child <code>UIColumn</code> components has a
          "header" facet render a "tr" element.  For each
          <code>UIColumn</code> that actually has a "header" facet, render
          it inside of a "th" element.  Columns that don't have a "header"
          facet cause an empty "th" element to be rendered.  Output the
          value of the "headerClass" attribute of the <code>UIData</code>
          component, if present, as the value of the "class" attribute on
          the "th".  Output "col" as the value of the "colgroup" attribute
          on the "th" element.
          </p><p>Close out the "thead" element.</p></ul><p>Rendering the footer</p><ul><p>Follow the same process as for the header, except replace
          "header" with "footer", "th" with "td", "thead" with "tfoot", and
          "headerClass" with "footerClass".  Do not render any "scope"
          attribute for the footer.</p></ul><p>Rendering the table body</p><ul><p>Render a "tbody" element.  Keep track of the result of the
          "rows" property on the <code>UIData</code> component.  Keep track
          of the number of rows we have rendered so far.  Iterate through
          the rows.  Set the "rowIndex" property of the <code>UIData</code>
          component to be correct as we iterate through the rows.  Stop
          rendering children and close out the "tbody" element if the
          "rowAvailable" property of the <code>UIData</code> returned false.
          Output a "tr" element.  Output the value of the "rowClasses" per
          the attribute description below.  For each <code>UIColumn</code>
          child, output a "td" element, attaching the value of the
          "columnClasses" attribute of the <code>UIData</code> component per
          the attribute description below.  Recursively encode each child of
          each <code>UIColumn</code> child.  Close out the "td" element.
          When done with the row, close out the "tr" element.  When done
          with all the rows, close out the "tbody" element.</p></ul><p>When done rendering all the rows, set the "rowIndex" property of
         the <code>UIData</code> to -1, and close out the "table"
         element.</p>
    ]]></description>

    <attribute>
      <name>bgcolor</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Name or code of the background color for this table.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>border</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Width (in pixels) of the border to be drawn around this table.
      ]]></description>
    </attribute>

    <attribute>
      <name>cellpadding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Definition of how much space the user agent should leave between the 
        border of each cell and its contents.
      ]]></description>
    </attribute>

    <attribute>
      <name>cellspacing</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Definition of how much space the user agent should leave between the 
        left side of the table and the leftmost column, the top of the table 
        and the top of the top side of the topmost row, and so on for the right 
        and bottom of the table. It also specifies the amount of space to leave 
        between cells.
      ]]></description>
    </attribute>

    <attribute>
      <name>clientOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        If false, saves the width of the columns to the server, its only applicable
        when resizeable = true. "true" is the default value. It helps when the
        width of the column needs to be preserved after the resize operation.
      ]]></description>
    </attribute>

    <attribute>
      <name>columnClasses</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>
        Comma-delimited list of CSS style classes that will be applied to the 
        columns of this table. A space separated list of classes may also be 
        specified for any individual column. If the number of elements in this 
        list is less than the number of columns specified in the "columns" 
        attribute, no "class" attribute is output for each column greater than 
        the number of elements in the list. If the number of elements in the 
        list is greater than the number of columns specified in the "columns" 
        attribute, the elements at the posisiton in the list after the value 
        of the "columns" attribute are ignored.	
        </p>
        <p>
        If the value of this attribute is not being set, the tableRenderer would 
        render the default classes using the following pattern (e.g.) <br/>
        &lt;td class="iceDatTblCol1" /&gt; <br/>
        &lt;td class="iceDatTblCol2" /&gt; <br/>
		&lt;td class="iceDatTblCol1" /&gt; <br/>
	    &lt;td class="iceDatTblCol2" /&gt; <br/>
		....              
        </p>
        <p>
        The above class pattern would allow you to define the base style in the 
        "column" class and if you want to customize any of the specific column 
        you can override the column+index class.
        </p>		
      ]]></description>
    </attribute>

    <attribute>
      <name>columnWidths</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		A comma separated list of the widths of each column for a scrollable table. Please note that column widths must be set in pixels. This attribute does not yet support percentage column widths.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>first</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Zero-relative row number of the first row to be displayed. If this
      property is set to zero, rendering will begin with the first row of the
      underlying data.
      ]]></description>
    </attribute>

    <attribute>
      <name>footerClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>    
		Space-separated list of CSS style class(es) that will be applied to any
		footer generated for this table.
		<br/>
		The default classe rendered as <b>iceDatTblFtr</b>.
		</p>		
      ]]></description>
    </attribute>

    <attribute>
      <name>frame</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code specifying which sides of the frame surrounding this table will be 
        visible. Valid values are: none (no sides, default value); above 
        (top side only); below (bottom side only); hsides (top and bottom sides 
        only); vsides (right and left sides only); lhs (left hand side only); 
        rhs (right hand side only); box (all four sides); and border (all four 
        sides).			
      ]]></description>
    </attribute>

    <attribute>
      <name>headerClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>  
        Space-separated list of CSS style class(es) that will be applied to any 
        header generated for this table.	
        <br/>
        	The default class would rendered as <b>iceDatTblHdr</b>.	
        </p>		
      ]]></description>
    </attribute>

    <attribute>
      <name>headerClasses</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		This attribute can be used to define the separate style classes for the each 
		header of the each column.<br/>
		The default would rendered as : iceDatTblColHdr1, iceDatTblColHdr2 alternatively<br/>
		Note: The attribute has been deprecated.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>resizable</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>
            To make columns resizable, this attribute needs to be true.
        </p>
        <b>Note: </b> Only those columns of the table can be dragged which are
        defined as the "header" facet of a column. The headers which are defined by
        the "columnGroup" can not be dragged.
         <p>
        This feature does not yet support dataTables with the 'scrollable' attribute
        set. This combination of features is slated for a future release.
        </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>resizableColumnWidths</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        A comma separated list of the widths of each column for a resizable table. Please note that column widths must be
        set in pixels. This attribute does not yet support percentage column widths.
      ]]></description>
    </attribute>

    <attribute>
      <name>rowClasses</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>      
        Comma-delimited list of CSS style classes that will be applied to the 
        rows of this table. A space separated list of classes may also be 
        specified for any individual row. Thes styles are applied, in turn, 
        to each row in the table. For example, if the list has two elements, 
        the first style class in the list is applied to the first row, the 
        second to the second row, the first to the third row, the second to 
        the fourth row, etc. In other words, we keep iterating through the 
        list until we reach the end, and then we start at the beginning again.
        <br/>	
        The default classes rendered as <b>iceDatTblRow1, iceDatTblRow2</b>  alternatively.
        </p>		
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The number of rows to display, starting with the one identified
		by the "first" property. If this value is set to zero, all
		available rows in the underlying data model will be displayed.
      ]]></description>
    </attribute>

    <attribute>
      <name>rules</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code specifying which rules will appear between cells within 
        this table. Valid values are: none (no rules, default value); 
        groups (between row groups); rows (between rows only); cols 
        (between columns only); and all (between all rows and columns).
      ]]></description>
    </attribute>

    <attribute>
      <name>scrollFooter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        In scrollable mode the footer scrolls as well, to trun the scrolling off
        it can be set to the false. The default value is true.
      ]]></description>
    </attribute>

    <attribute>
      <name>scrollHeight</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the height of the scroll table.
      ]]></description>
    </attribute>

    <attribute>
      <name>scrollable</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		When true table is scrollable.
		(Note: you will also need to set columnWidths, and scrollHeight)
        When table is scrollable pass-thru attributes like bgcolor will not work
        because they are passed to the outer scrollable div only, not to the table
        itself. Use style classes instead. See the styleClass, rowClasses and
        columnClasses attributes.
      ]]></description>
    </attribute>

    <attribute>
      <name>sortAscending</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Sets default sort order, required for sortheader component.
      ]]></description>
    </attribute>

    <attribute>
      <name>sortColumn</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Sets column to be sort, required for sortheader component.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>
		Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value must be passed through as the "class" 
		attribute on generated markup.
		the default class rendered as <b>iceDatTbl</b>.
              if enabled
              <ul>
                <li>iceDatTbl</li>
                <li>iceDatTblCol</li>
                <li>iceDatTblCol1</li>                
                <li>iceDatTblCol2</li>
                <li>iceDatTblColHdr</li>
                <li>iceDatTblColHdr1</li>
                <li>iceDatTblColHdr2</li>
                <li>iceDatTblRow1</li>
                <li>iceDatTblRow2</li>                
                <li>iceDatTblHdr</li>
                <li>iceDatTblFtr</li>   
                <li>iceDatTblScrlHdrTbl</li>  
                <li>iceDatTblScrlBdyTbl</li>           
              </ul>   
              The following style class is being rendered for the div of the 
              "header" if the dataTable is scrollable. 
              <ul>
                <li>iceDatTblScrlSpr</li>                
              </ul>      
              The following style class is being rendered for active sortable column header. 
              <ul>
                <li>iceDatTblActvSrtHdr</li>                
              </ul>                        
        </p>		
      ]]></description>
    </attribute>

    <attribute>
      <name>summary</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Summary of this table's purpose and structure, for user 
        agents rendering to non-visual media such as speech and Braille.
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The data model for this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>var</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Name of a request-scope attribute under which the model data for
		the row selected by the current value of the "rowIndex" property
		(i.e. also the current value of the "rowData" property) will be
		exposed.
      ]]></description>
    </attribute>

    <attribute>
      <name>varStatus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>Name of a request-scope attribute under which the current indexed  
        state will be exposed. This is modeled after the Facelets JSTL c:forEach  
        varStatus. The varStatus object has 5 sub-properties:</p>
        <dl>
        <dt>int <b>begin</b></dt> 
        <dd>Corresponds to the UIData container's <b>first</b> property, the 
            index at which it begins iteration.</dd>
        <dt>int <b>end</b></dt>
        <dd>The ending index of iteration, corresponding to the UIData 
            container's <b>first</b> plus <b>rows</b> minus 1. Note: 
            If the UIData's DataModel's isRowAvailable() method returns false, 
            prematurely ending iteration, then the actual ending index may not 
            equal the value for this <b>end</b> property.</dd>
        <dt>int <b>index</b></dt>
        <dd>The current iteration index. Corresponding to the UIData 
            container's getRowIndex() value, which also corresponds with the 
            UIData's DataModel's getRowIndex() value.</dd>
        <dt>boolean <b>first</b></dt>
        <dd>Defined simply as: <b>varStatus.index == varStatus.begin</b></dd>
        <dt>boolean <b>last</b></dt>
        <dd>Defined simply as: <b>varStatus.index == varStatus.end</b>. Note: 
            This has the same limitations as the <b>end</b> property.</dd>
      ]]></description>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Width of the entire table, for visual user agents.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>form</name>
    <tag-class>com.icesoft.faces.component.FormTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
          <p>Renders an HTML "form" element.</p>

            <p>Decode Behavior</p><ul><p>Obtain the <code>Map</code> from the
                "requestParameterMap"
                property of the <code>ExternalContext</code>. If the map contains
                an entry for the "clientId" of this <code>UIForm</code> component,
                call <code>setSubmitted(true)</code> on the form, otherwise call
                <code>setSubmitted(false)</code> on the form.</p></ul>

            <p>Encode Behavior</p>

            <ul><p>The value of the "method" attribute must be
                "post". The value
                of the "action" attribute must be the result of passing the view
                identifier of the current view to the <code>getActionURL()</code>
                method of the <code>ViewHandler</code> for this application,
                then passing that String to the <code>encodeActionURL()</code>
                method on the <code>ExternalContext</code>. If the "styleClass"
                attribute is specified, render its value as the value of the
                "class" attribute. Render all the necessary hidden fields for all
                commandLink instances in the page just before the close of the
                "form" element.</p>
            </ul>
    ]]></description>

    <attribute>
      <name>accept</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		List of content types that a server processing this form will handle 
		correctly
      ]]></description>
    </attribute>

    <attribute>
      <name>acceptcharset</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		List of character encodings for input data that are accepted by the 
		server processing this form.
      ]]></description>
    </attribute>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        MethodBinding representing the application action to invoke when    this component is activated by the user. The expression must
        evaluate to a either a String or a public method that takes no
        parameters, and returns a String (the logical outcome) which is
        passed to the NavigationHandler for this application.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        MethodBinding representing an action listener method that will be 
        notified when this component is activated by the user. The expression 
        must evaluate to a public method that takes an ActionEvent parameter, 
        with a return type of void.
        This listener will only be invoked if the target component itself doesn't 
        handle the ActionEvent. 
      ]]></description>
    </attribute>

    <attribute>
      <name>autocomplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>enctype</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		 Content type used to submit the form to the server. If not 
		 specified, the default value is "application/x-www-form-urlencoded".
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onreset</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Javascript code executed when this form is reset.
      ]]></description>
    </attribute>

    <attribute>
      <name>onsubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Javascript code executed when this form is submitted.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value must be passed through as the "class" 
		attribute on generated markup.<br/>
		The default class would be rendered as <b>iceFrm</b>
      ]]></description>
    </attribute>

    <attribute>
      <name>submitted</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        submitted
      ]]></description>
    </attribute>

    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Name of a frame where the response retrieved after this form submit is 
		to be displayed.
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>graphicImage</name>
    <tag-class>com.icesoft.faces.component.GraphicImageTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      Renders an HTML "img" element.  Render the clientId
          as the value of the "id" attribute.  Render the value of the
          component as the value of the "src" attribute, after passing it
          to the <code>getResourceURL()</code> method of the <code>ViewHandler</code>
          for this application, and passing the result
          through the <code>encodeResourceURL()</code> method of the
          <code>ExternalContext</code>.  If present, render the value of the
          alt attribute as the value of the "alt" attribute.  If the
          "styleClass" attribute is specified, render its value as the value
          of the "class" attribute.
    ]]></description>

    <attribute>
      <name>alt</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Alternate textual description of the element rendered by this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>height</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Override for the height of this image.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>ismap</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that this image is to be
        used as a server side image map.  Such an image
        must be enclosed within a hyperlink ("a").
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>longdesc</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		URI to a long description of the image represented by this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>mimeType</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The MIME type of the image that is rendered dynamically (by means of a 
		byte array) by this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value must be passed through as the "class" 
		attribute on generated markup.<br/>
		The default class rendered as <b>iceGphImg</b>
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Advisory title information about markup elements generated
          for this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

              Context-relative URL to retrieve the resource associated with
              this component.  This is an alias for the "value" property.
      ]]></description>
    </attribute>

    <attribute>
      <name>usemap</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The name of a client side image map (an HTML "map" element) for which 
		this element provides the image.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The value of this component can be set to one of the following type:
          <ul>
            <li>String</li>
            <li>byte[]</li>
            <li>com.icesoft.faces.context.Resource
                 <ul>
                    <li>com.icesoft.faces.context.JarResource</li>
                    <li>com.icesoft.faces.context.FileResource</li>
                    <li>com.icesoft.faces.context.ByteArrayResource</li>
                 </ul>
            </li>
          </ul>          
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Override for the width of this image.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>inputHidden</name>
    <tag-class>com.icesoft.faces.component.InputHiddenTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Renders an HTML "input"
          element of "type" "hidden".</p><p><a name="decode">Decode Behavior</a></p><ul><p>Obtain the <code>Map</code> from the "requestParameterMap"
          property of the <code>ExternalContext</code>.  If the
          <code>Map</code> contains an entry for the "clientId" of the
          component, pass the value of the entry to the
          <code>setSubmittedValue()</code> method of the component, which
          must be an instance of <code>EditableValueHolder</code>.</p></ul><p>Encode Behavior</p><ul><p>  Render the clientId of the component as
          the value of the "name" attribute.  Render the current value of
          the component as the value of the "value" attribute.
          </p></ul>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that the user is required to provide a submitted value 
		for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a validator method that will be called 
		during Process Validations to perform correctness checks on the value 
		of this component. The expression must evaluate to a public method that 
		takes FacesContext, UIComponent, and Object parameters, with a return 
		type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>The current value of this component.</p>
        <p>All UIInput derived UIComponents, that are placed within a UIData 
        container, such as a dataTable or panelSeries, should have their 
        <i>value</i> attribute bound to a bean property via a 
        ValueBinding/ValueExpression, since otherwise the UIData container 
        will not keep their successfully validated state, which can cause 
        the component to fail to function properly.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a value change listener method that will be 
		notified when a new value has been set for this input component. The 
		expression must evaluate to a public method that takes a 
		ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>inputSecret</name>
    <tag-class>com.icesoft.faces.component.InputSecretTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Renders an HTML "input" element of "type" "password".</p><p>Decode Behavior</p><ul><p>See the decode description for the <a href="javax.faces.Inputjavax.faces.Text.html#encode">Input
          Text</a> renderer.</p></ul><p>Encode Behavior</p><ul><p>
          Render the clientId of the component as the value of the "name"
          attribute.  Render the current value of the component as the value
          of the "value" attribute, if and only if the "redisplay" component
          attribute is the string "true".  If the "styleClass" attribute is
          specified, render its value as the value of the "class"
          attribute.</p></ul>
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing the application action to invoke when
		this component is activated by the user. The expression must
		evaluate to a either a String or a public method that takes no
		parameters, and returns a String (the logical outcome) which is
		passed to the NavigationHandler for this application.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing an action listener method that will be 
		notified when this component is activated by the user. The expression 
		must evaluate to a public method that takes an ActionEvent parameter, 
		with a return type of void. 
      ]]></description>
    </attribute>

    <attribute>
      <name>alt</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Alternate textual description of the element rendered by this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>autocomplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>maxlength</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       The maximum number of characters that may be entered in this field.
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onchange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus and its value 
		has been modified since gaining focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onselect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when text within this element is selected by 
		the user.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>readonly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that this component will prohibit changes by the user. 
		The element may receive focus unless it has also been disabled. This
        attribute is valid for input types "text" and "password" only. It is
        non-functional for other input types like "radio" or "checkbox".
      ]]></description>
    </attribute>

    <attribute>
      <name>redisplay</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			Flag indicating that any existing value in this field should be
			rendered when the form is created. Because this is a potential
			security risk, password values are not displayed by default.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that the user is required to provide a submitted value 
		for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>size</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The number of characters used to determine the width of this field.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The base name for all style classes. Default value is <b>iceInpSecrt</b> if 
		enabled and <b>iceInpSecrt-dis</b> if disabled.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a validator method that will be called 
		during Process Validations to perform correctness checks on the value 
		of this component. The expression must evaluate to a public method that 
		takes FacesContext, UIComponent, and Object parameters, with a return 
		type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>The current value of this component.</p>
        <p>All UIInput derived UIComponents, that are placed within a UIData 
        container, such as a dataTable or panelSeries, should have their 
        <i>value</i> attribute bound to a bean property via a 
        ValueBinding/ValueExpression, since otherwise the UIData container 
        will not keep their successfully validated state, which can cause 
        the component to fail to function properly.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a value change listener method that will be 
		notified when a new value has been set for this input component. The 
		expression must evaluate to a public method that takes a 
		ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>inputText</name>
    <tag-class>com.icesoft.faces.component.InputTextTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Renders an HTML "input"
          element of "type" "text".</p><p><a name="decode">Decode Behavior</a></p><ul><p>Obtain the <code>Map</code> from the "requestParameterMap"
          property of the <code>ExternalContext</code>.  If the
          <code>Map</code> contains an entry for the "clientId" of the
          component, pass the value of the entry to the
          <code>setSubmittedValue()</code> method of the component, which
          must be an instance of <code>EditableValueHolder</code>.</p></ul><p>Encode Behavior</p><ul><p>  Render the clientId of the component as
          the value of the "name" attribute.  Render the current value of
          the component as the value of the "value" attribute.  If the
          "styleClass" attribute is specified, render its value as the value
          of the "class" attribute.
          </p></ul>
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing the application action to invoke when
		this component is activated by the user. The expression must
		evaluate to a either a String or a public method that takes no
		parameters, and returns a String (the logical outcome) which is
		passed to the NavigationHandler for this application.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing an action listener method that will be 
		notified when this component is activated by the user. The expression 
		must evaluate to a public method that takes an ActionEvent parameter, 
		with a return type of void. 
      ]]></description>
    </attribute>

    <attribute>
      <name>alt</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Alternate textual description of the element rendered by this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>autocomplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>maxlength</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The maximum number of characters that may be entered in this field.
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onchange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus and its value 
		has been modified since gaining focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onselect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when text within this element is selected by 
		the user.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>readonly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that this component will prohibit changes by the user. 
		The element may receive focus unless it has also been disabled. This
        attribute is valid for input types "text" and "password" only. It is
        non-functional for other input types like "radio" or "checkbox".
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that the user is required to provide a submitted value 
		for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>size</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The number of characters used to determine the width of this field.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	 	Space-separated list of CSS style class(es) to be applied when this 
	 	element is rendered. This value must be passed through as the "class" 
	 	attribute on generated markup. <br/>	   
		The base name for all style classes. Default value is <b>iceInpTxt</b>
		if enabled and <b>iceInpTxt-dis</b> if disabled.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a validator method that will be called 
		during Process Validations to perform correctness checks on the value 
		of this component. The expression must evaluate to a public method that 
		takes FacesContext, UIComponent, and Object parameters, with a return 
		type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>The current value of this component.</p>
        <p>All UIInput derived UIComponents, that are placed within a UIData 
        container, such as a dataTable or panelSeries, should have their 
        <i>value</i> attribute bound to a bean property via a 
        ValueBinding/ValueExpression, since otherwise the UIData container 
        will not keep their successfully validated state, which can cause 
        the component to fail to function properly.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a value change listener method that will be 
		notified when a new value has been set for this input component. The 
		expression must evaluate to a public method that takes a 
		ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>inputTextarea</name>
    <tag-class>com.icesoft.faces.component.InputTextareaTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Renders an HTML "textarea" element.</p><p>Decode Behavior</p><ul><p>See the encode description for the <a href="javax.faces.Inputjavax.faces.Text.html#encode">Input
          Text</a> renderer.</p></ul><p>Encode Behavior</p><ul><p>  Render the
          clientId as the value of the "name" attribute.  Render the current
          value of the component inside the "textarea"
          element.</p></ul>
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>autocomplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>cols</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>maxlength</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The maximum number of characters that may be entered in this field.<br/>
        This is not in the HTML specification for textarea, so it has been 
        implemented in Javascript. The caveat is that characters beyond the limit
        may appear briefly, before the ending of the text is truncated.
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onchange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus and its value 
		has been modified since gaining focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onselect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when text within this element is selected by 
		the user.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>readonly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that this component will prohibit changes by the user. 
		The element may receive focus unless it has also been disabled. This
        attribute is valid for input types "text" and "password" only. It is
        non-functional for other input types like "radio" or "checkbox".
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that the user is required to provide a submitted value 
		for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	 	Space-separated list of CSS style class(es) to be applied when this 
	 	element is rendered. This value must be passed through as the "class" 
	 	attribute on generated markup. <br/>
	 	The base name for all style classes. Default value is <b>iceInpTxtArea</b>
	 	if enabled and <b>iceInpTxtArea-dis</b> if disabled.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a validator method that will be called 
		during Process Validations to perform correctness checks on the value 
		of this component. The expression must evaluate to a public method that 
		takes FacesContext, UIComponent, and Object parameters, with a return 
		type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>The current value of this component.</p>
        <p>All UIInput derived UIComponents, that are placed within a UIData 
        container, such as a dataTable or panelSeries, should have their 
        <i>value</i> attribute bound to a bean property via a 
        ValueBinding/ValueExpression, since otherwise the UIData container 
        will not keep their successfully validated state, which can cause 
        the component to fail to function properly.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a value change listener method that will be 
		notified when a new value has been set for this input component. The 
		expression must evaluate to a public method that takes a 
		ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>message</name>
    <tag-class>com.icesoft.faces.component.MessageTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Render a single message for a specific component.</p><p>Set-up for Rendering</p><ul><p>Obtain the "summary" and "detail" properties from
                  <code>UIMessage</code> component.  If not present, keep the
                  empty string as the value, respectively.  Obtain the first
                  <code>FacesMessage</code> to render from the component, using
                  the "for" property of the <code>UIMessage</code>.  This will be
                  the only message we render.  Obtain the severity style for this
                  message.  If the severity of the message is
                  <code>FacesMessage.SEVERITY_INFO</code>, the severity style
                  comes from the value of the "infoStyle" attribute.  If the
                  severity of the message is
                  <code>FacesMessage.SEVERITY_WARN</code>, the severity style
                  comes from the value of the "warnStyle" attribute, and so on for
                  each of the severities, <code>INFO, WARN, ERROR</code> and
                  <code>FATAL</code>.  The same rules apply for obtaining the
                  severity style class, but instead of "infoStyle, warnStyle", etc
                  use "infoClass, warnClass", etc.  Obtain the "style",
                  "styleClass" and "layout" attributes from the
                  <code>UIMessage</code> component.  If we have a "style"
                  attribute and a severity style attribute, use the severity style
                  attribute as the value of the "style" attribute.  If we have no
                  "style" attribute, but do have a severity style, use the
                  severity style as the value of the "style" attribute.  The same
                  precedence rules apply for the style class.</p></ul><p>Rendering</p><ul><p>For the message renderer, we only render
                one row, for the first message.  For the messages renderer, we
                render as many rows as we have messages.  If either of the "style"
                or "styleClass" attributes has a non-null value (as determined
                above), render a "span" element, outputting the value of the
                "style" attribute as the the value of the "style" attribute, and
                outputting the value of the "styleClass" attribute as the value of
                the "class" attribute on the "span" element.  If the
                <code>UIMessage</code> has a "tooltip" attribute with the value of
                "true", and the <code>UIMessage</code> has "showSummary" and
                "showDetail" properties with the value "true", if we haven't
                already written out the "span", output the "summary" as the value
                of the "title" attribute on the "span".  If we haven't already
                written out a "title" attribute, and "showSummary" is true, output
                the summary.  If "showDetail" is true, output the detail.  Close
                out the span if necessary.</p></ul>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Direction indication for text that does not inherit
        directionality. Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>errorClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style class to apply to any message with a severity class of "ERROR".
		<br/>The default class rendered as <b>iceMsgError</b>. 
      ]]></description>
    </attribute>

    <attribute>
      <name>errorStyle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to apply to any message with a severity class of "ERROR". 
      ]]></description>
    </attribute>

    <attribute>
      <name>fatalClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style class to apply to any message with a severity class of "FATAL".
		<br/>The default class rendered as <b>iceMsgFatal</b>.  
      ]]></description>
    </attribute>

    <attribute>
      <name>fatalStyle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        		CSS style(s) to apply to any message with a severity class of "FATAL".  
      ]]></description>
    </attribute>

    <attribute>
      <name>for</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Client identifier of the component for which to display messages.  
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>infoClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style class to apply to any message with a severity class of "INFO".
		<br/>The default class rendered as <b>iceMsgInfo</b>. 
      ]]></description>
    </attribute>

    <attribute>
      <name>infoStyle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to apply to any message with a severity class of "INFO".  
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code describing the language used in the generated markup for
        this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>showDetail</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating whether the detail portion of displayed messages should 
		be included. Default value is "true".    
      ]]></description>
    </attribute>

    <attribute>
      <name>showSummary</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating whether the summary portion of displayed messages should
		be included. Default value is "false".   
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>
		Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value must be passed through as the "class" 
		attribute on generated markup.<br/>
		The default class rendered as <b>iceMsg</b>. 
		</p> 
        <ul>
          <li>iceMsg</li>
          <li>iceMsgError</li>
          <li>iceMsgFatal</li>
          <li>iceMsgInfo</li>
          <li>iceMsgWarn</li>
        </ul>
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>tooltip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating whether the detail portion of the message should be
		displayed as a tooltip.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

    <attribute>
      <name>warnClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style class to apply to any message with a severity class of "WARN".
		<br/>The default class rendered as <b>iceMsgWarn</b>.
      ]]></description>
    </attribute>

    <attribute>
      <name>warnStyle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to apply to any message with a severity class of "WARN".  
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>messages</name>
    <tag-class>com.icesoft.faces.component.MessagesTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The same as for the Message renderer, but output all the
               messages.  If the value of the "layout" attribute is "table",
               render nested "table", "tr", and "td" elements, in that order,
               otherwise, don't render the table.  The component is a
               <code>UIMessages</code>, and there is no "for" attribute.
               Therefore, use either <code>null</code> to obtain the messages from
               the <code>FacesContext</code> or the empty string if the components
               "globalOnly" property is <code>true</code>.  If the layout was
               "table" close out the table elements.  </p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Direction indication for text that does not inherit
        directionality. Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>errorClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style class to apply to any message with a severity class of "ERROR".
		<br/>The default class rendered as <b>iceMsgsError</b>. 
      ]]></description>
    </attribute>

    <attribute>
      <name>errorStyle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to apply to any message with a severity class of "ERROR". 
      ]]></description>
    </attribute>

    <attribute>
      <name>fatalClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style class to apply to any message with a severity class of "FATAL".
		<br/>The default class rendered as <b>iceMsgsFatal</b>.  
      ]]></description>
    </attribute>

    <attribute>
      <name>fatalStyle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        		CSS style(s) to apply to any message with a severity class of "FATAL".  
      ]]></description>
    </attribute>

    <attribute>
      <name>globalOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that only global messages (that is, messages not 
		associated with any client identifier) are to be displayed. Default 
		value is "false".  
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>infoClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style class to apply to any message with a severity class of "INFO".
		<br/>The default class rendered as <b>iceMsgsInfo</b>. 
      ]]></description>
    </attribute>

    <attribute>
      <name>infoStyle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to apply to any message with a severity class of "INFO".  
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code describing the language used in the generated markup for
        this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>layout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			The type of layout markup to use when rendering error messages. 
			Valid values are "table" (an HTML table) and "list" (an HTML list). 
			If not specified, the default value is "list".
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>showDetail</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating whether the detail portion of displayed messages should 
		be included. Default value is "false".    
      ]]></description>
    </attribute>

    <attribute>
      <name>showSummary</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating whether the summary portion of displayed messages should
		be included. Default value is "true".   
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>
		Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value must be passed through as the "class" 
		attribute on generated markup.<br/>
		The default class rendered as <b>iceMsgs</b>. 
		</p> 
        <ul>
          <li>iceMsgs</li>
          <li>iceMsgsError</li>
          <li>iceMsgsFatal</li>
          <li>iceMsgsInfo</li>
          <li>iceMsgsWarn</li>
        </ul>
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>tooltip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating whether the detail portion of the message should be
		displayed as a tooltip.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

    <attribute>
      <name>warnClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style class to apply to any message with a severity class of "WARN".
		<br/>The default class rendered as <b>iceMsgsWarn</b>.
      ]]></description>
    </attribute>

    <attribute>
      <name>warnStyle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to apply to any message with a severity class of "WARN".  
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>outputFormat</name>
    <tag-class>com.icesoft.faces.component.OutputFormatTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Render parameterized text.  Obtain the <code>style</code>
                and <code>styleClass</code> attributees from this component.  If either
                are present, render a "span" element.  Output the <code>styleClass</code>
                attribute (if present) as the value of the <code>class</code> attribute.
                Output the <code>style</code> attribute as the value of the
                <code>style</code> attribute.  Accrue a list of the values of all
                child <code>UIParameter</code> components of this component.  If there
                are one or more accumulated parameter values, convert the list of
                parameter values to an <code>Object</code> array, call
                <code>MessageFormat.format()</code>, passing the <code>value</code>
                of this component as the first argument, and the array of parameter
                values as the second argument, and render the result.  Otherwise,
                render the <code>value</code> of this component unmodified.</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Direction indication for text that does not inherit
        directionality. Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>escape</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that characters that are sensitive in HTML and XML 
		markup must be escaped. This flag is set to "true" by default.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code describing the language used in the generated markup for
        this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value is passed through as the "class" 
		attribute on generated markup.<br/>
		The base name for all style classes. Default value is <b>iceOutFrmt</b>.
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The current value of this component.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>outputLabel</name>
    <tag-class>com.icesoft.faces.component.OutputLabelTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>  Renders an HTML "label" element.  Render the current value
                of the component as label text if it is specified. If a "for" attribute is
                specified, find the component specified by the value of the "for"
                attribute, and render its client id as the value of the "for" attribute.
                If "styleClass" attribute is specified, render its value as the value
                of the "class" attribute.</p>
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>for</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	     Client identifier of the component for which this element is a label. 
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value is passed through as the "class" 
		attribute on generated markup.
		The base name for all style classes. Default value is <b>iceOutLbl</b>.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The current value of this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>outputLink</name>
    <tag-class>com.icesoft.faces.component.OutputLinkTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      Render an HTML "a" anchor element.  The value of the
                component is rendered as the value of the "href" attribute.  Any
                child UIParameter components are appended to the String to be
                output as the value of the "href" attribute as query parameters
                before rendering.  The entire "href" string must be passed througha call to the <code>encodeResourceURL()</code> method of the
                <code>ExternalContext</code>.  The name of the UIParameter goes on
                the left hand side, and the value of the UIParameter on the right
                hand side.  The name and the value must be URLEncoded.  Each
                UIParameter instance is separated by an ampersand, as dictated in
                the URL spec.  If the "styleClass" attribute is specified, render
                its value as the value of the "class" attribute.
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>charset</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			The character encoding of the resource designated by this hyperlink.
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>coords</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The position and shape of the hot spot on the screen (for use in 
		client-side image maps).
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>hreflang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The language code of the resource designated by this hyperlink.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>rel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The relationship from the current document to the anchor specified by 
		this hyperlink. The value of this attribute is a space-separated list 
		of link types.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>rev</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		A reverse link from the anchor specified by this hyperlink to the 
		current document. The value of this attribute is a space-separated list 
		of link types.
      ]]></description>
    </attribute>

    <attribute>
      <name>shape</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The shape of the hot spot on the screen (for use in client-side image 
		maps). Valid values are: default (entire region); rect (rectangular 
		region); circle (circular region); and poly (polygonal region).
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value is passed through as the "class" 
		attribute on generated markup.
		The base name for all style classes. Default value is <b>iceOutLnk</b>
		if enabled and <b>iceOutLnk-dis</b> if disabled.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Name of a frame where the resource retrieved via this hyperlink is to 
		be displayed.
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The content type of the resource designated by this hyperlink.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The current value of this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>outputText</name>
    <tag-class>com.icesoft.faces.component.OutputTextTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
		If the "styleClass" or "style" attributes are present, render a
		"span" element. If the "styleClass" attribute is present, render
		its value as the value of the "class" attribute. If the "style"
		attribute is present, pass it thru. If the "escape" attribute is
		not present, or it is present and its value is "true" all angle
		brackets should be converted to the ampersand xx semicolon
		syntax when rendering the value of the "value" attribute as the
		value of the component. If the "escape" attribute is present and
		is "false" the value of the component should be rendered as text
		without escaping.
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Direction indication for text that does not inherit
        directionality. Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>escape</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that characters that are sensitive in HTML and XML 
		markup must be escaped. This flag is set to "true" by default.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code describing the language used in the generated markup for
        this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>nospan</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating no span tag rendered for text. Default is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value is passed through as the "class" 
		attribute on generated markup.
		The base name for all style classes. Default value is <b>iceOutTxt</b>.
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The current value of this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelGrid</name>
    <tag-class>com.icesoft.faces.component.PanelGridTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      Renders an HTML "table" element, conforming to the
          rules in the HTML 401 specification.  If the "styleClass"
          attribute is specified, render its value as the value of the
          "class" attribute.  Render the pass-through attributes in the
          table below.  Render the "header" facet, if present, inside of
          "thead", "tr", and "th" elements, nested in that order.  If the
          "headerClass" attribute is specified, render its value as the value
          of the "class" attribute on the "th" element.  Render "colgroup"
          as the value of the "scope" attribute.  Render the value of the
          "columns" attribute as the value of the "colspan" attribute on the
          "th" element.  Render the "footer" facet if present, using similar
          logic to the rendering of the "header", but replacing "thead" with
          "tfoot", "th" with "td", and "headerClass" with "footerClass".
          Render the children of the <code>UIPanel</code> component inside
          of a "tbody" element.  Render the children based on the value of
          the "columns" attribute, creating a new row each time a "columns"
          worth of children have been rendered.  Each child is rendered
          inside of a "td" element.  If a child has "rendered==false" it is
          not rendered, and the column counter must not be incremented.
    ]]></description>

    <attribute>
      <name>bgcolor</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Name or code of the background color for this table.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>border</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Width (in pixels) of the border to be drawn around this table.
      ]]></description>
    </attribute>

    <attribute>
      <name>cellpadding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Definition of how much space the user agent should leave between the 
        border of each cell and its contents.
      ]]></description>
    </attribute>

    <attribute>
      <name>cellspacing</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Definition of how much space the user agent should leave between the 
        left side of the table and the leftmost column, the top of the table 
        and the top of the top side of the topmost row, and so on for the right 
        and bottom of the table. It also specifies the amount of space to leave 
        between cells.
      ]]></description>
    </attribute>

    <attribute>
      <name>columnClasses</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>
        Comma-delimited list of CSS style classes that will be applied to the 
        columns of this table. A space separated list of classes may also be 
        specified for any individual column. If the number of elements in this 
        list is less than the number of columns specified in the "columns" 
        attribute, no "class" attribute is output for each column greater than 
        the number of elements in the list. If the number of elements in the 
        list is greater than the number of columns specified in the "columns" 
        attribute, the elements at the posisiton in the list after the value 
        of the "columns" attribute are ignored.	
        </p>
        <p>
 		The default column classes would be rendered as : <b>icePnlGrdCol1, 
 		icePnlGrdCol2 </b>alternatively
        </p>		
      ]]></description>
    </attribute>

    <attribute>
      <name>columns</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Direction indication for text that does not inherit directionality.
          Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>footerClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>    
		Space-separated list of CSS style class(es) that will be applied to any
		footer generated for this table.
		<br/>
		The default footer class would be rendered as <b>icePnlGrdFtr</b>.
		</p>		
      ]]></description>
    </attribute>

    <attribute>
      <name>frame</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code specifying which sides of the frame surrounding this table will be 
        visible. Valid values are: none (no sides, default value); above 
        (top side only); below (bottom side only); hsides (top and bottom sides 
        only); vsides (right and left sides only); lhs (left hand side only); 
        rhs (right hand side only); box (all four sides); and border (all four 
        sides).			
      ]]></description>
    </attribute>

    <attribute>
      <name>headerClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>  
        Space-separated list of CSS style class(es) that will be applied to any 
        header generated for this table.	
        <br/>
        	The default header class would be rendered as <b>icePnlGrdHdr</b>.	
        </p>		
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>rowClasses</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>      
        Comma-delimited list of CSS style classes that will be applied to the 
        rows of this table. A space separated list of classes may also be 
        specified for any individual row. Thes styles are applied, in turn, 
        to each row in the table. For example, if the list has two elements, 
        the first style class in the list is applied to the first row, the 
        second to the second row, the first to the third row, the second to 
        the fourth row, etc. In other words, we keep iterating through the 
        list until we reach the end, and then we start at the beginning again.
        <br/>	
        The default classes rendered as <b>icePnlGrdRow1, icePnlGrdRow2</b> 
        alternatively.
        </p>		
      ]]></description>
    </attribute>

    <attribute>
      <name>rules</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code specifying which rules will appear between cells within 
        this table. Valid values are: none (no rules, default value); 
        groups (between row groups); rows (between rows only); cols 
        (between columns only); and all (between all rows and columns).
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
             <p>
              Space-separated list of CSS style class(es) to be applied when this
              element is rendered. This value must be passed through as the 
              "class" attribute on generated markup.<br/>
              <p>Defines the base class name for all style classes. Default value is <b>icePnlGrd</b></p>
              <ul>
                <li>icePnlGrd</li>
                <li>icePnlGrdHdr</li>
                <li>icePnlGrdFtr</li>
                <li>icePnlGrdRow1</li>
                <li>icePnlGrdRow2</li>
                <li>icePnlGrdCol1</li>
                <li>icePnlGrdCol2</li>
              </ul>              
  		 </p>                   
      ]]></description>
    </attribute>

    <attribute>
      <name>summary</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Summary of this table's purpose and structure, for user 
        agents rendering to non-visual media such as speech and Braille.
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Width of the entire table, for visual user agents.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelGroup</name>
    <tag-class>com.icesoft.faces.component.PanelGroupTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The panelGroup component is intended for use in situations when only one UIComponent child can
          be nested, such as in the case of facets. The panelGroup component renders a "div" element around it's child
          components, outputting the value of the "style" attribute as the value of the "style" attribute, and the
          value of the "styleClass" attribute as the value of the "class" attribute. </p>
          <p>The panelGroup can also provide Drag & Drop functionality to it's child components. See the Drag & Drop
          documentation details.</p>
          <p>The panelGroup component can also be used to apply a single Effect (Fade, Show, etc.) to a set of
          child-components by adding the components to the panelGroup and specifying the effect on the panelGroup
          "effect" attribute.</p>
          <b>Note:</b> The "position" property of the container div must need to be set to the "relative", if its "overflow" 
          property of the css is set to "auto" or "scroll" and all the draggable panelGroups inside the container div
          must be using the dragOptions="dragGhost".          
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>contextValue</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		A means of uniquely identifying this component, from the 
		data model's perspective. For example, if this were on a 
		dataTable's cell, then it would encapsulate some means of 
		identifying the row and the column.
      ]]></description>
    </attribute>

    <attribute>
      <name>dragListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The dragListener specifies a method on a backing bean that will
		accept DnDEvents. This value must be a method binding
		expression.
      ]]></description>
    </attribute>

    <attribute>
      <name>dragMask</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Drag mask is used to prevent drag events from propagating to the
		server. For example if your backing bean is not interested in
		HOVER_START events then adding hover_start to the mask will stop
		the event from being sent. Multiple values are specified in a
		comma separated list. Possible values are. dragging,
		drag_cancel,dropped,hover_start,hover_end
      ]]></description>
    </attribute>

    <attribute>
      <name>dragOptions</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Optional effects for draggable panels. List in a coma seperated
		string. (revert,ghosting,solid) revert - When a draggable is
		dropped the draggable will move back to it's starting position.
		ghosting - When a draggable is dragged a ghost copy is left in
		the original position. solid - Do not make transparent when
		dragging.
      ]]></description>
    </attribute>

    <attribute>
      <name>dragValue</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The drop value of this panel, for use in DnDEvents. This value
		can be a string or a value binding expression.
      ]]></description>
    </attribute>

    <attribute>
      <name>draggable</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		When set to 'true' this panel is draggable. The user will be
		able to drag the panel to any position on the page. Note: all
		Draggable panels must be contained in a form.
      ]]></description>
    </attribute>

    <attribute>
      <name>dropListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The dropListener specifies a method on a backing bean that will
		accept DnDEvents. This value must be a method binding
		expression. This method will be called when a droppable is
		dropped or hovered on this panel unless masked.
      ]]></description>
    </attribute>

    <attribute>
      <name>dropMask</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Drop mask is used to prevent drop events from propagating to the
		server. For example if your backing bean is not interested in
		HOVER_START events then adding hover_start to the mask will stop
		the event from being sent. Multiple values are specified in a
		comma separated list. Possible values are. dropped,hover_start
      ]]></description>
    </attribute>

    <attribute>
      <name>dropTarget</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		When set to true this panel is a dropTarget for draggable
		panels. Drop targets detect when a draggable has been dropped on
		a specific region of the page. Note: all Drop Target panels must
		be contained in a form.
      ]]></description>
    </attribute>

    <attribute>
      <name>dropTargetScrollerId</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Id of scrollable div containing drop target.
    Not needed if drop target is not in a scrollable div.
      ]]></description>
    </attribute>

    <attribute>
      <name>dropValue</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The drop value of this panel, for use in DnDEvents. This value can 
		be a string or a value binding expression. 
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>hoverclass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Hover class
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>menuPopup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Specify the id of the menuPopup which should show when the 
        user context-clicks on this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>panelTooltip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Hover class
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedStyle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      ]]></description>
    </attribute>

    <attribute>
      <name>scrollHeight</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Height for scrollable panel. You must need to define the measurement unit without any space (e.g.) <br/>
        &lt;ice:panelGroup scrollHeight="50em" &gt; <br/> or <br/>
        &lt;ice:panelGroup scrollHeight="50px" &gt; <br/>
      ]]></description>
    </attribute>

    <attribute>
      <name>scrollWidth</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Width for scrollable panel. You must need to define the measurement unit without any space (e.g.) <br/>
        &lt;ice:panelGroup scrollWidth="50em" &gt; <br/> or <br/>
        &lt;ice:panelGroup scrollWidth="50px" &gt; <br/>
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value is passed through as the "class" 
		attribute on generated markup.
		The base name for all style classes. Default value is <b>icePnlGrp</b>.
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>radio</name>
    <tag-class>com.icesoft.faces.component.RadioTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Render a radio button for the selectOneRadio component
		  when the layout of the selectOneRadio component is "spread".</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>for</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        ID of the selectOneRadio component to which this radio button belongs.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>index</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Index of the SelectItem mapped to this radio button, starting with zero.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>selectBooleanCheckbox</name>
    <tag-class>com.icesoft.faces.component.SelectBooleanCheckboxTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Renders an HTML "input" element of type "checkbox".</p><p>Decode Behavior</p><ul><p>Obtain the <code>Map</code> from the "requestParameterMap"
          property of the <code>ExternalContext</code>.  If there is no
          entry in the <code>Map</code> for the "clientId" of this
          component, pass "false" to the <code>setSubmittedValue()</code>
          method of the component, which must be an instance of
          <code>EditableValueHolder</code>.  If there is an entry, and its
          value is equal, ignoring case and without quotes, to any of the
          Strings: "on", "yes" or "true" pass true to the
          <code>setSubmittedValue()</code> method of the component.</p></ul><p>Encode Behavior</p><ul><p>
          Render the clientId of the component as the value of the "name"
          attribute.  If the current value of the component is "true",
          output the "checked" attribute.  If the "styleClass" attribute is
          specified, render its value as the value of the "class"
          attribute.</p></ul>
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>autocomplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onchange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus and its value 
		has been modified since gaining focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onselect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Javascript code executed when text within this
          element is selected by the user.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>readonly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that this component will prohibit changes by the user. 
		The element may receive focus unless it has also been disabled. This
        attribute is valid for input types "text" and "password" only. It is
        non-functional for other input types like "radio" or "checkbox".
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that the user is required to provide a submitted value 
		for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         <p>The base name for all style classes. Default is 
         <b>iceSelBoolChkbx</b> if enabled and <b>iceSelBoolChkbx-dis</b> 
         if disabled.
         </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a validator method that will be called 
		during Process Validations to perform correctness checks on the value 
		of this component. The expression must evaluate to a public method that 
		takes FacesContext, UIComponent, and Object parameters, with a return 
		type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>The current value of this component.</p>
        <p>All UIInput derived UIComponents, that are placed within a UIData 
        container, such as a dataTable or panelSeries, should have their 
        <i>value</i> attribute bound to a bean property via a 
        ValueBinding/ValueExpression, since otherwise the UIData container 
        will not keep their successfully validated state, which can cause 
        the component to fail to function properly.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a value change listener method that will be 
		notified when a new value has been set for this input component. The 
		expression must evaluate to a public method that takes a 
		ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>selectManyCheckbox</name>
    <tag-class>com.icesoft.faces.component.SelectManyCheckboxTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Render an HTML checkbox list.</p><p><a name="decode">Decode Behavior</a></p><ul><p>See the <a href="javax.faces.SelectManyjavax.faces.Listbox.html#decodeMany">"Decode
          Behavior for UISelectMany Components"</a> section.</p></ul><p>Encode Behavior</p><ul><p>Render a "table" element.  If the "styleClass" is specified, render the 
          value of the "styleClass" attribute as the value of the "class" attribute 
          on the "table" element. If the "style", "border" attributes are specified,
          pass them thru.  If the "layout" attribute is specified, and its
          value is "spread", let the checkbox tag do the rendering.
          If the "layout" attribute is specified, and its
          value is "pageDirection", render the children elements vertically,
          otherwise horizontally, in the table.  If any of the children are
          an instance of SelectItemGroup, render them as a nested table.
          Each of the children are ultimately rendered as follows.  Render
          a "label" element. Inside of the "label", render an "input" element
          of "type" "checkbox" for each child component.  As an exception to
          the general rules about how to handle the "id" attribute, render it
          as an attribute on the outer "table" element, the value of which is the 
          <code>clientId</code> of the component per the rules at the beginning 
          of this specification.The "id" attribute must not be output on each "input" 
          element. The value of the current SelectItem is rendered as the value of
          the "value" attribute.  If the value of the enclosing UISelectMany
          matches the current value, render "checked" as the value of the
          "checked" attribute.  If the current SelectItem.isDisabled()
          returns true, render "disabled" as the value of the "disabled"
          attribute.  Close out the "input" element and render the return
          value from SelectItem.getLabel().  Close out the "label" element
          and any other nested elements.  See the <a href="javax.faces.SelectManyjavax.faces.Listbox.html#options">"Rendering
          the option elements" </a> specification for
          <code>ListboxRenderer</code> for more detail on how to render the
          "option" elements in this renderer.</p></ul>
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>autocomplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>border</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>disabledClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>layout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Orientation of the options list to be created. Valid values are "pageDirection" (list is laid out vertically),
    or "lineDirection" (list is laid out horizontally), or spread (list is laid out by checkbox tags).
    If not specified, the default value is "lineDirection".
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onchange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus and its value 
		has been modified since gaining focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onselect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Javascript code executed when text within this
          element is selected by the user.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>readonly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that this component will prohibit changes by the user. 
		The element may receive focus unless it has also been disabled. This
        attribute is valid for input types "text" and "password" only. It is
        non-functional for other input types like "radio" or "checkbox".
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that the user is required to provide a submitted value 
		for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         <p>The base name for all style classes. Default is 
         <b>iceSelMnyCb</b> if enabled and <b>iceSelMnyCb-dis</b> 
         if disabled.
         </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a validator method that will be called 
		during Process Validations to perform correctness checks on the value 
		of this component. The expression must evaluate to a public method that 
		takes FacesContext, UIComponent, and Object parameters, with a return 
		type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>The current value of this component.</p>
        <p>All UIInput derived UIComponents, that are placed within a UIData 
        container, such as a dataTable or panelSeries, should have their 
        <i>value</i> attribute bound to a bean property via a 
        ValueBinding/ValueExpression, since otherwise the UIData container 
        will not keep their successfully validated state, which can cause 
        the component to fail to function properly.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a value change listener method that will be 
		notified when a new value has been set for this input component. The 
		expression must evaluate to a public method that takes a 
		ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>selectManyListbox</name>
    <tag-class>com.icesoft.faces.component.SelectManyListboxTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Render an HTML option list.</p><p>Decode Behavior</p><p>This section documents the decode behavior for all renderers
          that handle <code>UISelectMany</code> or <code>UISelectOne</code>
          components.</p><ul><p><a name="decodeMany">Decode Behavior for
          <code>UISelectMany</code> components</a></p><ul><p>Obtain the <code>Map</code> from the
            "requestParameterValuesMap" property of the
            <code>ExternalContext</code>.  If the <code>Map</code> contains
            an entry for the "clientId" of the component, pass the value of
            the entry, cast to a <code>String []</code>, to the
            <code>setSubmittedValue()</code> method of the component, which
            must be an <code>EditableValueHolder</code>.  If the
            <code>Map</code> does not contain an entry, create an empty
            <code>String</code> array and call
            <code>setSubmittedValue()</code> with it.</p></ul><p><a name="decodeOne">Decode Behavior for
          <code>UISelectOne</code> components</a></p><ul><p>Obtain the <code>Map</code> from the "requestParameterMap"
          property of the <code>ExternalContext</code>.  If there is a
          <code>Map</code> entry for the "clientId" property of the
          component, pass it to the <code>setSubmittedValue()</code> method
          of the component.</p></ul><p>Encode Behavior</p><ul><p>Render an HTML "select" element. Render the clientId of
          the component as the value of the "name" attribute.  If the "styleClass" 
          attribute is specified, render its value as the value of the "class" 
          attribute on the "select" element.  If the component is a 
          <code>UISelectMany</code> instance, render "multiple" as the value of the 
          "multiple" attribute.  If the "size" attribute is specified, render its 
          value as the value of the "size" attribute.  Otherwise use the number of 
          items as the value of the "size" attribute.</p></ul><p><a name="option">Rendering the "option" elements</a></p><ul><p>The only valid children of this component are
          <code>UISelectItem</code> or <code>UISelectItems</code> instances.
          Iterate over the children of this component, and accrue a list of
          <code>javax.faces.model.SelectItem</code> instances.  If the
          current child is a <code>UISelectItem</code> create a
          <code>SelectItem</code>instance from its <code>itemValue,
          itemLabel</code> and <code>itemDescription</code> properties, add
          it to the list.  If the current child is a
          <code>UISelectItems</code> instance, call its
          <code>getValue()</code> method.  If the result is a
          <code>SelectItem</code> bean, add it to the list.  If the result
          is an array of <code>SelectItem</code> beans, add each one t othe
          list.  If the result is a <code>Collection</code> of
          <code>SelectItem</code> beans, add each one to the list.  If the
          result isa <code>Map</code>, create a <code>SelectItem</code> bean
          for each entry in the <code>Map</code> using the key as the label,
          the value as the value, and <code>null</code> as the description.
          Iterate over the list of <code>SelectItem</code> beans.  If the
          current element is a <code>SelectItemGroup</code>, render an
          "optgroup" element with a "label" attribute, the value of which is
          the "label" property from the current element, then call
          <code>getSelectItems()</code> and render each element as below.
          If the current element is not a <code>SelectItemGroup</code>,
          render an "option" element.  Follow the conversion rules in the
          spec to obtain a renderable <code>String</code> from the "value"
          property of the current element, render that as the value of the
          "value" atribute.  Now it is time to see if the current element is
          the selected value.  call its
          <code>getSubmittedValue()</code> method, casting the result to an
          <code>Object []</code>, otherwise the component must be a
          <code>UISelectOne</code> instance, call its
          <code>getSubmittedValue()</code> method and create an <code>Object
          []</code> around the result.  If the resultant array is non-null,
          we look in the array for a value that, when we pass the renderable
          value to its <code>equals()</code> method, it returns
          <code>true</code>, meaning the current element is selected.  If
          the resultant array is <code>null</code>, if the component is a
          <code>UISelectMany</code>, call its <code>getValue()</code>
          method.  If the result is a <code>List</code> obtain the values in
          the list as an array.  Otherwise, the component must be a
          <code>UISelectOne</code> instance.  Call its
          <code>getValue()</code> method, which must be an Object array.
          Look for an element in the resultant array that, 1. when we pass
          the renderable value to its <code>equals()</code> method, it
          returns <code>true</code> , or 2. if the renderable value is null,
          and there is a null element in the array, also conclude that the
          current element is selected.  Otherwise the current element is not
          selected.  Now, if the current value is selected, write out an
          HTML boolean property "selected".  If the current
          SelectItem.isDisabled() returns true, render "disabled" as the
          value of the "disabled" attribute.</p></ul></ul>
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>autocomplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>disabledClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onchange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus and its value 
		has been modified since gaining focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onselect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Javascript code executed when text within this
          element is selected by the user.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmitDelay</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        When partialSubmit=true, partialSubmitDelay is the number of 
        milliseconds before changes in selection will cause a partialSubmit 
        to occur. The intention being that when users use the keyboard to 
        navigate through potention options, to get to the intended option for 
        selection, that the rapid keypresses would not cause partialSubmits to 
        occur, for the interim selections, which slow down the process of 
        navigation. Default value is 300 milliseconds. To disable the delay,
        use -1.
      ]]></description>
    </attribute>

    <attribute>
      <name>readonly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that this component will prohibit changes by the user. 
		The element may receive focus unless it has also been disabled. This
        attribute is valid for input types "text" and "password" only. It is
        non-functional for other input types like "radio" or "checkbox".
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that the user is required to provide a submitted value 
		for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>size</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Number of available options to be shown at all times. If not specified, 
		all available options are shown.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         <p>The base name for all style classes. Default is 
         <b>iceSelMnyLb</b> if enabled and <b>iceSelMnyLb-dis</b> 
         if disabled.
         </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a validator method that will be called 
		during Process Validations to perform correctness checks on the value 
		of this component. The expression must evaluate to a public method that 
		takes FacesContext, UIComponent, and Object parameters, with a return 
		type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>The current value of this component.</p>
        <p>All UIInput derived UIComponents, that are placed within a UIData 
        container, such as a dataTable or panelSeries, should have their 
        <i>value</i> attribute bound to a bean property via a 
        ValueBinding/ValueExpression, since otherwise the UIData container 
        will not keep their successfully validated state, which can cause 
        the component to fail to function properly.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a value change listener method that will be 
		notified when a new value has been set for this input component. The 
		expression must evaluate to a public method that takes a 
		ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>selectManyMenu</name>
    <tag-class>com.icesoft.faces.component.SelectManyMenuTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Render an HTML option list.</p><p><a name="decode">Decode Behavior</a></p><ul><p>See the <a href="javax.faces.SelectManyjavax.faces.Listbox.html#decodeMany">"Decode
          Behavior for UISelectMany Components"</a> section.</p></ul><p>Encode Behavior</p><ul><p>Render an HTML "select" element.  Render the clientId of
          the component as the value of the "name" attribute.  If the "styleClass" 
          attribute is specified, render its value as the value of the "class" 
          attribute on the "select" element. If the component
          to be rendered is a UISelectMany, render "true" as the value of
          the "multiple" attribute.  Render "1" as the value of the "size"
          attribute.  See the <a href="javax.faces.SelectManyjavax.faces.Listbox.html#options">"Rendering the option
          elements" </a> specification for <code>ListboxRenderer</code> for
          more detail on how to render the "option" elements in this
          renderer.</p></ul>
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>autocomplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>disabledClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onchange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus and its value 
		has been modified since gaining focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onselect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Javascript code executed when text within this
          element is selected by the user.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmitDelay</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        When partialSubmit=true, partialSubmitDelay is the number of 
        milliseconds before changes in selection will cause a partialSubmit 
        to occur. The intention being that when users use the keyboard to 
        navigate through potention options, to get to the intended option for 
        selection, that the rapid keypresses would not cause partialSubmits to 
        occur, for the interim selections, which slow down the process of 
        navigation. Default value is 300 milliseconds. To disable the delay,
        use -1.
      ]]></description>
    </attribute>

    <attribute>
      <name>readonly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that this component will prohibit changes by the user. 
		The element may receive focus unless it has also been disabled. This
        attribute is valid for input types "text" and "password" only. It is
        non-functional for other input types like "radio" or "checkbox".
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that the user is required to provide a submitted value 
		for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         <p>The base name for all style classes. Default is 
         <b>iceSelMnyMnu</b> if enabled and <b>iceSelMnyMnu-dis</b> 
         if disabled.
         </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a validator method that will be called 
		during Process Validations to perform correctness checks on the value 
		of this component. The expression must evaluate to a public method that 
		takes FacesContext, UIComponent, and Object parameters, with a return 
		type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>The current value of this component.</p>
        <p>All UIInput derived UIComponents, that are placed within a UIData 
        container, such as a dataTable or panelSeries, should have their 
        <i>value</i> attribute bound to a bean property via a 
        ValueBinding/ValueExpression, since otherwise the UIData container 
        will not keep their successfully validated state, which can cause 
        the component to fail to function properly.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a value change listener method that will be 
		notified when a new value has been set for this input component. The 
		expression must evaluate to a public method that takes a 
		ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>selectOneListbox</name>
    <tag-class>com.icesoft.faces.component.SelectOneListboxTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Render an HTML option list.</p><p><a name="decode">Decode Behavior</a></p><ul><p>See the <a href="javax.faces.SelectManyjavax.faces.Listbox.html#decodeOne">"Decode
          Behavior for UISelectOne Components"</a> section.</p></ul><p>Encode Behavior</p><ul><p>Render an HTML "select" element.  Render the clientId of
          the component as the value of the "name" attribute.  If the "styleClass" 
          attribute is specified, render its value as the value of the "class" 
          attribute on the "select" element. If the component
          to be rendered is a UISelectMany, render "true" as the value of
          the "multiple" attribute.  If the "size" attribute is specified,
          render its value as the value of the "size" attribute.  Otherwise
          use the number of items as the value of the "size" attribute.  See
          the <a href="javax.faces.SelectManyjavax.faces.Listbox.html#options">"Rendering the option
          elements" </a> specification for <code>ListboxRenderer</code> for
          more detail on how to render the "option" elements in this
          renderer.</p></ul>
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>autocomplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>disabledClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onchange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus and its value 
		has been modified since gaining focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onselect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Javascript code executed when text within this
          element is selected by the user.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmitDelay</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        When partialSubmit=true, partialSubmitDelay is the number of 
        milliseconds before changes in selection will cause a partialSubmit 
        to occur. The intention being that when users use the keyboard to 
        navigate through potention options, to get to the intended option for 
        selection, that the rapid keypresses would not cause partialSubmits to 
        occur, for the interim selections, which slow down the process of 
        navigation. Default value is 300 milliseconds. To disable the delay,
        use -1.
      ]]></description>
    </attribute>

    <attribute>
      <name>readonly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that this component will prohibit changes by the user. 
		The element may receive focus unless it has also been disabled. This
        attribute is valid for input types "text" and "password" only. It is
        non-functional for other input types like "radio" or "checkbox".
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that the user is required to provide a submitted value 
		for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>size</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Number of available options to be shown at all times. If not specified, 
		all available options are shown.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         <p>The base name for all style classes. Default is 
         <b>iceSelOneLb</b> if enabled and <b>iceSelOneLb-dis</b> 
         if disabled.
         </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a validator method that will be called 
		during Process Validations to perform correctness checks on the value 
		of this component. The expression must evaluate to a public method that 
		takes FacesContext, UIComponent, and Object parameters, with a return 
		type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>The current value of this component.</p>
        <p>All UIInput derived UIComponents, that are placed within a UIData 
        container, such as a dataTable or panelSeries, should have their 
        <i>value</i> attribute bound to a bean property via a 
        ValueBinding/ValueExpression, since otherwise the UIData container 
        will not keep their successfully validated state, which can cause 
        the component to fail to function properly.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a value change listener method that will be 
		notified when a new value has been set for this input component. The 
		expression must evaluate to a public method that takes a 
		ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>selectOneMenu</name>
    <tag-class>com.icesoft.faces.component.SelectOneMenuTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Render an HTML option list.</p><p><a name="decode">Decode Behavior</a></p><ul><p>See the <a href="javax.faces.SelectManyjavax.faces.Listbox.html#decodeOne">"Decode
          Behavior for UISelectOne Components"</a> section.</p></ul><p>Encode Behavior</p><ul><p>Render an HTML "select" element.  Render the clientId of the
          component as the value of the "name" attribute.  If the
          "styleClass" attribute is specified, render its value as the value
          of the "class" attribute on the "select" element. If the component
          to be rendered is a UISelectMany, render "true" as the value of
          the "multiple" attribute.  Use the number of items as the value of
          the "size" attribute.  See the <a href="javax.faces.SelectManyjavax.faces.Listbox.html#options">"Rendering
          the option elements" </a> specification for
          <code>ListboxRenderer</code> for more detail on how to render the
          "option" elements in this renderer.</p></ul>
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>autocomplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>disabledClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onchange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus and its value 
		has been modified since gaining focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onselect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Javascript code executed when text within this
          element is selected by the user.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>readonly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that this component will prohibit changes by the user. 
		The element may receive focus unless it has also been disabled. This
        attribute is valid for input types "text" and "password" only. It is
        non-functional for other input types like "radio" or "checkbox".
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that the user is required to provide a submitted value 
		for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         <p>The base name for all style classes. Default is 
         <b>IceSelOneMnu</b> if enabled and <b>IceSelOneMnu-dis</b> 
         if disabled.
         </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a validator method that will be called 
		during Process Validations to perform correctness checks on the value 
		of this component. The expression must evaluate to a public method that 
		takes FacesContext, UIComponent, and Object parameters, with a return 
		type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>The current value of this component.</p>
        <p>All UIInput derived UIComponents, that are placed within a UIData 
        container, such as a dataTable or panelSeries, should have their 
        <i>value</i> attribute bound to a bean property via a 
        ValueBinding/ValueExpression, since otherwise the UIData container 
        will not keep their successfully validated state, which can cause 
        the component to fail to function properly.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a value change listener method that will be 
		notified when a new value has been set for this input component. The 
		expression must evaluate to a public method that takes a 
		ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>selectOneRadio</name>
    <tag-class>com.icesoft.faces.component.SelectOneRadioTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Render a set of html "input" elements of type
          "radio".</p><p><a name="decode">Decode Behavior</a></p><ul><p>See the <a href="javax.faces.SelectManyjavax.faces.Listbox.html#decodeOne">"Decode
          Behavior for UISelectOne Components"</a> section.</p></ul><p>Encode Behavior</p><ul><p>Render a "table" element. If the "styleClass" is specified, render the 
          value of the "styleClass" attribute as the value of the "class" attribute 
          on the "table" element. If the "style", "border" attributes are specified,
          pass them thru. If the "layout" attribute is specified, and its
          value is "spread", let the radio tag do the rendering.
          If the "layout" attribute is specified, and its
          value is "pageDirection", render the children elements
          vertically, otherwise horizontally, in the table.  If any of the
          children are an instance of SelectItemGroup, render them as a
          nested table.  Render a "label" element.  Each of the children are
          ultimately rendered as an "input" element of "type" "radio". As an
          exception to the general rules about how to handle the "id" attribute, 
          render it as an attribute on the outer "table" element, the value of which 
          is the <code>clientId</code> of the component per the rules at the 
          beginning  of this specification.  The "id" attribute must not be
          output on each "input" element.  Output the value of the "label"
          attribute of the <code>SelectItem</code> after the "input"
          element.  If the value of the currently rendered child is equal to
          the value of the parent UISelectOne, render an appropriate HTML
          boolean value indicating "checked" for the enclosing "input".  If
          the current SelectItem.isDisabled() returns true, render
          "disabled" as the value of the "disabled" attribute.  See the <a href="javax.faces.SelectManyjavax.faces.Listbox.html#options">"Rendering the option
          elements" </a> specification for <code>ListboxRenderer</code> for
          more detail on how to render the "option" elements in this
          renderer.  Close out the "label" element. </p></ul>
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>autocomplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>border</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Width (in pixels) of the border to be drawn
          around the table containing the options list.
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>disabledClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>layout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Orientation of the options list to be created. Valid values are "pageDirection" (list is laid out vertically),
    or "lineDirection" (list is laid out horizontally), or spread (list is laid out by radio tags).
    If not specified, the default value is "lineDirection".
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onchange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus and its value 
		has been modified since gaining focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onselect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Javascript code executed when text within this
          element is selected by the user.
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>readonly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that this component will prohibit changes by the user. 
		The element may receive focus unless it has also been disabled. This
        attribute is valid for input types "text" and "password" only. It is
        non-functional for other input types like "radio" or "checkbox".
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that the user is required to provide a submitted value 
		for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         <p>The base name for all style classes. Default is 
         <b>iceSelOneRb</b> if enabled and <b>iceSelOneRb-dis</b> 
         if disabled.
         </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a validator method that will be called 
		during Process Validations to perform correctness checks on the value 
		of this component. The expression must evaluate to a public method that 
		takes FacesContext, UIComponent, and Object parameters, with a return 
		type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>The current value of this component.</p>
        <p>All UIInput derived UIComponents, that are placed within a UIData 
        container, such as a dataTable or panelSeries, should have their 
        <i>value</i> attribute bound to a bean property via a 
        ValueBinding/ValueExpression, since otherwise the UIData container 
        will not keep their successfully validated state, which can cause 
        the component to fail to function properly.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a value change listener method that will be 
		notified when a new value has been set for this input component. The 
		expression must evaluate to a public method that takes a 
		ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>inputRichText</name>
    <tag-class>com.icesoft.faces.component.inputrichtext.InputRichTextTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
             <p>The ICEfaces inputRichText component uses the FCKEditor API to 
             provide JSF based rich text component.<br/>
             The "customConfigPath" attribute can be used to defined the custom 
             config.js where you can customize the FCKeditor including 
             the custom toolbar and the css.<p>
             The following steps are involved in creating the custom toolbar:
             <ol>
             <li>
             Create a config file under the webapp, defining the custom toolbar(e.g.)
             <u>js/config.js</u><br/>
             FCKConfig.ToolbarSets["MyToolbar"] = [['Bold','Italic', 'Underline'], ['Save']] ;
             </li>
             <li>
             Set the "toolbar" attribute on the inputRichText component to 
             define the custom toolbar name and set the "customConfigPath" attribute to
             reference the custom config.js.(e.g.) <br/>
             &lt;ice:inputRichText toolbar="MyToolbar"  customConfigPath="js/config.js"/&gt;
             </li>
             </ol>
<p >The following steps are involved in defining the custom CSS:</p>
<ol>
    <li>
        Copy the fck_editorarea.css from the FCKeditor distribution to your app and customize it(e.g.)
        <u>css/fck_editorarea.css</u><br/><br/>
    </li>
    <li>
        Create a config file under the webapp, overriding the "FCKConfig.EditorAreaCSS" property(e.g.)
        <u>js/config.js</u><br/>
        FCKConfig.EditorAreaCSS = 'http://'+ window.location.host +'/'+window.location.pathname.split("/")[1]+'/css/fck_editorarea.css' ;<br/><br/>
    </li>
    <li>
         Set the "customConfigPath" attribute to reference the custom config.js.(e.g.) <br/>
         &lt;ice:inputRichText customConfigPath="js/config.js"/&gt;
    </li>
</ol>             
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>customConfigPath</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
            This attribute defines the path of the custom config file, the path 
            is relative to the web app.
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Disable the component
      ]]></description>
    </attribute>

    <attribute>
      <name>for</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The for attribute references the id of the inputRichText which toolbarOnly attribute is set to "true".
      ]]></description>
    </attribute>

    <attribute>
      <name>height</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        height.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>language</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		<p>
        The support of multi-language can use the following 54 languages. (e.g.) To set the French language use language="fr"
        <ul>
        <li>Afrikaans (af)</li><li>Arabic (ar)</li><li>Basque (eu)</li><li>Bengali/Bangla (bn)</li><li>Bosnian (bs)</li><li>Bulgarian (bg)</li><li>Catalan (ca)</li><li>Chinese Simplified (zh-cn)</li><li>Chinese Traditional (zh)</li><li>Croatian (hr)</li><li>Czech (cs)</li><li>Danish (da)</li><li>Dutch (nl)</li><li>English (en)</li><li>English (Australia) (en-au)</li><li>English (Canadian) (en-ca)</li><li>English (United Kingdom) (en-uk)</li><li>Esperanto (eo)</li><li>Estonian (et)</li><li>Faroese (fo)</li><li>Finnish (fi)</li><li>French (fr)</li><li>Galician (gl)</li><li>German (de)</li><li>Greek (el)</li><li>Hebrew (he)</li><li>Hindi (hi)</li><li>Hungarian (hu)</li><li>Italian (it)</li><li>Japanese (ja)</li><li>Khmer (km)</li><li>Korean (ko)</li><li>Latvian (lv)</li><li>Lithuanian (lt)</li><li>Malay (ms)</li><li>Mongolian (mn)</li><li>Norwegian (no)</li><li>Norwegian Bokmal (nb)</li><li>Persian (fa)</li><li>Polish (pl)</li><li>Portuguese (Brazil) (pt-br)</li><li>Portuguese (Portugal) (pt)</li><li>Romanian (ro)</li><li>Russian (ru)</li><li>Serbian (Cyrillic) (sr)</li><li>Serbian (Latin) (sr-latn)</li><li>Slovak (sk)</li><li>Slovenian (sl)</li><li>Spanish (es)</li><li>Swedish (sv)</li><li>Thai (th)</li><li>Turkish (tr)</li><li>Ukrainian (uk)</li><li>Vietnamese (vi)</li>
        </ul>
		</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that the user is required to provide a submitted value 
		for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>saveOnSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        By default the data of the inputRichText will only be saved, when its 
        "save" button being clicked. Any other submit request will not save its
        data.
        In order to save its data on any submit request like inputText does, this 
        attribute can be set to true. 
      ]]></description>
    </attribute>

    <attribute>
      <name>skin</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>
        The following skins can be set to the component.
        <ul>
        <li> default </li>
        <li> office2003 </li>
        <li> silver </li>
        </ul>
        </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.
        <br/><br/>
        The base name for all style classes. Default value is iceInpRchTxt        
      ]]></description>
    </attribute>

    <attribute>
      <name>toolbar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        There are two valid values for this field and its case sensitive.
        <ul>
            <li> Default </li>
            <li> Basic </li>            
        </ul>
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>The current value of this component.</p>
        <p>All UIInput derived UIComponents, that are placed within a UIData 
        container, such as a dataTable or panelSeries, should have their 
        <i>value</i> attribute bound to a bean property via a 
        ValueBinding/ValueExpression, since otherwise the UIData container 
        will not keep their successfully validated state, which can cause 
        the component to fail to function properly.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Width.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>jsEventListener</name>
    <tag-class>com.icesoft.faces.component.jseventlistener.JSEventListenerTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
       <p>The jsEventListener component allows you to capture javascript 
          events and optionally sends a notification to server and fire an action 
          event.<p>
          <p>
          For example if you want to fire an action event in response of onchange event
          on the client. 
         <pre>
       &lt;ice:jsEventListener events="change"  actionListener="#{textFields.eventListener}"&gt; 
           &lt;h:inputText /&gt;
       &lt;/ice:jsEventListener&gt;
             </pre>
             </p>
             <p> 
              On server side you get the following parameters, that can helps to 
              evaluate further on server side.
              <br/>
          <ul>      
        <li>ice.event.target</li>
        <li>ice.event.captured</li>
        <li>ice.event.shift</li>
        <li>ice.event.keycode</li>
        <li>ice.event.type</li>
        <li>ice.focus</li>
        <li>ice.submit.partial</li>
        <li>ice.event.alt</li>
        <li>ice.event.ctrl</li>
        <li>ice.event.shift</li>
        <li>ice.event.meta</li>
        <li>ice.event.x</li>        
        <li>ice.event.y</li>   
        <li>ice.event.left</li>
        <li>ice.event.right</li>               
             </ul>      
         Note: Some of the above parameters are specific to the element type. 
         So first you will have to check if the patameter is available in request map.
         </p>
         <p>
         Another example to use html input buttons to fire an action event and 
         navigate to the page according to the choice. 
         <pre>   
    &lt;ice:jsEventListener events="click"  action="#{bean.eventAction}"&gt; 
        &lt;input type="button" id="continue" value="Continue"/&gt;
        &lt;input type="button" id="cancel" value="Cancel"/&gt;  
    &lt;/ice:jsEventListener&gt;	         

        public String eventAction() {
            Map parameter = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
            if ("continue".equals(parameter.get("ice.event.target"))) {
                return "continue";
            }else if ("cancel".equals(parameter.get("ice.event.target"))) {
                return "cancel";
            } 
            return "noaction";
        }
            </pre>
    <b>Note:</b> For above example navigation rule needs to be defined in faces-config.xml.
    </p>
    <p> 
    <b>Event Filtering:</b> <br/>
    In above examples events was not filtered and you don't want to capture event 
    like keydown without filtering it. To filter events you can defin a callback 
    using handler attribute on the component. Let say if you are interested
    in only ESC key and Shift + N key:
    <pre>
    &lt;ice:jsEventListener events="keydown" handler="keydownFilter" actionListener="#{bean.doSomthing}"&gt; 
        &lt;h:inputText /&gt;
    &lt;/ice:jsEventListener&gt; 
    <br/>
    //now lets define keydownFilter
    &lt;script&gt;
        //this handler will be invoked by the ICEFaces along with the event
        //wrapped in the prototype's event. To find out what methods 
        //available on event please see prototype event API. 
        function keydownFilter(event) {
            var ESC = 27;
            var N = 78;
            switch(event.keyCode) {
                case ESC:
                    //proceed and do a submit    
                    return true;
                case N:
                    if(event.shiftKey) {
                        //optionally stop bubbling if required
                        Event.stop(event);
                        //proceed and do a submit 
                        return true;
                    }   
            }
            //don't invoke a submit
            return false;
        }
     &lt;/script&gt;
    </pre>
    </p>
    You can capture more than one events using "," separated values (e.g)
    <pre>
    &lt;ice:jsEventListener events="keydown, keyup" handler="eventFilter" actionListener="#{bean.doSomthing}"> 
        &lt;h:inputText /&gt;
    &lt;/ice:jsEventListener> 
      </pre>
    As there is only one handler for both events, so you will have to check for 
    the event.type to distigushe between them or if you want to use a separate handlers you can use nested jsEventListener component (e.g.)
    <pre>
    &lt;ice:jsEventListener events="keydown" handler="keydownFilter" actionListener="#{bean.doSomthing}"&gt; 
        &lt;ice:jsEventListener events="keyup" handler="keyupFilter" actionListener="#{bean.doSomthing}"&gt;     
             &lt;h:inputText /&gt; 
         &lt;/ice:jsEventListener&gt;        
    &lt;/ice:jsEventListener&gt;     
    </pre>
    There can be many uses cases, please explore and let others know. <br/>
    <b>Note:</b> The ice:jsEventListener based on the event bubbling, so it can
    capture events as far as its children bubbling up the events.
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing the application action to invoke when
		this component is activated by the user. The expression must
		evaluate to a either a String or a public method that takes no
		parameters, and returns a String (the logical outcome) which is
		passed to the NavigationHandler for this application.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing an action listener method that will be 
		notified when this component is activated by the user. The expression 
		must evaluate to a public method that takes an ActionEvent parameter, 
		with a return type of void. 
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>events</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        List of "," separated events (e.g) events="click[, keydown, ...]".
      ]]></description>
    </attribute>

    <attribute>
      <name>handler</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Its an optional attribute. Can be used to define a callback handlers 
        for the events listed in "events" attribute(e.g.) <br/>
        &lt;ice:jsEventListener events="click" handler="myClickHandler"&gt;<br/> 
        .... <br/><br/>       

        &lt;ice:jsEventListener events="click, keydown" handler="myHandler"&gt;<br/>
        ....
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Space-separated list of CSS style class(es) to be applied when this 
        element is rendered. This value must be passed through as the "class" 
        attribute on generated markup. <br/>
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The current value of this component.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>loadBundle</name>
    <tag-class>com.icesoft.faces.component.loadbundle.LoadBundleTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p> The application of the ice:loadBundle is same as the f:loadBundle
		but it allows to change the messages dynamically in two ways:
		<ul>
		  <li>Changing the basename using value binging allows to load new message base </li>
          <li>Changing the locale causes the loadBundle component to reload messages for the specified locale </li>
		</ul>
		</p>
    ]]></description>

    <attribute>
      <name>basename</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Base name of the resource bundle to be loaded.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The current value of this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>var</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Name of a request scope attribute under which the resource bundle will be exposed.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>menuBar</name>
    <tag-class>com.icesoft.faces.component.menubar.MenuBarTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
        <p>The menuBar component provides a robust menu system that supports:</p>
        <ol>
           <li>Nested child menuItem and menuItemSeparator components. Support for menuItemCheckbox and menuItemRadio
           components are planned for a future release.</li>

           <li>Horizontal (default) and Vertical menu orientations. Defines whether the submenus of the top-level
           menu items appear beside or below the top-level menu items.</li>

           <li> Definition of the heirarchy of menu items and their submenus in one of two ways:
                <ul>
                   <li>by using a binding to a bean method that returns a (potentially) dynamic heirarchy of menu items.</li>
                   <li>by statically defining the heirarchy in the JSPX page.</li>
                </ul>
           </li>

           <li>The action attribute of the contained menuItem tags or instances can be defined to indicate a string or
           a backing bean method that can be used in application navigation.</li>

           <li>The actionListener attribute of the contained menuItem tags or instances can be defined to indicate an
           actionListener that resides in a backing bean.</li>
        </ol>
        <p>See the menuItem component's description for more relevant information.</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>displayOnClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
        By default the sub menus are being displayed on the hover event. which
        can be replaced with the click event by setting this attribute to true.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>imageDir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Set directory for location of the tree images.
            Default directory is /xmlhttp/css/xp/css-images/ which is include in the icefaces.jar.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>keyboardNavigationEnabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Enables keyboard support, default value is true.
      ]]></description>
    </attribute>

    <attribute>
      <name>noIcons</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        If true, this component will not rendered icons and icon spacers in menuItems.
        The default is false. By default icons are rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>orientation</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines the orientation of the top-level menu items, whether they 
        are layed out in a horizontal or vertical fashion. When horizontal,
        sub menus appear below, and when vertical they appear to the side. 
        The default is horizontal.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
            Flag indicating whether or not this component should be rendered
            (during Render Response Phase), or processed on any subsequent form
            submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
              Space-separated list of CSS style class(es) to be applied when this
              element is rendered. This value must be passed through as the 
              "class" attribute on generated markup.<br/>
              The base name for all style classes. Default value is <b>iceMnuBar</b></p>
              if enabled + horizontal
              <ul>
                <li>iceMnuBar</li>
                <li>iceMnuBarItem</li>
                <li>iceMnuBarItemLabel</li>
                <li>iceMnuBarItemImage</li>                
                <li>iceMnuBarSubMenu</li>             <li>iceMnuBarSubMenuInd</li>
              </ul>
              if enabled + vertical
              <ul>                
                <li>iceMnuBarVrt</li>
                <li>iceMnuBarVrtItem</li>
                <li>iceMnuBarVrtItemLabel</li>
                <li>iceMnuBarVrtItemImage</li>
                <li>iceMnuBarVrtSubMenu</li>
                <li>iceMnuBarVrtSubMenuInd</li>
              </ul>   
              if disabled + horizontal
              <ul>
                <li>iceMnuBar-dis</li>
                <li>iceMnuBarItem-dis</li>
                <li>iceMnuBarItemLabel-dis</li>
                <li>iceMnuBarItemImage-dis</li>
                <li>iceMnuBarSubMenu-dis</li>
                <li>iceMnuBarSubMenuInd-dis</li>
              </ul>
              if disabled + vertical
              <ul>                
                <li>iceMnuBarVrt-dis</li>
                <li>iceMnuBarVrtItem-dis</li>
                <li>iceMnuBarVrtItemLabel-dis</li>
                <li>iceMnuBarVrtItemImage-dis</li>                
                <li>iceMnuBarVrtSubMenu-dis</li>
                <li>iceMnuBarVrtSubMenuInd-dis</li>
              </ul>                          
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The current value of this component.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>menuItem</name>
    <tag-class>com.icesoft.faces.component.menubar.MenuItemTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
            MenuItem components are the menu items contained by a menuBar. The value attribute 
            defines the label displayed for the menuItem. The icon attribute can be used to 
            specify an image that displays on the left side of the menuItem. The action and 
            actionListener attributes operate in the same way os the standard component attributes
            of the same name. The menuItem component is only used in the static approach to defining 
            the heirarchy of menu items.
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing the application action to invoke when
		this component is activated by the user. The expression must
		evaluate to a either a String or a public method that takes no
		parameters, and returns a String (the logical outcome) which is
		passed to the NavigationHandler for this application.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing an action listener method that will be 
		notified when this component is activated by the user. The expression 
		must evaluate to a public method that takes an ActionEvent parameter, 
		with a return type of void. 
      ]]></description>
    </attribute>

    <attribute>
      <name>alt</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Passed through to IMG tag of rendered icon in MenuItem
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Indicates tab should be disabled.
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>icon</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        icon
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>link</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        link
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Javascript to be executed before the MenuItem's CommandLink submits to the server.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
              Space-separated list of CSS style class(es) to be applied when this
              element is rendered. This value must be passed through as the 
              "class" attribute on generated markup.<br/><br/>
              As the top level menu items are part of the menuBar so the style 
              class names rendered differently for top level and non 
              to level menu items. <br/>
              <p>
              The base name rendered same for all non top level menu item regardless
              of orientation. Default value is <b>iceMnuItm</b></p>
              if enabled 
              <ul>
                <li>iceMnuItm</li>
                <li>iceMnuItmImage</li>
                <li>iceMnuItmLabel</li>
              </ul>

              if disabled 
              <ul>
                <li>iceMnuItm-dis</li>
                <li>iceMnuItmImage-dis</li>
                <li>iceMnuItmLabel-dis</li>
              </ul>
			  <p>
			  As the top level menu item is part of the MenuBar, so it is 
			  possible to have different representation for horizontal and 
			  vertical menu. <br/>
			  For the top level menu items the style class base name depends on 
			  orientation of the menu . Default value for top level menu item
			  <b>iceMnuBar</b>: <br/>
			  if enabled + horizontal
              <ul>
                <li>iceMnuBarItem</li>
                <li>iceMnuBarItemImage</li>
                <li>iceMnuBarItemLabel</li>
              </ul>

			  if enabled + vertical
              <ul>
                <li>iceMnuBarVrtItem</li>
                <li>iceMnuBarVrtItemImage</li>
                <li>iceMnuBarVrtItemLabel</li>
              </ul>

			  if disabled + horizontal
              <ul>
                <li>iceMnuBarItem-dis</li>
                <li>iceMnuBarItemImage-dis</li>
                <li>iceMnuBarItemLabel-dis</li>
              </ul>

			  if disabled + vertical
              <ul>
                <li>iceMnuBarVrtItem-dis</li>
                <li>iceMnuBarVrtItemImage-dis</li>
                <li>iceMnuBarVrtItemLabel-dis</li>
              </ul>
			  </p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        target
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Passed through to root DIV tag of rendered MenuItem
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The current value of this component.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>menuItemSeparator</name>
    <tag-class>com.icesoft.faces.component.menubar.MenuItemSeparatorTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
	This is the Menu Node Separator component.
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing the application action to invoke when
          this component is activated by the user.  The expression must
          evaluate to a either a String or a public method that takes no parameters, and returns
          a String (the logical outcome)  which is passed to the
          NavigationHandler for this application.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing an action listener method that will be
          notified when this component is activated by the user.  The
          expression must evaluate to a public method that takes an
          ActionEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
              Space-separated list of CSS style class(es) to be applied when this
              element is rendered. This value must be passed through as the 
              "class" attribute on generated markup.<br/>
              Default value is <b>iceMnuItmSep</b> if enabled and <b>iceMnuItmSep-dis</b>
              if disabled.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The current value of this component.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>menuItems</name>
    <tag-class>com.icesoft.faces.component.menubar.MenuItemsTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
           This is the submenu component to use if you want to supply a (potentially) dynamic 
            heirarchy of menuItems.
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing the application action to invoke when
		this component is activated by the user. The expression must
		evaluate to a either a String or a public method that takes no
		parameters, and returns a String (the logical outcome) which is
		passed to the NavigationHandler for this application.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing an action listener method that will be 
		notified when this component is activated by the user. The expression 
		must evaluate to a public method that takes an ActionEvent parameter, 
		with a return type of void. 
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        A java.util.List of MenuItem objects.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>menuPopup</name>
    <tag-class>com.icesoft.faces.component.menupopup.MenuPopupTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
        <p> A context sensitive popup menu providing popup nested child menus</p>
        <p> By default the menuPopup doesn't cause any submit when displayed by 
        the right click, that is why its contents can be static only but it could be 
        dynamic by just registering the displayListener on it. The displayEvent 
        gives the target component as well as the clientId of the target 
        component in form of contextValue, which then can be use to produce dynamic 
        contents.
        </p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>displayListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The displayListener is a MethodBinding/MethodExpression that 
		specifies a method on a backing bean that will accept a 
		com.icesoft.faces.component.DisplayEvent.
      ]]></description>
    </attribute>

    <attribute>
      <name>displayOnClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
        By default the sub menus are being displayed on the hover event. which
        can be replaced with the click event by setting this attribute to true.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>hideOn</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
            <p>
        The following are the valid values for the hideOn attribute:
            <ul>
                <li> mouseout </li>
                <li> mousedown </li>
            </ul> 
            </p>
            <p>        <h3>  mouseout :</h3> the popup menu will be hidden when the user moves the mouse out of any part of the menu. 
            </p>
            <p>
            <h3>  mousedown :</h3> the popup menu will be hidden when the user clicks any area outside of the menu. 
            </p>  
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>imageDir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Set directory for location of the tree images.
            Default directory is /xmlhttp/css/xp/css-images/ which is include in the icefaces.jar.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>keyboardNavigationEnabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Enables keyboard support, default value is true.
      ]]></description>
    </attribute>

    <attribute>
      <name>noIcons</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        If true, this component will not rendered icons and icon spacers in menuItems.
        The default is false. By default icons are rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>orientation</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines the orientation of the top-level menu items. For menuPopup, 
        the only valid orientation is vertical, where each subsequent top-level 
        menu item is below the previous. Sub menus appear to the side. 
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
            Flag indicating whether or not this component should be rendered
            (during Render Response Phase), or processed on any subsequent form
            submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
              Space-separated list of CSS style class(es) to be applied when this
              element is rendered. This value must be passed through as the 
              "class" attribute on generated markup.<br/>
              The base name for all style classes. Default value is <b>iceMnuPop</b></p>
              if enabled
              <ul>                
                <li>iceMnuPopVrt</li>
                <li>iceMnuPopVrtItem</li>
                <li>iceMnuPopVrtItemLabel</li>
                <li>iceMnuPopVrtItemImage</li>
                <li>iceMnuPopVrtSubMenu</li>
                <li>iceMnuPopVrtSubMenuInd</li>
              </ul>   
              if disabled
              <ul>                
                <li>iceMnuPopVrt-dis</li>
                <li>iceMnuPopVrtItem-dis</li>
                <li>iceMnuPopVrtItemLabel-dis</li>
                <li>iceMnuPopVrtItemImage-dis</li>                
                <li>iceMnuPopVrtSubMenu-dis</li>
                <li>iceMnuPopVrtSubMenuInd-dis</li>
              </ul>                          
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The current value of this component.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>outputBody</name>
    <tag-class>com.icesoft.faces.component.OutputBodyTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
          <p>Renders the contents of html document.</p>
          <p>The "focus" attribute on the this component allows to focus a 
          component by just setting the "id" or the "clientId". It also avoids the need of component 
        binding. The value of the focus attribute can be bind to the bean 
        using the value binding. So application can dynamically change the focus.
        </p>
        <b>Note:</b>
        <ul>
        <li>- To focus the elements inside the UIData type of components, the element can not be focused using the "id", the clientId has to be used instead.</li>
        <li>- The focus would only be requested when there is a value change on the focus attribute.</li>
        <li>- If you setting the initial focus, the focused component must be rendered on first render call, if not then set the focus attribute only when the component gets rendered.</li>
        </ul>
    ]]></description>

    <attribute>
      <name>alink</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      ]]></description>
    </attribute>

    <attribute>
      <name>background</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      ]]></description>
    </attribute>

    <attribute>
      <name>bgcolor</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>focus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       It can be set to the "id" or the "clientId" of the focused component. If 
       a component inside the UIData needs to be focused, then clientId will have 
       to be used.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>link</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Space-separated list of CSS style class(es) to be applied when
		this element is rendered. This value must be passed through as
		the "class" attribute on generated markup.
      ]]></description>
    </attribute>

    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      ]]></description>
    </attribute>

    <attribute>
      <name>vlink</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>outputChart</name>
    <tag-class>com.icesoft.faces.component.outputchart.OutputChartTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p >
The outputChart component uses the JCharts open source charting utility
(http://jcharts.sourceforge.net/) to create charts.
All chart types are derived from the two main types:
        <ol>
            <li>axis : 
		        <ul>
		            <li>area</li/>
		            <li>areastacked</li/>
		            <li>bar</li/>
		            <li>barclustered</li/>
		            <li>barstacked</li/>
		            <li>line</li/>
		            <li>point</li/>
		            <li>stock</li/>                                                                                                         
		        </ul>
            </li>
            <li>pie : 
                <ul>
                    <li>pie2D</li/>
                    <li>pie3D</li/>
                </ul>
            </li>
        </ol>
        <b>Note:</b> The "type" attribute can be changed using the value binding 
        for one basic type only. For example you can change "area" to "bar", "bar" to 
        "line" but not to "pie2d"                     
</p>


<br>
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing the application action to invoke when
		this component is activated by the user. The expression must
		evaluate to a either a String or a public method that takes no
		parameters, and returns a String (the logical outcome) which is
		passed to the NavigationHandler for this application.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing an action listener method that will be 
		notified when this component is activated by the user. The expression 
		must evaluate to a public method that takes an ActionEvent parameter, 
		with a return type of void. 
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>chartTitle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Title for the component. The value of this attribute can be defined
        on the page or can be bound to the backing bean as String type.
      ]]></description>
    </attribute>

    <attribute>
      <name>colors</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		<p>     
        The value of this attribute can be defined on page or can be defined 
        using the backing bean, the valid types for the bean is:
        	<ul>
			   <li> String array</li>
        	   <li> List of java.awt.Color</li>
			</ul>
        </p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>data</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
         <p>     
        Data of the chart. The valud of this attribute can be defined on page or
        can be bound to the backing bean:</br>
		<b>(e.g.) defining on page</b>
        <pre> 
        &lt;ice:outputChart type="pie2d" 
        		labels="pass, fail" 
        		data="70, 30" 
        		colors="green, red"/&gt;

        dataset can be defined using the colon ":" 
        &lt;ice:outputChart type="barstacked" 
        		labels="pass, fail" 
        		data="70, 30, 10 : 10, 50, 70" 
        		colors="green, red"/&gt;
        </pre><br/>
       This attribute's value has correlation with the labels and color attribute.
       <br/> if the value bounded with backing bean:
           <ul>
             <li>double or 2d double array</li>
             <li>List of double or 2d double array</li>
           </ul>
        </p>   
      ]]></description>
    </attribute>

    <attribute>
      <name>height</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Height of the chart. The value of this attribute can
        be defined on the page or can be bound to the backing bean as String type.
      ]]></description>
    </attribute>

    <attribute>
      <name>horizontal</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		<p>     
        This attribute is valid only for the following types of charts:
        <ul>
        	<li>bar</li>
        	<li>barclustered</li>
            <li>barstacked</li>        	
        </ul>  
        <b>Note: </b> Negative values in Stacked Bar charts are not supported by 
        the krysalis.jcharts.
        </p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>labels</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
         <p>   
        Legend label of the chart. This attribute can be used for any type of 
        chart. The value of the labels attribute has correlation with the data 
        and colors attribute.
        <br/>
        When used with pie2D and pie3D the number of values should be same for the
        labels, data and color attributes. (e.g.)
        <pre> 
        &lt;ice:outputChart type="pie2d" 
        		labels="pass, fail" 
        		data="70, 30" 
        		colors="green, red"/&gt;
         </pre> 
        When used with other charts except pie, then each labels' value should 
        be mapped with a dataset. A dataset can be indicated by the colon ":" (e.g.)  
        <pre>       
        &lt;ice:outputChart type="barstacked" 
        		labels="pass, fail" 
        		data="70, 30, 10: 10, 50, 70" 
        		colors="green, red"/&gt;
        </pre> 		
        The value of labels attribute can be defined on the page:
        	<ul>
			   <li> a single word </li>
        	   <li> comma separated values </li>
        	</ul>
        The value of labels attribute can be defined using the backing bean:
        	<ul>
			   <li> as String array </li>
        	   <li> as List of strings </li>
			</ul>
        </p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>legendColumns</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		<p>    
        The number of columns for legend label.
        <pre> 
		(e.g.) To show legend columns vertically
        &lt;ice:outputChart type="barstacked" 
        		labels="pass, fail" 
        		data="70, 30, 10: 10, 50, 70" 
        		colors="green, red"
        		legendPlacement="right"
        		legendColumns="1"/&gt;
         </pre>    
        </p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>legendPlacement</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		<p>The placement of legend label can be set to one of the following:
        <ul>
        	<li>top</li>
        	<li>bottom (default)</li>
        	<li>left</li>
        	<li>right</li>
        	<li>none</li>          	  
        </ul>
        <pre> 
		(e.g.)
        &lt;ice:outputChart type="barstacked" 
        		labels="pass, fail" 
        		data="70, 30, 10: 10, 50, 70" 
        		colors="green, red"
        		legendPlacement="right"/&gt;
         </pre>         
         Note: This attribute does not apply to pie3D charts.
         When the chart type is "custom", remember to read this attribute in
         your custom charting code and set the chart legend placement accordingly.
        </p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>renderOnSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		<p>     
        The renderOnSubmit attribute lets the developer decide when to render 
        the chart. However the chart component ensures that the chart image would 
        be generated for first rendering phase but subsequent rendering of the
        chart would be based on this attribute's value.<br/>
        The value of this attribute can be defined on the page or can be bound 
        to the backing bean as method binding.
       <pre>
       &lt;ice:outputChart  renderOnSubmit="true"/&gt;
       or
       &lt;ice:outputChart  renderOnSubmit="#{bean.render}"/&gt;
       method's signature:
           public boolean render(OutputChart component)
       </pre>
        </p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>shapes</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		<p>     
        This attribute can be used with the line and point chart. <br/>
        The following are the valid values:
        <ul>
        	<li>circle</li>
        	<li>diamond</li>
        	<li>square</li>
        	<li>triangle</li>
        </ul>
        The value of this attribute can be defined on page or can be defined 
        using the backing bean, the valid types for the bean is:
        	<ul>
			   <li> String array containging above strings</li>
        	   <li> List of java.awt.Shape</li>
			</ul>
        </p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value is passed through as the "class" 
		attribute on generated markup.
		The base name for all style classes. Default value is <b>iceOutChrt</b>
		if enabled and <b>iceOutChrt-dis</b> if disabled.
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		<p>Type of the chart. The valid values are as follows:
        <ul>
        	<li>area</li/>
        	<li>areastacked</li/>
        	<li>bar</li/>
        	<li>barclustered</li/>
        	<li>barstacked</li/>
        	<li>line</li/>
        	<li>pie2D</li/>
        	<li>pie3D</li/>
        	<li>point</li/>
        	<li>stock</li/>        	        	        	        	        	        	        	        	        	
        	<li>custom</li/>        	
        </ul>
        Only one type can be set at a time. The value of this attribute can
        be defined on the page or can be bound to the backing bean as String type.
        </p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The current value of this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Width of the chart. The value of this attribute can
        be defined on the page or can be bound to the backing bean as String type.
      ]]></description>
    </attribute>

    <attribute>
      <name>xaxisLabels</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		<p>     
        This attribute can be used with all types of charts except pie2D and pie3D.
        Each value of xaxisLabels is connected with a dataset.
        It can be defined on page or bound to the backing bean.
     	(e.g.)
     	<pre>
     	 &lt;ice:outputChart type="barstacked" 
        		labels="pass, fail" 
        		data="70, 30, 10 : 10, 50, 70" 
        		colors="green, red"
				xaxisLabels="2001, 2002, 2003"        		
        		/&gt;   
       </pre>
        </p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>xaxisTitle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Title for x axis of the chart. Valid for all types of charts except 
        pie2D and pie3D. The value of this attribute can
        be defined on the page or can be bound to the backing bean as String type. 
      ]]></description>
    </attribute>

    <attribute>
      <name>yaxisTitle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Title for y axis of the chart. Valid for all types of charts except 
        pie2D and pie3D. The value of this attribute can
        be defined on the page or can be bound to the backing bean as String type.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>outputConnectionStatus</name>
    <tag-class>com.icesoft.faces.component.outputconnectionstatus.OutputConnectionStatusTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
        <p>The outputConnectionStatus component displays the information about the status of the network connection
        between the client browser and the server. The component displays one of 4 possible states, which are as
        follows.
        <p>
           1. Active: The connection is alive and there is a request pending.<br/>
           2. Inactive: The connection is alive and there is no pending activity.<br/>
           3. Caution: The connection request/response latency has exceeded the configured threshold.
           Indicates that asynchronous updates from the server may not be received in a timely manner.<br/>
           4. Disconnected: The connection has been lost, either due to network or application error
           (session expiry, etc.).<br/>
        <p>
        The outputConnectionStatus component provides an ideal mechanism to provide continuous real-time feedback
        to users of the status of their ICEfaces application. It is particularly important to inform users when the
        application is busy sending and receiving data in response to a user-initiated action to manage their 
        expectations with respect to application readiness for additional user input. Generally, the
        outputConnectionStatus component should be located in a consistent location throughout an ICEfaces application.
        <p>
        NOTE: A web-page may only contain a single outputConnectionStatus component. Using more than one 
        outputConnectionStatus component on the same web page will result in erratic results.
    ]]></description>

    <attribute>
      <name>activeLabel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The connection status component would show this label, when The
    connection is alive and there is a request pending.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>cautionLabel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The connection status component would show this label, when The
        connection state is unknown as a heartbeat ping has not been
        acknowledged. However, connection recovery activities are in
        progress which will change the state to either "Connected" or
        "Disconnected" status.
      ]]></description>
    </attribute>

    <attribute>
      <name>disconnectedLabel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The connection status component would show this label, when The
    connection has been lost, either due to network error or the
    application session expiring.
      ]]></description>
    </attribute>

    <attribute>
      <name>displayHourglassWhenActive</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Whether to render hour-glass pointer together with the element corresponding to busy state.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>inactiveLabel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The connection status component would show this label, when the
    connection is alive and there is no pending activity.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>showPopupOnDisconnect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Whether to popup a reload dialog when connection is lost: true or false (default).
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>
		Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value must be passed through as the "class" 
		attribute on generated markup.
		</p>
        <p>Defines the base class name for all style classes.
        Default value is <b>iceOutConStat</b></p>
              </p><ul>
                <li>iceOutConStat</li>
                <li>iceOutConStatInactv</li>
                <li>iceOutConStatActv</li>
                <li>iceOutConStatCaution</li>
                <li>iceOutConStatDisconnect</li>
              </ul>              
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>outputDeclaration</name>
    <tag-class>com.icesoft.faces.component.outputdeclaration.OutputDeclarationTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The outputDeclaration component causes a DOCTYPE declaration to be placed at the beginning of the output document. <br>
For example,
<blockquote>
&lt;ice:outputDeclaration doctypeRoot="HTML" doctypePublic="-//W3C//DTD HTML 4.01 Transitional//EN" doctypeSystem="http://www.w3.org/TR/html4/loose.dtd" /&gt;<br>
</blockquote>
will insert the following at the beginning of the document
<blockquote>
&lt;!DOCCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd" &gt;
</blockquote>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>doctypePublic</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		An identifier for the DTD without giving a specific location.
      ]]></description>
    </attribute>

    <attribute>
      <name>doctypeRoot</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Indicates the root element of the XML document.
      ]]></description>
    </attribute>

    <attribute>
      <name>doctypeSystem</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Indicates the URI reference to the DTD.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The current value of this component.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>outputHead</name>
    <tag-class>com.icesoft.faces.component.OutputHeadTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
          <p>head element contains meta information about html document.</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      ]]></description>
    </attribute>

    <attribute>
      <name>profile</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>outputHtml</name>
    <tag-class>com.icesoft.faces.component.OutputHtmlTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
          <p>Renders an HTML Document "html" element.</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
            Flag indicating whether or not this component should be rendered
            (during Render Response Phase), or processed on any subsequent form
            submit.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>outputMedia</name>
    <tag-class>com.icesoft.faces.component.outputmedia.OutputMediaTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Renders an object tag and an embed tag for playing a media object.
		Parameter values specific to a player should be specified using &lt;f:param&gt;.</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>codebase</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Overrides default codebase set by the player attribute.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>mimeType</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        MIME type of the media data. If not specified, the browser will try to determine
        the MIME type based on the media source file extension.
      ]]></description>
    </attribute>

    <attribute>
      <name>player</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        "windows", "flash", "quicktime" or "real". This sets the default values for the
        object tag's classid and codebase attributes and param name used to specify
        the URL of the media data object. It also sets the default value for the embed
        tag's pluginspage attribute.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>source</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        URL of the media data object. Relative URL is relative to the current web page.
      ]]></description>
    </attribute>

    <attribute>
      <name>standbyText</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Message displayed while loading the media data.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Space-separated list of CSS style class(es) to be applied when
		this element is rendered. This value must be passed through as
		the "class" attribute on generated markup.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>outputResource</name>
    <tag-class>com.icesoft.faces.component.outputresource.OutputResourceTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The outputResource component can be used to expose resources to the page. 
		These resources can be rendered as links that trigger the browser to open the resource as
		an attachment, or open directly from the current page. Any class that implements the 
		com.icesoft.faces.context.Resource can be used to expose the resource.
    ]]></description>

    <attribute>
      <name>attachment</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        If true, specifies that the resource should be downloaded as an attachment. See also the resource attribute.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>fileName</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The file name to be used for the attachment header. If the label is not specified the file name will be used.
        See also the resource attribute.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>image</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The image path that will be used to display an image for link instead of text. 
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The label to be displayed for the resource. The label will be used for the text of the link or button. 
		If an image is used, the label will be used as the alt attribute value of the image element.
      ]]></description>
    </attribute>

    <attribute>
      <name>lastModified</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The java.util.Data object specifying the last modified header that will be sent to the 
		browser for this resource. See also the resource attribute.
      ]]></description>
    </attribute>

    <attribute>
      <name>mimeType</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The mime-type for the resource. If not specified, and available from the backing
		Resource, the Resource's mime-type will be used. See also the resource attribute.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>resource</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The object of type com.icesoft.faces.context.Resource that will be used.
        It can be use to override the attachment, fileName, lastModified and mimeType
        attributes via the withOptions() method.
      ]]></description>
    </attribute>

    <attribute>
      <name>shared</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        If true (default), specifies that the resource should be cached by the 
        resource registry. If cached, resources having the same signature (@see
        Resource.calculateDigest() ) will be registered only once, and the same
        response will be be provided for that resource by the ResourceServer. 
        Therefore, if the developer has to dynamically set any properties on 
        the outputResource component, and have those properties applied dynamically
        to individual users, then the 'shared' attribute should be set to false.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value is passed through as the "class" 
		attribute on generated markup.
		The base name for all style classes. Default value is <b>iceOutLnk</b>
		if rendered as a link, or <b>iceCmdBtn</b> if rendered as a button.
      ]]></description>
    </attribute>

    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Value of the target attribute when resource is rendered as a link. Default is "_blank".
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The type of link to render:
		link (default)
        image: renders a link with an image (must be used with the image attribute)
        button: renders a button with the text from value
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>outputStyle</name>
    <tag-class>com.icesoft.faces.component.style.OutputStyleTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
         <p>The outputStyle component is used to link the desired ICEfaces 
            theme CSS stylesheets into the page to style the ICEfaces 
            Component Suite components.</p>
         <p>Inserting the outputStyle component into the HEAD region of a 
            page will link both the default CSS stylesheet for the theme and 
            optionally an additional stylesheet that alters the default 
            styles to accommodate differences in CSS rendering in various 
            user-agents/browsers.</p>
         <p>The additional style sheet will have a different extension for 
            each browser.</p>
            <ul>
              <li>Internet Explorer < 7 = _ie.css</li>
              <li>Internet Explorer 7 = _ie7.css</li>
              <li>Internet Explorer 8 = _ie8.css</li>
              <li>Safari = _safari.css</li>
              <li>Sun Studio Creator = _dt.css</li>
            </ul>
         <p>This extension replaces the .css value of the href attribute.
            So when href is 'xp.css' and the page is rendered in Internet 
            Explorer 6 or less, an additional style sheet will be included 
            called 'xp_ie.css'.</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>href</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
                  The href value of the link element that is rendered. An additional link elelement is rendered for internet explorer browsers.
                  The IE style sheet must end with '_ie.css'. For example if the href value is 'style.css' then the IE style sheet needs to be
                  named 'style_ie.css'  
                </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelCollapsible</name>
    <tag-class>com.icesoft.faces.component.panelcollapsible.PanelCollapsibleTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
             <p>
                The panelCollapsible component is comprised of two parts: the 
                content area, where its children can be displayed; and a header 
                section, which can be clicked on, to cause the content area to 
                collapse into not being visible, or expand to become visible. 
                The panelCollapsible's state of being expanded or collapsed is 
                fully controllable via its expanded attribute, which can be tied 
                to a bean property through a ValueBinding.             
             </p>
    ]]></description>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Fired when a panel is expanded or collapsed
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>expanded</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        True when panel is expanded, false when collapsed
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		<p>
        Space-separated list of CSS style class(es) to be applied when this
        element is rendered. This value must be passed through as the 
        "class" attribute on generated markup.<br/>
        The base name for all style classes. Default value is <b>icePnlClpsbl</b></p>
        The class names for the panel, the header, and the content are:<br>
		Expanded
		<ul>
        <li>icePnlClpsbl</li>
        <li>icePnlClpsblHdr</li>
        <li>icePnlClpsblCnt</li>
		</ul>
        Collapsed
		<ul>
        <li>icePnlClpsblColpsd</li>
        <li>icePnlClpsblColpsdHdr</li>
        <li>icePnlClpsblColpsdCnt</li>
		</ul>
        Expanded and disabled
		<ul>
        <li>icePnlClpsbl-dis</li>
        <li>icePnlClpsblHdr-dis</li>
        <li>icePnlClpsblCnt-dis</li>
		</ul>
        Collapsed and disabled
		<ul>
        <li>icePnlClpsblColpsd-dis</li>
        <li>icePnlClpsblColpsdHdr-dis</li>
        <li>icePnlClpsblColpsdCnt-dis</li>
        </ul>
		</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>toggleOnClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        When true clicking on the header will expand or collapse the panel
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelConfirmation</name>
    <tag-class>com.icesoft.faces.component.panelconfirmation.PanelConfirmationTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
        <p>This component renders a popup confirmation dialog asking the user
        whether to cancel or continue with the operation that was requested. This dialog
        will be displayed immediately after the event that triggered the operation (e.g.
        click, Enter-key press, etc.) while preventing the application from carrying out   the requested operation until it is confirmed by the user.</p>
    ]]></description>

    <attribute>
      <name>acceptLabel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The text to appear on the acceptance button (default value is 'Accept').
      ]]></description>
    </attribute>

    <attribute>
      <name>autoCentre</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Used to keep the popup centred on the screen through scrolling
		and window resizing events. Default value is 'false'.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>cancelLabel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The text to appear on the cancellation button (default value is 'Cancel').
      ]]></description>
    </attribute>

    <attribute>
      <name>displayAtMouse</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        When set to 'true' this panel will pop up near the mouse pointer position at the moment of triggering
        the event. It overrides the autoCentre property. Default value is 'false'.
      ]]></description>
    </attribute>

    <attribute>
      <name>draggable</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        When set to 'true' this panel is draggable. The user will be able to drag the panel to any position 
        on the page. Default value is 'false'.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>message</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The text to appear in the body of the popup.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Space-separated list of CSS style class(es) to be applied when
		this element is rendered. This value must be passed through as
		the "class" attribute on generated markup.
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The text of the popup header.
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>
		The type of confirmation dialog (buttons that will be
        displayed in the popup). Possible values are:
		</p>
        <ul>
            <li><strong>acceptOnly</strong> - Will only display accept button.</li>
            <li><strong>cancelOnly</strong> - Will only display cancel button.</li>
            <li><strong>normal</strong> - Will only display both buttons.</li>
        </ul>
        <p>Default value is <strong>normal</strong>.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelDivider</name>
    <tag-class>com.icesoft.faces.component.paneldivider.PanelDividerTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
<p>
          The panelDivider component creates a spilttable panel. The position of 
          the divider can be defined using the "dividerPosition" attribute. The
          orientation of the spilttable panel can be set to the vertical or the 
          horizontal using the "orientation" attribute.
        </p><p>
          The component requires two named facets ("first", "second") to define each pane. (e.g.)<br/>

&lt;ice:panelDivider styleClass="myDvrPanel1"&gt;<br/>
&nbsp;&nbsp;&nbsp;&lt;f:facet name="first"&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText value="left"/&gt;<br/>
&nbsp;&nbsp;&nbsp;&lt;/f:facet&gt;<br/><br/>
&nbsp;&nbsp;&nbsp;&lt;f:facet name="second"&gt; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText value="second"/&gt;<br/>
&nbsp;&nbsp;&nbsp;&lt;/f:facet&gt;<br/>  
&lt;/ice:panelDivider&gt; 
        </p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>dividerPosition</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The divider position can be set between 1 to 100.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>orientation</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The orientation can be set to the vertical or the horizontal.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>
		Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value must be passed through as the "class" 
		attribute on generated markup.
		</p>
		<p>Defines the base class name for all style classes.
        Default value is <b>icePnlDvr</b> for the vertical orientation, <b>icePnlDvrHor</b> for the horizontal orientation</p>
        If Vertical:<br/>
        <ul>
            <li>icePnlDvr</li>
            <li>icePnlDvrCnt</li>
            <li>icePnlDvrFst</li>
            <li>icePnlDvrSnd</li>
            <li>icePnlDvrSpt</li>            
        </ul>  

        If Horizontal:<br/>
        <ul>
            <li>icePnlDvrHor</li>
            <li>icePnlDvrHorCnt</li>
            <li>icePnlDvrHorFst</li>
            <li>icePnlDvrHorSnd</li>
            <li>icePnlDvrHorSpt</li>            
        </ul>  		
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelLayout</name>
    <tag-class>com.icesoft.faces.component.panellayout.PanelLayoutTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>PanelLayout is a container used for displaying a group of components.
                AbsoluteLayout allow placement of components in absolute positions.
                A flow layout arranges components in relative alignment. 
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>layout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        layout
        AbsoluteLayout allow placement of components in absolute positions.
        A flow layout arranges components in relative alignment.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Space-separated list of CSS style class(es) to be applied when
		this element is rendered. This value must be passed through as
		the "class" attribute on generated markup.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelPopup</name>
    <tag-class>com.icesoft.faces.component.panelpopup.PanelPopupTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The panelPopup is a container component that renders a window or panel that hovers on
            top of a web page. The popupPanel contains 2 regions which are defined using facets.
            The facet names are; header and body.<br>
            The panelPopup component can be used to provide a general popup window behavior such as moveable/dragable, resizeable and modal<br>          Note: A panelPopup facet needs a container type component as a child (e.g.,
            panelGroup or panelGrid). panelGroup renders a span tag, which doesn't
            work properly if using Mozilla. panelGrid can be used to avoid display problems. 
    ]]></description>

    <attribute>
      <name>autoCentre</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Used to keep the popup centred on the screen through scrolling
		and window resizing events.
      ]]></description>
    </attribute>

    <attribute>
      <name>autoPosition</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Used to keep the popup positioned on the screen through
		scrolling events. Use a string of x and y px values (e.g.
		autoPostion="35,200"). For a modal popup, use "manual" to disable
        automatic centering on the document. Then specify top, left
        positions by style or styleClass.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>clientOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sends update to the server on drop event if false.
        Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>draggable</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		When set to 'true' this panel is draggable. The user will be
		able to drag the panel to any position on the page. Note: all
		Draggable panels must be contained in a form.
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>modal</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Used to render a modal popup. Note: this will only cover the
		body of a document. Make sure the document body takes up 100% of
		the window. For example: <html><body><div
		style="height=100%;witdh:100%;"><div></body></html>
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>positionOnLoadOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Centre or position popup once on load only. Any drag and drop will disable autoCentre and autoPosition.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>resizable</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        This attribute is currently unsupported.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>
		Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value must be passed through as the "class" 
		attribute on generated markup.
		</p>
        <p>Defines the base class name for all style classes.
        Default value is <b>icePnlPop</b></p>
              </p><ul>
                <li>icePnlPop</li>
                <li>icePnlPopHdr</li>
                <li>icePnlPopBody</li>
                <li>icePnlPopFtr</li>
              </ul>              
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for
		this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelSeries</name>
    <tag-class>com.icesoft.faces.component.panelseries.PanelSeriesTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The panelSeries component provides a mechanism for dynamically generating a series of repeating
            child-components within a panel. This component renders its child components in an iterative fashion
            similar to way the dataTable component renders data rows. However, the panelSeries component is more 
            flexibile in that it can render a series of arbitrarily complex child components. The dataset can be 
            defined and used by implementing the value and var attributes respectively.
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>first</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Zero-relative row number of the first row to be displayed. If this 
		property is set to zero, rendering will begin with the first row of the 
		underlying data.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The number of rows to display, starting with the one identified
		by the "first" property. If this value is set to zero, all
		available rows in the underlying data model will be displayed.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			<p>
              Space-separated list of CSS style class(es) to be applied when
              this element is rendered.  This value must be passed through
              as the "class" attribute on generated markup.
              <br/> The default class would be rendered as <b>icePnlSrs</b>
            </p>      
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The data model for this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>var</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Name of a request-scope attribute under which the model data for
		the row selected by the current value of the "rowIndex" property
		(i.e. also the current value of the "rowData" property) will be
		exposed.
      ]]></description>
    </attribute>

    <attribute>
      <name>varStatus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>Name of a request-scope attribute under which the current indexed  
        state will be exposed. This is modeled after the Facelets JSTL c:forEach  
        varStatus. The varStatus object has 5 sub-properties:</p>
        <dl>
        <dt>int <b>begin</b></dt> 
        <dd>Corresponds to the UIData container's <b>first</b> property, the 
            index at which it begins iteration.</dd>
        <dt>int <b>end</b></dt>
        <dd>The ending index of iteration, corresponding to the UIData 
            container's <b>first</b> plus <b>rows</b> minus 1. Note: 
            If the UIData's DataModel's isRowAvailable() method returns false, 
            prematurely ending iteration, then the actual ending index may not 
            equal the value for this <b>end</b> property.</dd>
        <dt>int <b>index</b></dt>
        <dd>The current iteration index. Corresponding to the UIData 
            container's getRowIndex() value, which also corresponds with the 
            UIData's DataModel's getRowIndex() value.</dd>
        <dt>boolean <b>first</b></dt>
        <dd>Defined simply as: <b>varStatus.index == varStatus.begin</b></dd>
        <dt>boolean <b>last</b></dt>
        <dd>Defined simply as: <b>varStatus.index == varStatus.end</b>. Note: 
            This has the same limitations as the <b>end</b> property.</dd>
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelStack</name>
    <tag-class>com.icesoft.faces.component.panelstack.PanelStackTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The panelStack is a container component that itself contains multiple panel groups.
            A single contained panel group is visible at one time, filling the area covered by
            the panelStack component. The panel group specified in the selectPanel attribute will
            be visible, with the others being hidden.<br>
            The panelStack component can be used in cases where a form region must contain several embedded
            panels, only one of which is visible at one time, changing dynamically depending on an application
            state change or user selection. 
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>selectedPanel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Id of the child to be rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         <p>Defines the base class name for all style classes. Default value is <b>icePnlStk</b>.</p>
		 <p>Style Classes Used:</p>
         <ul>
         	<li>icePnlStk</li>
         	<li>icePnlStkRow</li>
            <li>icePnlStkCol</li>                       
         </ul>
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelTab</name>
    <tag-class>com.icesoft.faces.component.paneltabset.PanelTabTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>Renders an individual Panel Tab. Must be contained within a TabbedPane. <br/>
	The label facet can be defined to the tab (e.g.)
	<pre>
	&lt;ice:panelTab&gt;
                      &lt;f:facet name="label"&gt;
                        &lt;ice:panelGroup&gt;
                              &lt;ice:outputText value="Tab 1"/&gt;
                          &lt;/ice:panelGroup&gt;      &lt;/f:facet&gt;  
                     &lt;ice:outputText value="Contents"/&gt; 
    &lt;/ice:panelTab&gt;  
    </pre>                                        
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Direction indication for text that does not inherit
        directionality. Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>icon</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The icon attribute sets the icon file for this panelTab component           
      ]]></description>
    </attribute>

    <attribute>
      <name>iconAlignRight</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The icon attribute sets the icon file for this panelTab component           
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Label of this tab.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelWidth</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Integer value representing the width (in pixels) of the label text. If the actual width of the text turns out to be greater than the one specified, the text will be wrapped or clipped, depending on the labelWrap attribute.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelWrap</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        If this attribute is set to true, then the label text will wrap to multiple lines instead of being clipped when the width of the text is greater than the one specified by the labelWidth attribute.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code describing the language used in the generated markup for
        this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
              <p>Space-separated list of CSS style class(es) to be applied when this
              element is rendered. This value must be passed through as the 
              "class" attribute on generated markup.</p>
              <p>Defines the base class name for all style classes used in tabbed panes.</p>
              <p>Default value for the base class name is <b>icePnlTb</b>. The base class name
              is used as a prefix for the style classes that will be applied to the elements that make up
              the panelTab. The default style classes are defined in the xp.css and royale.css that are included
              with ICEfaces.</p>
              <p>There are several parts of the CSS class names, as they are defined in the CSS files:
              <dl>
              <dt>icePnlTb</dt>
              <dd>The root of the class name, as set in the styleClass attribute</dd>
              <dt>On / Off / Over</dt>
              <dd>On: If tab is the selected one. Off: If tab is not the selected one. Over: When mouseover the tab.</dd>
              <dt>Btm</dt>
              <dd>If the tab is on the top, then "", else if the tab is on the bottom, then "Btm"</dd>
              <dt>Lft / Mid / Rt</dt>
              <dd>For the tab, which horizonal section, as left, middle, and right.</dd>
              <dt>Top / Mid / Btm</dt>
              <dd>For the tab, which vertical section, as top, middle, and bottom.</dd>
              <dt>-dis</dt>
              <dd>If the panel is enabled, then "", else if the panel is disabled, then "-dis"</dd>
              </dl>
              <p>Put together, the various sections are: ".{root_classname}{tab_is_On_or_Off_or_Over}{tab_on_top_or_bottom} .{horizonal_section_of_tab}{vertical_section_of_tab}{disabled}"<br/>
              That means there is a matrix of classes that have to be defined for the 3 possibilities of tab_is_On_or_Off_or_Over, the 2 possibilities of tab_on_top_or_bottom, the 3 values of horizonal_section_of_tab, the 3 values of vertical_section_of_tab, and the 2 possiblities for disabled, which is 3x2x3x3x2=108 combinations.<br/>
              So, given the default value of styleClass as being <b>icePnlTb</b>, if you want a styling for mousing over the tab, when tabs are on the bottom, for the right top side of the tab, then you would have to define this class in your CSS file: <b>.icePnlTbOverBtm .RtTop</b></br>
              And if you want a styling for the currently selected tab, when tabs are on the top, for the right middle side of the tab, and the tab is disabled, then you would have to define this class in your CSS file: <b>.icePnlTbOn .RtMid-dis</b></br>
              </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for
		this component.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelTabSet</name>
    <tag-class>com.icesoft.faces.component.paneltabset.PanelTabSetTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The panelTabSet is a container component which itself contains one or more panelTab
            components, which are  also container components. The panelTabSet component displays the "active"
            panelTab, hiding the contents of the others. Users can select which panelTab to make visible by 
            clicking on the tab header of the panelTab that they want to display.<br>
            The panelTabSet component can be used in cases where a file-tab navigation interface is appropriate.
    ]]></description>

    <attribute>
      <name>align</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Sets the horizontal alignment (left, right, justify, center) for the cell contents  
      ]]></description>
    </attribute>

    <attribute>
      <name>bgcolor</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Name or code of the background color for this table.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>border</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Width (in pixels) of the border to be drawn around this table.
      ]]></description>
    </attribute>

    <attribute>
      <name>cellpadding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Definition of how much space the user agent should leave between
        the border of each cell and its contents.
      ]]></description>
    </attribute>

    <attribute>
      <name>cellspacing</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Definition of how much space the user agent should leave between
        the left side of the table and the leftmost column, the top of
        the table and the top of the top side of the topmost row, and so
        on for the right and bottom of the table. It also specifies the
        amount of space to leave between cells.
      ]]></description>
    </attribute>

    <attribute>
      <name>columnClasses</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Comma-delimited list of CSS style classes that will be applied
          to the columns of this table.  A space separated list of
          classes may also be specified for any individual column.  If
          the number of elements in this list is less than the number of
          columns specified in the "columns" attribute, no "class"
          attribute is output for each column greater than the number of
          elements in the list.  If the number of elements in the list
          is greater than the number of columns specified in the
          "columns" attribute, the elements at the posisiton in the list
          after the value of the "columns" attribute are ignored.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Direction indication for text that does not inherit
        directionality. Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>first</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Sets or retrieves which field of a given data source, as
		specified by the dataSrc property, to bind to the specified
		object.
      ]]></description>
    </attribute>

    <attribute>
      <name>footerClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Space-separated list of CSS style class(es) that will be
          applied to any footer generated for this table.
      ]]></description>
    </attribute>

    <attribute>
      <name>frame</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code specifying which sides of the frame surrounding this table
        will be visible. Valid values are: none (no sides, default
        value); above (top side only); below (bottom side only); hsides
        (top and bottom sides only); vsides (right and left sides only);
        lhs (left hand side only); rhs (right hand side only); box (all
        four sides); and border (all four sides).
      ]]></description>
    </attribute>

    <attribute>
      <name>headerClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Space-separated list of CSS style class(es) that will be
          applied to any header generated for this table.
      ]]></description>
    </attribute>

    <attribute>
      <name>height</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        height of the entire table, for visual user agents.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>keyboardNavigationEnabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Enables keyboard support, default value is true.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code describing the language used in the generated markup for
        this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is true.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>rowClasses</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Comma-delimited list of CSS style classes that will be applied
          to the rows of this table.  A space separated list of classes
          may also be specified for any individual row.  Thes styles are
          applied, in turn, to each row in the table.  For example, if the list has two elements, the first style class in the list
          is applied to the first row, the second to the second row, the
          first to the third row, the second to the fourth row, etc.  In
          other words, we keep iterating through the list until we reach
          the end, and then we start at the beginning again.
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The number of rows to display, starting with the one identified
		by the "first" property. If this value is set to zero, all
		available rows in the underlying data model will be displayed.
      ]]></description>
    </attribute>

    <attribute>
      <name>rules</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Code specifying which rules will appear between cells within
        this table. Valid values are: none (no rules, default value);
        groups (between row groups); rows (between rows only); cols
        (between columns only); and all (between all rows and columns).
      ]]></description>
    </attribute>

    <attribute>
      <name>selectedIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Index of tab that is selected by default.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
             <p>
              Space-separated list of CSS style class(es) to be applied when this
              element is rendered. This value must be passed through as the 
              "class" attribute on generated markup.<br/>
				<p>Defines the base class name for all style classes.</p>
                <p>Default value for the base class name is <b>icePnlTbSet</b>. The base class name
                is used as a prefix for the style classes that will be applied to the elements that make up
                the panelTabSet. The default style classes are defined in the xp.css and royale.css that are included
                with ICEfaces.</p>
                <p>Style Classes Used:</p>
                     <ul>
                       <li>icePnlTbSet</li>
                       <li>icePnlTbSetBtm</li>
                       <li>icePnlTbSetCnt</li>
                       <li>icePnlTbSetCntBtm</li>
                       <li>icePnlTbSetSpcr</li>
                       <li>icePnlTbSetSpcrBtm</li>
                       <li>icePnlTbSetHdrIconLft</li>
                       <li>icePnlTbSetHdrIconRt</li>
                       <li>icePnlTbSetHdrLbl</li>
                     </ul>
                 <p/>                 
                 <p>To override the defaults with a base class name of <b>myTabSet</b> the developer 
                 will need to define the following styleclasses in their web applications css.</p>
                     <ul>
                       <li>myTabSet</li>
                       <li>myTabSetBtm</li>
                       <li>myTabSetCnt</li>
                       <li>myTabSetCntBtm</li>
                       <li>myTabSetSpcr</li>
                       <li>myTabSetSpcrBtm</li>
                       <li>myTabSetHdrIconLft</li>
                       <li>myTabSetHdrIconRt</li>
                       <li>myTabSetHdrLbl</li>
                     </ul>
                 <p/>                        
      ]]></description>
    </attribute>

    <attribute>
      <name>summary</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Summary of this table's purpose and structure, for user agents
        rendering to non-visual media such as speech and Braille.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		the name of the class that will be added to the
		HtmlPanelTabbedPane component as a TabChangeListener
      ]]></description>
    </attribute>

    <attribute>
      <name>tabPlacement</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The placement for the tabs relative to the content. Possible
		values; Top, Bottom. Default is Top. Left and Right not
		supported in this release.
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for
		this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The data model for this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>var</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Name of a request-scope attribute under which the model data for
		the row selected by the current value of the "rowIndex" property
		(i.e. also the current value of the "rowData" property) will be
		exposed.
      ]]></description>
    </attribute>

    <attribute>
      <name>varStatus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>Name of a request-scope attribute under which the current indexed  
        state will be exposed. This is modeled after the Facelets JSTL c:forEach  
        varStatus. The varStatus object has 5 sub-properties:</p>
        <dl>
        <dt>int <b>begin</b></dt> 
        <dd>Corresponds to the UIData container's <b>first</b> property, the 
            index at which it begins iteration.</dd>
        <dt>int <b>end</b></dt>
        <dd>The ending index of iteration, corresponding to the UIData 
            container's <b>first</b> plus <b>rows</b> minus 1. Note: 
            If the UIData's DataModel's isRowAvailable() method returns false, 
            prematurely ending iteration, then the actual ending index may not 
            equal the value for this <b>end</b> property.</dd>
        <dt>int <b>index</b></dt>
        <dd>The current iteration index. Corresponding to the UIData 
            container's getRowIndex() value, which also corresponds with the 
            UIData's DataModel's getRowIndex() value.</dd>
        <dt>boolean <b>first</b></dt>
        <dd>Defined simply as: <b>varStatus.index == varStatus.begin</b></dd>
        <dt>boolean <b>last</b></dt>
        <dd>Defined simply as: <b>varStatus.index == varStatus.end</b>. Note: 
            This has the same limitations as the <b>end</b> property.</dd>
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Width of the entire tab set. If this value is set and the actual width needed to
        display all contained tabs is greater than this value, then the tab set will be clipped.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelTooltip</name>
    <tag-class>com.icesoft.faces.component.paneltooltip.PanelTooltipTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p> 
            The panelTooltip is a container component that renders the panel as 
            tooltip that hovers on top of an element. This component can be used 
            with conjunction of the panelGroup.</p>
            <p>The popupTooltip contains two user defined regions which are 
            defined using named facets. The facet names are "header" and "body".    </p>
            <p>The hide functionality is controlled by the hideOn attribute.</p>	      
            <b>Note: </b> The panelTooltip can be draggable as well.
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>displayListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The displayListener is a MethodBinding/MethodExpression that 
		specifies a method on a backing bean that will accept a 
		com.icesoft.faces.component.DisplayEvent.
      ]]></description>
    </attribute>

    <attribute>
      <name>displayOn</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
            <p>
        The following are the valid values for the displayOn attribute:
            <ul>
                <li> hover (default): cursor hover </li>
                <li> click: left mouse button clicked </li>
                <li> altclick: right mouse button clicked (tied to the "contextmenu" JS event) </li>
                <li> dblclick: double click </li>
            </ul>
      ]]></description>
    </attribute>

    <attribute>
      <name>draggable</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		When set to 'true' this panelTooltip is draggable. The user will be
		able to drag the panel to any position on the page. 
		Note: all Draggable panels must be contained in a form. If the panelTooltip
		is draggable it becomes dynamic automatically.
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>hideOn</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
            <p>
        The following are the valid values for the autoHide attribute:
            <ul>
                <li> mouseout </li>
                <li> mousedown </li>
                <li> none </li>
            </ul> 
            </p>
            <p>
            <h3>  mouseout :</h3> the tooltip will be hide (un-rdender or invisible, depending
            on the dynamic attribute) when the user moves the mouse out of the 
            triggering component. 
            </p>
            <p>
            <h3>  mousedown :</h3> the tooltip will be hide (un-rdender or invisible, depending
            on the dynamic attribute) when the user clicks any area outside of 
            the panelTooltip itself is clicked. 
            </p>  
            <p>
            <h3>  none :</h3> the tooltip will not be hide until the application 
            changes the "visible" attribute to be false<br/>
            </p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>hoverDelay</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        # of milliseconds that mouse must be continuously hovered over the 
        component before the tooltip is displayed. 
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>moveWithMouse</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		When set to "true" this will cause the panelTooltip to track with the mouse.
        Default is "false"
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>
        Space-separated list of CSS style class(es) to be applied when this 
        element is rendered. This value must be passed through as the "class" 
        attribute on generated markup.
        </p>
        <p>Defines the base class name for all style classes.
        Default value is <b>icePnlTlTip</b></p>
              </p><ul>
                <li>icePnlTlTip</li>
                <li>icePnlTlTipHdr</li>
                <li>icePnlTlTipBody</li>
                <li>icePnlTlTipFtr</li>
              </ul>              
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>portlet</name>
    <tag-class>com.icesoft.faces.component.portlet.PortletTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
        The portlet component is a container component that renders a "div" element, outputting the value of
        the "style" attribute as the value of the "style" attribute and the value of the "styleClass" attribute as
        the value of the "class" attribute.
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Space-separated list of CSS style class(es) to be applied when
		this element is rendered. This value must be passed through as
		the "class" attribute on generated markup.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>outputProgress</name>
    <tag-class>com.icesoft.faces.component.outputprogress.OutputProgressTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The outputProgress component can be used to report progress to users in cases where a
            long running server-side task is necessary. This component can be run in either of two modes;
            "determinate" and "indeterminate".
            <p>
            Determinate mode should be used in cases where the number of steps or units of work in a long-running
            process are known. In determinate mode (default) the outputProgress component renders a progress bar
            that indicates the completion percentage for a task. Typically, the progress bar will gradually progress
            from 0 to 100 % complete in incremental steps determined by the application.
            <p>
            Indeterminate mode should be used in cases when it is not possible to predicate how long a long-running
            process will take to complete, or how many steps or units of work are required to complete the task.
            In indeterminate mode the outputProgress component renders an animated icon or progress bar that
            indicates generally that  activity is taking place.
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>indeterminate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		When true percent numbers are hidden for an unknown task
		duration.
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The default label is the percentage value. The default can be
		overridden by defining the label attribute.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelComplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The label to be displayed on completion of process. Could be
		used with label attribute. The default value is Done.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelPosition</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Percentage text could be set to different positions. Valid
		values are |left | right | top | topcenter | topright | bottom |
		bottomcenter | bottomright | embed |
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
             <p>
              Space-separated list of CSS style class(es) to be applied when this
              element is rendered. This value must be passed through as the 
              "class" attribute on generated markup.<br/>
              <p>Defines the base class name for all style classes used.
              Default value is <b>iceOutProg</b></p>

              <ul>
                <li>iceOutProg</li>
                <li>iceOutProgBg</li>
                <li>iceOutProgTxt</li>
              </ul>              

			  The main div which shows progress bar renderes out different style
			  classes depending on the mode:<br/><br/>

			  Standard Mode:
              <ul>
                <li>iceOutProgFill</li>		
              </ul>                	
			  Indeterminate Mode:
              <ul>     
                <li>iceOutProgIndetActv (during the progress)</li>
                <li>iceOutProgIndetInactv (progress finished)</li>
              </ul>                
  		 	</p>                   
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
         <p>The percentage progress that should be depicted to the user, from 0 to 100 inclusive. 
	    When <b>indeterminate</b>="true", 0 and 100 denote inactivity, and values between denote activity.</p>
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>repeat</name>
    <tag-class>com.icesoft.faces.component.repeat.RepeatTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The Repeat component provides a mechanism for dynamically generating 
		    a series of repeating child-components. The component itself doesn't renderer 
		    any markup but let its child components to render in an iterative fashion 
		    similar to way the panelSeries component renders data rows. 
            The difference between the panelSeries and the repeat component is that the 
            panelSeries render its children inside a panel and repeat component doesn't 
            render any markup of its own. The dataset can be defined and used by implementing the 
            value and var attributes respectively.
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>first</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Zero-relative row number of the first row to be displayed. If this 
		property is set to zero, rendering will begin with the first row of the 
		underlying data.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The number of rows to display, starting with the one identified
		by the "first" property. If this value is set to zero, all
		available rows in the underlying data model will be displayed.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The data model for this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>var</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Name of a request-scope attribute under which the model data for
		the row selected by the current value of the "rowIndex" property
		(i.e. also the current value of the "rowData" property) will be
		exposed.
      ]]></description>
    </attribute>

    <attribute>
      <name>varStatus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>Name of a request-scope attribute under which the current indexed  
        state will be exposed. This is modeled after the Facelets JSTL c:forEach  
        varStatus. The varStatus object has 5 sub-properties:</p>
        <dl>
        <dt>int <b>begin</b></dt> 
        <dd>Corresponds to the UIData container's <b>first</b> property, the 
            index at which it begins iteration.</dd>
        <dt>int <b>end</b></dt>
        <dd>The ending index of iteration, corresponding to the UIData 
            container's <b>first</b> plus <b>rows</b> minus 1. Note: 
            If the UIData's DataModel's isRowAvailable() method returns false, 
            prematurely ending iteration, then the actual ending index may not 
            equal the value for this <b>end</b> property.</dd>
        <dt>int <b>index</b></dt>
        <dd>The current iteration index. Corresponding to the UIData 
            container's getRowIndex() value, which also corresponds with the 
            UIData's DataModel's getRowIndex() value.</dd>
        <dt>boolean <b>first</b></dt>
        <dd>Defined simply as: <b>varStatus.index == varStatus.begin</b></dd>
        <dt>boolean <b>last</b></dt>
        <dd>Defined simply as: <b>varStatus.index == varStatus.end</b>. Note: 
            This has the same limitations as the <b>end</b> property.</dd>
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>rowSelector</name>
    <tag-class>com.icesoft.faces.component.RowSelectorTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
		The Row Selector tag enables single and multiple row selection 
		for DataTable. To add the row selection to the dataTable, the rowSelector
		component can be added to any column of the dataTable(e.g.)
		<p>
		&lt;ice:dataTable..&gt;<br/>
		&nbsp;&nbsp;&lt;ice:column&gt;<br/>
               &nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:rowSelector .../&gt; <br/>
		       &nbsp;&nbsp;&nbsp;&nbsp;&lt;f:facet name="header"&gt;<br/>
                   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText ..../&gt;<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;/f:facet&gt;<br/>
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;ice:outputText ...../&gt;<br/>
        &nbsp;&nbsp;&lt;/ice:column&gt;<br/>
        </p>   
        <b>Note:</b> 
        <ul>
        <li>        
        there should be only one rowSelector component inside a dataTable.
        <p> The row selection will fire a <i>RowSelectorEvent</i> which can be caught by
        the <i>selectionListener</i> on this component.
        </p>
        <p>The selection is based on the following two attributes:
        <ul>
            <li>multiple</li>
            <li>enhancedMultiple</li>
        </ul>
        By default the component runs in single selection mode. In which selecting a row
        deselects the previously selected row. Setting "multiple" to true, puts the component in
        multiple selection mode, which allows you to select multiple rows but you
        can not use "ctrl" or "shift" keys for selection. <br>
        Setting the "enhancedMultiple" to true, allows single or muliple selection 
        using the shift or ctrl keys combination. For more detail please see the 
        attribute specific description. 
        </p>
        </li>
        <li>
	    It is a good practice to use the immediate parameter of the rowSelector. If set to true, it will work with the results
     of the selection in APPLY_REQUEST_VALUE phase, before validation occurs. If set to false it will defer event
     processing until INVOKE_APPLICATION phase, after validation. If validation fails, selection event will not fire with
     immediate=false
     </li>
     <li>    
      The event lists selection changes tied to the event, not the total model 
      state. So the RowSelectorEvent.getSelectedRows() can return multiple rows 
      only when the selection was made using the "shift" key in enhancedMultiple 
      mode, other wise it returns a single rowindex. To determine all the 
      currently selected rows in a dataTable the application needs to query the model 
      </li>
      </ul>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>clickAction</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
             Action method to call when a row is clicked or double-clicked. 
                </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>clickListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
             Listener method to call with a ClickActionEvent when a row is clicked or double-clicked. This listener
             is fired independently of selectionListener. The ClickActionEvent object contains a reference to
             a RowSelectorEvent if the click or double click resulted in (de)selection of the row, otherwise
             it will be null. ClickActionEvent.isDblClick() determines whether the click event was
             a single click or a double click.
                </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>clickedRow</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
           The table row that was last clicked. Setting this to some value will not effect row selection.
                </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>dblClickDelay</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
            <p>
            The delay or timeout in milliseconds to wait for a second click (after a first click has been made on a row) to notify 
            the server whether the ClickActionEvent was a single click or a double click. This attribute only applies 
            when clickListener and/or clickAction are specified. Valid values are 0 to 1000. Default is 200.
            </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>enhancedMultiple</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p> When enhancedMultiple is true, it allows following selection
        behaviour:
            <ul>
                <li> "Click" selects clicked row and deselects rest </li>
                <li> "Click + Ctrl" flip the selection of clicked row and keeps 
                previous selection intact</li>
                <li> "Click + Shift" selects all rows from last clicked row to 
                newly clicked row, and deselect rest</li>
                <li> "Click + Shift + Ctrl" selects all rows from last clicked 
                row to newly clicked row and keeps previous selection intact</li>
            </ul>          
        </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>If true, the selectionListener and selectionAction will be 
        executed immediately, during Apply Request Values phase of the request 
        processing lifecycle, and if false, during the Invoke Application phase. 
        The default value is true, for backwards compatibility.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>keyboardNavigationEnabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p> Enables keyboard support. Default value is true. When true it 
        enables "up" and "down" arrow keys to set the focus on rows, as it was hovered 
        by the mouse. Once row has a focus then it can be selected/deselected by
        hitting the "space" or "enter" key</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>mouseOverClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
				 This method has been deprecated in 1.6. Please use the styleClass
				 instead.
                </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>multiple</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p> When true, more then one row can be selected. Default is false.
                </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>preStyleOnSelection</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p> When the user (de)selects a row, there can be a latency 
		             with the network communication with the server, and the 
		             JSF lifecycle executing, before the client will be updated
		             to depict the row selection. When <b>preStyleOnSelection</b>
		             is true, the table row's styling will be updated immediately,
		             improving the application's perceived responsiveness. When
		             applications directly manage row selection, on the server 
		             side, to implement specific rules for (de)selection, they
		             should see this to false, to avoid styling being set and 
		             reset. For backwards compatibility with such applications,
		             the default value is false.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>selectedClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
				 This method has been deprecated in 1.6. Please use the styleClass
				 instead.
                </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>selectedMouseOverClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
				 This method has been deprecated in 1.6. Please use the styleClass
				 instead.
                </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>selectionAction</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
             Action method to call when a row is clicked
                </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>selectionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
             Listener method to call with a RowSelectorEvent when a row is (de)selected 
                </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>singleRowAutoSelect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>When true selects rows automatically on arrow key events in single selection mode</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
              Space-separated list of CSS style class(es) to be applied when this
              element is rendered. This value must be passed through as the 
              "class" attribute on generated markup.<br/>
                Default value is <b>iceRowSel</b>:<br/>        
               Style Classes Used:
                     <ul>
                       <li>iceRowSelMouseOver</li>
                       <li>iceRowSelSelected</li>                      
                       <li>iceRowSelSelectedMouseOver</li> 
                     </ul>  
                </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>toggleOnClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
		Do row selection on mouse click. When false, row (de)selection will not 
        happen when the user clicks on a table row. Default value is true.
                </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>toggleOnInput</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
		Do row selection, even when the user clicks on an input field or link 
		in a table cell. Default value is true. When false, row (de)selection
		will not happen when the user clicks inside an input field, list,
		menu, button, or link.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>A ValueBinding to a per dataTable row java.lang.Boolean 
		property, which determines if that row is selected. Typically the 
		ValueBinding refers to a property of the dataTable's <i>var</i>
		attribute, but another strategy is to use a smart java.util.Map to 
		centrally maintain the selection state.</p>
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>selectInputDate</name>
    <tag-class>com.icesoft.faces.component.selectinputdate.SelectInputDateTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The selectInputDate component renders a localized dateSelect. Users may select a date by clicking
            on a date in the displayed month. The displayed month and year can be changed using arrow buttons or dropdown lists.
            Optionally, the selectInputDate component may be used in popup mode. In this mode an inputText
            component is rendered that displays the selected date. Users may enter a date directly into the
            inputText component, or optionally click a button beside the inputText component to display a popup
            dateSelect view. Selecting a date in the dateSelect closes  the popup dateSelect view and updates the
            selected date.<br>
            The selectInputDate component can be used in cases where a date value must be displayed or entered. 
            <p>
             In order to highlight a day, following three attributes need to be 
             set with corresponding values:
            <ol>
                <li> highlightClass
            	<li> highlightUnit   
            	<li> highlightValue
            </ol>
            (e.g.)
            &lt;ice:selectInputDate highlighClass="newyear"
            					 highlightUnit="DAY_OF_YEAR"
            					 highlightValue="1" /&gt;
            <p>					 	
            To highlighting days in more granular fashion, above attributes can 
            be set to defining more then one rules by separating them with : 
            colon (e.g.)<br/>

            &lt;ice:selectInputDate highlighClass="newyear: weekend"
            					 highlightUnit="DAY_OF_YEAR: DAY_OF_WEEK"
            					 highlightValue="1: 7" /&gt;
            </p>
            <p>					 	
            A rule can be set to defining more then one values using comma "," (e.g.)<br/>
            &lt;ice:selectInputDate highlighClass="newyear: weekend"
            					 highlightUnit="DAY_OF_YEAR: DAY_OF_WEEK"
            					 highlightValue="1: 1, 7" /&gt;	 <br/>
            </p>            
			NOTE: all 3 highlight attributes should have a corresponding values.<br/>
                  The action and actionListener will only be fired, when "enter" 
                  being pressed on a input text in a popup mode.<br/><br/> 

            Time Entry: When the f:convertDateTime is configured to show time, the calendar will include a time editing UI.  
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing the application action to invoke when
		this component is activated by the user. The expression must
		evaluate to a either a String or a public method that takes no
		parameters, and returns a String (the logical outcome) which is
		passed to the NavigationHandler for this application.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing an action listener method that will be 
		notified when this component is activated by the user. The expression 
		must evaluate to a public method that takes an ActionEvent parameter, 
		with a return type of void. 
      ]]></description>
    </attribute>

    <attribute>
      <name>autocomplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
        Converter must be a javax.faces.convert.DateTimeConverter instance, or subclass,
        which can be accomplished by using the f:convertDateTime tag.
        Note: DateTimeConverter's default timeZone, if none is specified, is GMT.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>highlightClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
		This attribute defines class(s) for days to be highlighted.
		<br/>Note: In order to highlight a day, following three attributes need to be 
             set with corresponding values:
            <ol>
                <li> highlightClass
            	<li> highlightUnit   
            	<li> highlightValue
            </ol> 
        </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>highlightUnit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>This attribute defines the level where highlight need to
		be applied. The valid values can be set using the following 
		java.util.Calendar constants:
		<UL>
			<LI>YEAR
        	<LI>MONTH
        	<LI>WEEK_OF_YEAR
        	<LI>WEEK_OF_MONTH
        	<LI>DATE
        	<LI>DAY_OF_YEAR
        	<LI>DAY_OF_WEEK
        	<LI>DAY_OF_WEEK_IN_MONTH
        </UL>
		Above units can be defined using String representation or as constant
		as well (e.g.) <br/>
		*.jsp<br/>
		&lt;ice:selectInputDate highlightUnit="YEAR".. /&gt; <br/>
		equivalent to <br/>
		&lt;ice:selectInputDate highlightUnit="1".. /&gt; <br/>
		bean </br>
		public String getHighlightUnit() {
			return String.valueOf(Calendar.YEAR); 
		}		
		<br/>
		Note: In order to highlight a day, following three attributes need to be 
             set with corresponding values:
            <ol>
                <li> highlightClass
            	<li> highlightUnit   
            	<li> highlightValue
            </ol>
        </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>highlightValue</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
		This attribute defines the value to be highlighted appropriate to 
		the corresponding highlightUnit attribute.
		(e.g.) <br/>
		MONTH = 1 to 12<br/>
		DAY_OF_WEEK = 1 to 7
		<br/>
		Note: In order to highlight a day, following three attributes need to be 
             set with corresponding values:		
            <ol>
                <li> highlightClass
            	<li> highlightUnit   
            	<li> highlightValue
            </ol>             
        </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>imageDir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set directory for location of the button images. Deprecated. Use styleClass instead.
        The style class name for a button is made up of the styleClass name plus a predefined name.
        For example: with a styleClass name of "myCalendar", the button class names would be:
        myCalendarMovePrev, myCalendarMoveNext, myCalendarOpenPopup, myCalendarClosePopup.
        Override the images with the background-image property.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>inputTitle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Tooltip for the text input field.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is true.
      ]]></description>
    </attribute>

    <attribute>
      <name>popupDateFormat</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        DEPRECATED
        Now one should instead use an f:convertDateTime tag with its pattern attribute.
        This is the pattern of the simple date format used in the text input, when renderAsPopup = true
        Also, if the <b>title</b> attribute is not specified, then <b>popupDateFormat</b> will be used to describe the date format, in the title attribute rendered on the text input field, when renderAsPopup = true
      ]]></description>
    </attribute>

    <attribute>
      <name>readonly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that this component will prohibit changes by the user. 
		The element may receive focus unless it has also been disabled. This
        attribute is valid for input types "text" and "password" only. It is
        non-functional for other input types like "radio" or "checkbox".
      ]]></description>
    </attribute>

    <attribute>
      <name>renderAsPopup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If true, render the selectInputDate as an inputText field with a button,
        which when pressed, displays a popup calendar. Else if false,
        only render the calendar, in-place.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderMonthAsDropdown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If true, the list of months is rendered in a dropdown list.
        If false (the default), only the specified month is rendered,
        with left and right arrow buttons to navigate to other months.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderYearAsDropdown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If true, a list of 11 years is rendered in a dropdown list, with the specified year in the middle,
        plus a "previous" item and a "next" item to navigate to other years.
        If false (the default), only the specified year is rendered, with left
        and right arrow buttons to navigate to other years.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that the user is required to provide a submitted value 
		for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
              <p>Defines the base class name for all style classes. Default value is <b>iceSelInpDate</b></p>
              if enabled
              <ul>
                <li>iceSelInpDate</li>
                <li>iceSelInpDateInput</li>
                <li>iceSelInpDateMonthYear</li>
                <li>iceSelInpDateMoYrDropdown</li>
                <li>iceSelInpDateWeek</li>
                <li>iceSelInpDateDay</li>
                <li>iceSelInpDateCur</li>
                <li>iceSelInpDatePopup</li>
                <li>iceSelInpDateOpenPopup</li>
                <li>iceSelInpDateClosePopup</li>                
              </ul>
              if disabled
              <ul>
                <li>iceSelInpDate-dis</li>
                <li>iceSelInpDateInput-dis</li>
                <li>iceSelInpDateMonthYear-dis</li>
                <li>iceSelInpDateMovePrev-dis</li>
                <li>iceSelInpDateMoveNext-dis</li>
                <li>iceSelInpDateWeek-dis</li>
                <li>iceSelInpDateDay-dis</li>
                <li>iceSelInpDatePopup-dis</li>
                <li>iceSelInpDateOpenPopup-dis</li>
              </ul> 
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a validator method that will be called 
		during Process Validations to perform correctness checks on the value 
		of this component. The expression must evaluate to a public method that 
		takes FacesContext, UIComponent, and Object parameters, with a return 
		type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>The current value of this component.</p>
        <p>All UIInput derived UIComponents, that are placed within a UIData 
        container, such as a dataTable or panelSeries, should have their 
        <i>value</i> attribute bound to a bean property via a 
        ValueBinding/ValueExpression, since otherwise the UIData container 
        will not keep their successfully validated state, which can cause 
        the component to fail to function properly.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a value change listener method that will be 
		notified when a new value has been set for this input component. The 
		expression must evaluate to a public method that takes a 
		ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>selectInputText</name>
    <tag-class>com.icesoft.faces.component.selectinputtext.SelectInputTextTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
            <p>The selectInputText component provides an inputText component enhanced with auto-complete functionality.
            As the user enters text into the component it provides a popup list of possible matching values that the
            user may select from. The component predicts a word or phrase that a user wants to type in without the user
            actually completely typing it in. The selectInputText component requires developers to implement the 
            matching list search algorithm in their backing bean.
            <p>
            The selectInputText component can generate one of two types of lists:<br/>
               1. A list of String data.<br/>
               2. A list of arbitrarily complex child components.<br/><br/>
           The server call delay frequency can be configured using the "options" attribute. Please see the description of 
           "options" attribute for detail.
    ]]></description>

    <attribute>
      <name>accesskey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Access key that, when pressed, transfers focus to this element.
      ]]></description>
    </attribute>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing the application action to invoke when
		this component is activated by the user. The expression must
		evaluate to a either a String or a public method that takes no
		parameters, and returns a String (the logical outcome) which is
		passed to the NavigationHandler for this application.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing an action listener method that will be 
		notified when this component is activated by the user. The expression 
		must evaluate to a public method that takes an ActionEvent parameter, 
		with a return type of void. 
      ]]></description>
    </attribute>

    <attribute>
      <name>alt</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Alternate textual description of the element rendered by this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>autocomplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Passed through to root element.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>dir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Direction indication for text that does not inherit directionality.
			  Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>effect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The Javascript Effect
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Code describing the language used in the generated markup for this 
		component.
      ]]></description>
    </attribute>

    <attribute>
      <name>listValue</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The list of selectItem components.
      ]]></description>
    </attribute>

    <attribute>
      <name>listVar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Name of a request-scope attribute under which the model data for
		the row selected by the current value of the "rowIndex" property
		(i.e. also the current value of the "rowData" property) will be
		exposed.
      ]]></description>
    </attribute>

    <attribute>
      <name>maxlength</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The maximum number of characters that may be entered in this field.
      ]]></description>
    </attribute>

    <attribute>
      <name>onblur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Javascript code executed when this element loses focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onchange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element loses focus and its value 
		has been modified since gaining focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>ondblclick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>ondblclickeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on ondblclick event
      ]]></description>
    </attribute>

    <attribute>
      <name>onfocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when this element receives focus.
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeydown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeydowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeydown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeypress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeypresseffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeypress event
      ]]></description>
    </attribute>

    <attribute>
      <name>onkeyup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onkeyupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onkeyup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousedown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousedowneffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousedown event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmousemove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmousemoveeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmousemove event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseouteffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouse event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseover</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseovereffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseover event
      ]]></description>
    </attribute>

    <attribute>
      <name>onmouseup</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>onmouseupeffect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Effect invoked on onmouseup event
      ]]></description>
    </attribute>

    <attribute>
      <name>onselect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Javascript code executed when text within this element is selected by 
		the user.
      ]]></description>
    </attribute>

    <attribute>
      <name>options</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
           <p>      The value of this attribute will be passed to the "options" param of the
            Autocompleter.js. Which allows to set different options to the autoCompleter object.         
            For example the server call delay frequency can be changed to 100 Milliseconds (e.g.)<br/>

            &nbsp;&nbsp;&lt;ice:selectInputText options="{frequency:0.1}" ... &gt;<br/>
            The default delay is 0.4 Seconds (400 Milliseconds)<br/>
            Please see the scriptaculous doc to find out more options that can be set.               
      ]]></description>
    </attribute>

    <attribute>
      <name>partialSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Enable component to perform partial submit. Default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>readonly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that this component will prohibit changes by the user. 
		The element may receive focus unless it has also been disabled. This
        attribute is valid for input types "text" and "password" only. It is
        non-functional for other input types like "radio" or "checkbox".
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Flag indicating that the user is required to provide a submitted value 
		for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The number of rows to display, starting with the one identified
		by the "first" property. If this value is set to zero, all
		available rows in the underlying data model will be displayed.
      ]]></description>
    </attribute>

    <attribute>
      <name>size</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The number of characters used to determine the width of this field.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
              <p>Base name for the style classes. Deafult is <b>iceSelInpTxt</b>.</p>
                if enabled
                <ul>
                    <li>iceSelInpTxt</li>
                    <li>iceSelInpTxtTxt</li>
                    <li>iceSelInpTxtList</li>
                    <li>iceSelInpTxtRow</li>
                    <li>iceSelInpTxtSelRow</li>
                </ul>
                if disabled
                <ul>
                    <li>iceSelInpTxt-dis</li>
                    <li>iceSelInpTxtTxt-dis</li>
                </ul>   
      ]]></description>
    </attribute>

    <attribute>
      <name>tabindex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Position of this element in the tabbing order for the current document. 
		This value must be an integer between 0 and 32767.	
      ]]></description>
    </attribute>

    <attribute>
      <name>textChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		<p>MethodBinding behaving similarly to valueChangeListener. 
		The target bean method will receive an argument of type 
		com.icesoft.faces.component.selectinputtext.TextChangeEvent, 
		which is a subclass of ValueChangeEvent. The new value in the 
		event is the submittedValue of the SelectInputText component.</p>
		<p>The purpose of textChangeListener is to notify when the user 
		has manually typed in text into the SelectInputText component, as 
		opposed to selecting a list entry. This way, the application can 
		refine the selection list, from the entered text.</p>
		<p>The MethodBinding is invoked in the APPLY_REQUEST_VALUES phase, 
		much like RowSelector's selectionListener, allowing for the bean 
		method to call FacesContext.getCurrentInstance().renderResponse(), 
		and keep validation from happenning, on partially inputted text 
		which would be known to fail validation.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Advisory title information about markup elements generated for this 
		component.	
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a validator method that will be called 
		during Process Validations to perform correctness checks on the value 
		of this component. The expression must evaluate to a public method that 
		takes FacesContext, UIComponent, and Object parameters, with a return 
		type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>The current value of this component.</p>
        <p>All UIInput derived UIComponents, that are placed within a UIData 
        container, such as a dataTable or panelSeries, should have their 
        <i>value</i> attribute bound to a bean property via a 
        ValueBinding/ValueExpression, since otherwise the UIData container 
        will not keep their successfully validated state, which can cause 
        the component to fail to function properly.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing a value change listener method that will be 
		notified when a new value has been set for this input component. The 
		expression must evaluate to a public method that takes a 
		ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Set the visibility of this component. When false CSS style is
		set to display:none
      ]]></description>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Sets the width of both, inputText and associated drop down list.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>setEventPhase</name>
    <tag-class>com.icesoft.faces.component.seteventphase.SetEventPhaseTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      The Set Event Phase component allows one to specify the phase that 
certain events will be broadcast in, for events originating from components 
in its child hierarchy. The component has the following attributes  
<ul>
  <li><b>events</b> Space delimited list of class names of events that should 
      be changed to be broadcasted in the specified phase. Default is for no 
      events to be affected.</li>
  <li><b>phase</b> The phase for the spefified events to be broadcasted in. 
      One of: ANY, APPLY_REQUEST_VALUES, PROCESS_VALIDATIONS, 
      UPDATE_MODEL_VALUES, INVOKE_APPLICATION.</li>
</ul>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Disable the altering of event phases. This will not disable child input components, though.
      ]]></description>
    </attribute>

    <attribute>
      <name>events</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The types of events that should be changed to be broadcasted in the 
        different phase. Specified as a space delimited list of event class 
        names. If a short version of the class name is given, without a 
        package name, then "javax.faces.event" will be assumed. An event will 
        be determined to match the entries in this property if it passes the 
        instanceof test, meaning that if it is exactly that class, or is a
        subclass. If all events should have their phase changed, simply specify
        FacesEvent as the value of this property.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>phase</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The name of the phase to change events to be broadcasted in. It can be 
        one of: ANY, APPLY_REQUEST_VALUES, PROCESS_VALIDATIONS, 
        UPDATE_MODEL_VALUES, INVOKE_APPLICATION.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>commandSortHeader</name>
    <tag-class>com.icesoft.faces.component.commandsortheader.CommandSortHeaderTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The commandSortHeader component is used in conjunction with a dataTable.
            The commandSortHeader renders a clickable column header facet allowing the user to toggle
            the sort order of data in the table, either ascending or descending based on the values in
            the column.<br>
            The commandSortHeader can be used to provide a user-controlled data sorting
            capability to a dataTable. 
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing the application action to invoke when
          this component is activated by the user.  The expression must
          evaluate to a either a String or a public method that takes no parameters, and returns
          a String (the logical outcome)  which is passed to the
          NavigationHandler for this application.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing an action listener method that will be
          notified when this component is activated by the user.  The
          expression must evaluate to a public method that takes an
          ActionEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>arrow</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Indicates whether an arrow, that shows the sort direction should be 
		rendered. Default: false <br/>
		Note: This is deprecated. It no longer has any effect in 1.7. To alter 
		the appearance of the arrow images, the following style classes need to be
		customized:<ul>
		  <li>iceCmdSrtHdrAsc</li>
		  <li>iceCmdSrtHdrDesc</li>
		</ul>
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>columnName</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The name of this column. This name must uniquely identify this column among 
		all other (sortable) columns in the same data_table. The sortColumn attribute 
		of the embedding data_table reflects the current sort column (see extended 
		data_table).
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		The base name for all style classes. Default value is <b>iceCmdSrtHdr</b> 
		if enabled and <b>iceCmdSrtHdr-dis</b> if disabled.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The current value of this component.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>treeNode</name>
    <tag-class>com.icesoft.faces.component.tree.TreeNodeTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <description><p> The treeNode tag provides the template that be applied in rendering each node in the
            backing data model. The treeNode tag supports two facets: the icon facet and the content facet. The icon facet is 
            intended to contain a graphic image that will serve as the icon for the node it represents. This 
            image can be customized for each node, or default icons for leaf nodes, expand branch nodes, and contracted 
            branch nodes will be used. The content facet can contain any collection of components. For each node in the tree's backing 
            data model, the child components of the two facets will be rendered with state retrieved from the
            data model as configured in the JSP by the application developer.<br> </description>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>tree</name>
    <tag-class>com.icesoft.faces.component.tree.TreeTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      <p>The tree component displays hierarchical data as a "tree" of branches  and leaf nodes.
            Optionally, the tree may also display navigation controls for the dynamic expansion
            and collapse of branch nodes. Tree navigation events are available so that an application 
            can respond to these events. Nodes may also support an action event that can be used to respond
            to user click events. <br>
            The tree component can be used in cases where a hierarchical data structure must be viewed
            and navigated. It is typically used for menu-style applications, where the user selects
            a tree node and the application responds with an action related to the selected node.<br>
            In implementing a tree tag, the application developer must provide declare in the JSP a tree tag and 
            a single treeNode tag as a child of the tree tag. The tree tag should declare the "value" attribute
            to be a value binding to a backing bean that will return an object that implements the 
            javax.swing.tree.TreeModel interface. The TreeModel must contain a tree of DefaultMutableTreeNode instances.
            Each DefaultMutableTreeNode instance encapsultes an IceUserObject. The IceUserObject is the extension point
            for the application developer. If the IceUserObject does not provide sufficient state for representation
            of the tree's nodes, then the application developer should extend the IceUserObject and add state as required 
            to their extension. When creating an IceUserObject, the DefaultMutableTreeNode wrapper must
            be provided to the constructor. Then the node's state can be set to the attributes on the IceUserObject including:
            text, a convenience field that will typically represent the text that will be displayed somewhere 
            in the content facet; expanded, whether the node is expanded on its first rendering and until the 
            user initiates a navigation event to change this value; tooltip, the text that will appear in the 
            tooltip that appears when the user hovers over a node; leafIcon, the application-relative path to 
            an image that will be used to represent this node when it has no children (is a leaf),
            typically referred to in the icon facet; branchExpandedIcon, the application-relative path to 
            an image that will be used to represent this node when it has children (is a branch) and is expanded,
            typically referred to in the icon facet; branchContractedIcon, the application-relative path to 
            an image that will be used to represent this node when it has children (is a branch) and is not expanded,
            typically referred to in the icon facet. The "binding" attribute can be defined so that the 
            application developer will have access to the Tree component in the application's backing bean.
            The "var" attribute can be declared on the tree tag such that the treeNode tag's children have 
            access to the state of the TreeModel's node that it represents.<br>
            See the documentation for the treeNode tag for a description of supported facets.
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing the application action to invoke when
		this component is activated by the user. The expression must
		evaluate to a either a String or a public method that takes no
		parameters, and returns a String (the logical outcome) which is
		passed to the NavigationHandler for this application.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		MethodBinding representing an action listener method that will be 
		notified when this component is activated by the user. The expression 
		must evaluate to a public method that takes an ActionEvent parameter, 
		with a return type of void. 
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>documentImage</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      ]]></description>
    </attribute>

    <attribute>
      <name>folderImage</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      ]]></description>
    </attribute>

    <attribute>
      <name>folderOpenImage</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      ]]></description>
    </attribute>

    <attribute>
      <name>hideNavigation</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Declares whether the navigation links will be rendered. Valid
        values are true and false.
      ]]></description>
    </attribute>

    <attribute>
      <name>hideRootNode</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
           Declares whether the root tree node will be rendered. Valid
        values are true and false.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>imageDir</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Set directory for location of the tree images.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		Flag indicating that this component's value must be converted
		and validated immediately (that is, during Apply Request Values
		phase), rather than waiting until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>keyboardNavigationEnabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Enables keyboard support, default value is true.
      ]]></description>
    </attribute>

    <attribute>
      <name>navCloseTop</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>navOpenTop</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Name of the image that overrides the default image.
      ]]></description>
    </attribute>

    <attribute>
      <name>navOpenTopNoSiblings</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Name of the image that overrides the default image.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>
		Space-separated list of CSS style class(es) to be applied when this 
		element is rendered. This value must be passed through as the "class" 
		attribute on generated markup.
		</p>
        <p>Defines the base class name for all style classes.
        Default value is <b>iceTree</b></p>
              </p><ul>
                <li>iceTree</li>
                <li>iceTreeRow</li>
              </ul>              
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the component's model value, which must be a JSF value binding expression 
        to an implementation of the "javax.swing.tree.TreeModel" interface.
      ]]></description>
    </attribute>

    <attribute>
      <name>var</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Name of a request-scope attribute under which the model data for
        the row selected by the current value of the "rowIndex" property
        (i.e. also the current value of the "rowData" property) will be
        exposed.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelPositioned</name>
    <tag-class>com.icesoft.faces.component.panelpositioned.PanelPositionedTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
       With the positioned panel component lists can be used to 
             generate a series of repeating child-components within a panel. 
             Each one of these child-components is draggable and can exchange 
             positions with other children in the same panel as well as a child 
             component can be moved between different positioned panels components. 
             When a Child Component is moved the source value (java.util.List/Array ) 
             for the positioned Panel is modified by the component to reflect the 
             new order of the positioned panel. <br/>
             (e.g.) <br/>
            &lt;ice:panelPositioned var="person" <br/>
                                 value="#{panelPositioned.people}"
                                &gt;<br/>
                &lt;ice:panelGroup style="cursor:move;"&gt;<br/>
                        &lt;ice:outputText value="#{person.name}"/&gt;<br/>
                &lt;/ice:panelGroup&gt;<br/>
            &lt;/ice:panelPositioned&gt;    <br/>         
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value binding expression linking this component to a property in a backing bean
      ]]></description>
    </attribute>

    <attribute>
      <name>constraint</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         <p>    
	        The following are the valid values for this attribute. This attribute
	        has an impact on the presentation of the positioned element while dragging.
         </p>
         <ul>
            <li> horizontal: <br/> While dragging an item horizontally outside 
            from the positioned panel. The draggable element can be seen moving 
            outside, whereas with the "vertical" you can drag an element outside 
            but the draggable elemement doesn't go out of its container.</li>
            <li> vertical: <br/> While dragging an item vertically, the item 
            underneath it moves up or down smoothly with slide effect and makes 
            an empty space for the draggaed item, whereas in horizontal mode you
            don't see the slide effect</li>
            <li> false: <br/> You can drag the positioned element vertically or horizontally
            but you don't see any slide effect as well as the draggable element 
            doesn't go outside of its panel.
            </li>
         </ul>
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
			 Flag indicating that this element must never receive focus or be 
			 included in a subsequent submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>enabledOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		If user is in given role, this component will be rendered
		normally. If not, the component will be in disabled state.
      ]]></description>
    </attribute>

    <attribute>
      <name>first</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Note: This is deprecated.<br/>
      ]]></description>
    </attribute>

    <attribute>
      <name>handle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        	The css class of a child node that is used to drag the item. (e.g.)<br/>
            &lt;ice:panelPositioned var="person" <br/>
                                 value="#{panelPositioned.people}"
                                 handle="personClass"
                                &gt;<br/>
                &lt;ice:panelGroup &gt;<br/>
                        &lt;ice:outputText style="cursor:move;" styleClass="personClass" value="drag #{person.name}"/&gt;<br/>
                        &lt;ice:outputText value="this panel can only be dragged by the person name."/&gt;<br/>
                &lt;/ice:panelGroup&gt;<br/>
            &lt;/ice:panelPositioned&gt;    <br/> 
      ]]></description>
    </attribute>

    <attribute>
      <name>hoverclass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Note: This is deprecated.<br/>
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			The component identifier for this component. This value must be 
  			unique within the closest parent component that is a naming 
  			container.
      ]]></description>
    </attribute>

    <attribute>
      <name>listener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		Listener, called when list is changed. Which takes a PanelPositionedEvent.
		(e.g.) <br/>
		    public void methodName(PanelPositionedEvent event);
      ]]></description>
    </attribute>

    <attribute>
      <name>overlap</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Note: This is deprecated. <br/>     
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  			Flag indicating whether or not this component should be rendered 
  			(during Render Response Phase), or processed on any subsequent form 
  			submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>renderedOnUserRole</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

		If user is in given role, this component will be rendered
		normally. If not, nothing is rendered and the body of this tag
		will be skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Note: This is deprecated.<br/>
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
		CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
 		 <p>
              Space-separated list of CSS style class(es) to be applied when
              this element is rendered.  This value must be passed through
              as the "class" attribute on generated markup.
              <br/> The default class would be rendered as <b>icePnlPos</b>
         </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The data model for this component. Could be a java.util.List or an Array
      ]]></description>
    </attribute>

    <attribute>
      <name>var</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Name of a request-scope attribute under which the model data presented for
        the current row.
      ]]></description>
    </attribute>

    <attribute>
      <name>varStatus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        <p>Name of a request-scope attribute under which the current indexed  
        state will be exposed. This is modeled after the Facelets JSTL c:forEach  
        varStatus. The varStatus object has 5 sub-properties:</p>
        <dl>
        <dt>int <b>begin</b></dt> 
        <dd>Corresponds to the UIData container's <b>first</b> property, the 
            index at which it begins iteration.</dd>
        <dt>int <b>end</b></dt>
        <dd>The ending index of iteration, corresponding to the UIData 
            container's <b>first</b> plus <b>rows</b> minus 1. Note: 
            If the UIData's DataModel's isRowAvailable() method returns false, 
            prematurely ending iteration, then the actual ending index may not 
            equal the value for this <b>end</b> property.</dd>
        <dt>int <b>index</b></dt>
        <dd>The current iteration index. Corresponding to the UIData 
            container's getRowIndex() value, which also corresponds with the 
            UIData's DataModel's getRowIndex() value.</dd>
        <dt>boolean <b>first</b></dt>
        <dd>Defined simply as: <b>varStatus.index == varStatus.begin</b></dd>
        <dt>boolean <b>last</b></dt>
        <dd>Defined simply as: <b>varStatus.index == varStatus.end</b>. Note: 
            This has the same limitations as the <b>end</b> property.</dd>
      ]]></description>
    </attribute>

  </tag>


  <tag>
    <name>tabChangeListener</name>
    <tag-class>com.icesoft.faces.component.paneltabset.TabChangeListenerTag</tag-class>
    <body-content>empty</body-content>
    <attribute>
      <name>type</name>
      <required>true</required>
      <rtexprvalue>false</rtexprvalue>
      <description>the name of the class that will be added to the HtmlPanelTabbedPane component as a TabChangeListener</description>
    </attribute>
  </tag>

</taglib>
