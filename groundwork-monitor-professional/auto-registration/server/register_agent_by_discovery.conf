# register_agent_by_discovery.properties
#
# The values specified here are used to control the behavior of the
# registerAgentByDiscovery.pl script.
#
# Copyright (c) 2017-2018 GroundWork, Inc. (www.gwos.com).  All rights reserved.
# Use of this software is subject to commercial license terms.

# ====================================================================
# GroundWork Distributed Agent Auto-Setup Configuration Parameters
# ====================================================================

# Whether to process anything.  Turn this off if you want to disable this
# process completely, so auto-setup is prohibited.  This option is turned
# on in the default configuration file because the standard values are
# reasonable for most installations, and auto-setup will only take place
# under the auspices of trigger files controlled by the customer.  So
# we don't feel it is necessary to block auto-setup until it is locally
# configured.  To get the software to run, it must be turned on here once
# the rest of the setup is correct for your installation.
# [yes/no]
enable_processing = yes

# Possible debug_level values:
# 0 = no info of any kind printed, except for startup/shutdown
#     messages and major errors
# 1 = print just error info and summary statistical data
# 2 = also print basic debug info
# 3 = print detailed debug info
debug_level = 1

# Where to log audit and debug messages.
logfile = "/usr/local/groundwork/foundation/container/logs/register_agent_by_discovery.log"

# How large (in bytes) the logfile is allowed to grow before being subject to
# automatic logfile rotation.
max_logfile_size = 10000000

# The limit of how many logfiles to keep around during log rotation, including
# the currently active logfile.
max_logfiles_to_retain = 5

# Where to park lockfiles for possibly multiple concurrent copies of this script
# running in service of autosetup for multiple hosts.
lockfile_directory = "/usr/local/groundwork/gdma/autosetup_locks"

# Where active discovery instructions files will live.  We probably won't need
# this directory in this script, so for the time being it's commented out so if
# we do need it, we'll know that.
instructions_directory = "/usr/local/groundwork/apache2/htdocs/gdma_instructions"

# Where active discovery trigger files will live.  We probably won't need this
# directory in this script, so for the time being it's commented out so if we do
# need it, we'll know that.
trigger_directory = "/usr/local/groundwork/apache2/htdocs/gdma_trigger"

# Where discovery results from GDMA clients will be stored, along with
# results-analysis files.
results_directory = "/usr/local/groundwork/gdma/discovered"

# How large the discovery-results input can be, in bytes, before we declare
# an error.
max_input_size = 1000000

# How to treat discovery results when modifying the server configuration data.
# Planned (though not necessarily currently supported) options are:
#
# "from_scratch":     Force all existing config data into full conformance with
#                     the current discovery results; strip all extra config data
#                     not derivable from the current discovery results.
# "ignore_extras":    Modify existing config data that does not match the
#                     current discovery results, but leave in place any extra
#                     config data beyond that which is driven by the current
#                     discovery results.
# "non_destructive":  Only add new config settings; leave alone all existing
#                     config data that does not match the current discovery
#                     results.
#
# The global setting here may be overridden by a change_policy setting in the
# individual discovery trigger file for a given host.
default_change_policy = "non_destructive"

# The hostname_qualification option lets you specify what the server will do
# with the fully-qualified hostnames sent to the auto-registration facility
# by the clients.  Currently supported options are:
#
# "full":  Always use the fully-qualified hostname as the name of the client machine.
# "short":  Always use the unqualified hostname as the name of the client machine.
# "custom":  Invoke custom logic to determine the final form of each client hostname.
#
# Use of the "custom" option requires a renamed and modified copy of the
# AutoRegistration.pm module, to implement whatever specific custom logic you
# need for your site.  You will need to adjust the customer_network_package
# option in this configuration file to name your own modified package.
hostname_qualification = "full"

# Here you may specify a list of IP addresses that must be forced by
# the auto-registration script to be specific hostnames, in spite of
# whatever the calling machine thought its own hostname ought to be.  This
# capability is provided to handle the situation where for certain hosts,
# DNS is broken and cannot be easily repaired, so the host is unable to
# properly determine its own hostname, while the IP address is still
# considered to be reliable.  Use sparingly, get the situation fixed as
# quickly as you can, and then remove the corresponding entry here.
<hardcoded_hostnames>
# 192.168.0.15  = "myhost.example.com"
# 192.168.0.27  = "losthost"
# 192.168.0.42  = "anotherhost"
# 192.168.0.109 = "somewhere"
# 192.168.0.121 = "weirdhost"
# 192.168.0.137 = "remotehost"
# 192.168.0.211 = "strangehost"
</hardcoded_hostnames>

# The default host profile that will be applied to any newly-created
# host, if the client has not already provided a non-empty host profile
# name as part of the auto-registration call to the server.  In this
# host profile name, you can use the "{HOST_OS}" string as a pattern
# that will be substituted with the simplified operating system type
# identifier that the host sends in as part of its request ("aix",
# "hpux", "linux", "solaris", or "windows").
default_host_profile = "gdma-{HOST_OS}-host"

# The default hostgroup which is passed to the hostgroups_to_assign()
# routine in the customer_network_package (configured below) for
# assigning to any host processed by the auto-registration code.  That
# routine is free to override or ignore this default, depending on the
# full set of conditions that apply to the host.
default_hostgroup = "Auto-Registration"

# Whether hostgroup assignments (e.g., defined via the default_hostgroup
# option) should be made to existing hosts that already belong to some
# hostgroup.  If this option is false (the normal setting), an existing host
# will only be assigned to hostgroups if it currently has no membership in at
# least one hostgroup.  If this option is true, any hostgroups determined for
# this host by the auto-registration processing will be assigned even if the
# host already belongs to at least one hostgroup.  This is a global override,
# provided for simplicity of configuration.  A finer granularity of control may
# be achieved by setting this option to true, and creating a locally-modified
# customer_network_package (configured below) that will define precisely what
# hostgroup(s) do and do not get assigned to hosts.
assign_hostgroups_to_existing_hostgroup_hosts = false

# The default Monarch configuration group which is passed to the
# monarch_groups_to_assign() routine in the customer_network_package
# (configured below) for assigning to any host processed by the
# auto-registration code.  That routine is free to override or ignore
# this default, depending on the full set of conditions that apply to
# the host.
default_monarch_group = "auto-registration"

# Whether Monarch Group assignments should be made to existing hosts that
# already belong to some Monarch Group.  If this option is false (the normal
# setting), an existing host will only be assigned to Monarch Groups if it
# currently has no membership in at least one Monarch Group, either via direct
# assignment of the host to the Monarch Group or via indirect assignment through
# a hostgroup.  If this option is true, any Monarch Groups determined for this
# host by the auto-registration processing will be assigned even if the host
# already belongs to at least one Monarch Group.  This option is only being made
# available in case we have overlooked some use case where this might be useful.
# If you do enable this option, please report that fact back to GroundWork
# Support so we can understand how it is useful in practice.
# [true/false]
assign_monarch_groups_to_existing_group_hosts = false

# What external package to call to process customer-network hostnames.
#
# Set to "AutoRegistration" to use the standard, generic package for this
# purpose provided by Groundwork.
#
# Set to the name of your own package (e.g., "CustomerNetwork") with the same
# API, if you need to provide different behavior than what the GroundWork
# package supports.  Use the package name, not the file name (i.e., no ".pm"
# extension).
#
# Set to an empty string if you have no such external package.
#
# If you don't want any such package invoked, set this to "".
customer_network_package = "AutoRegistration"

# If an auto-registered host may have been discovered first by CloudHub, and in
# that context it might include some degree of mixed-case letters, it may be
# advantageous to see if the hostname is already present in Foundation and use
# that form of the name, if we don't at first find the host in Monarch.  That
# will allow all the monitored data to show up in the same page in the Status
# Viewer.  There is a performance penalty for doing this type of lookup, so you
# should only enable it if you actually need this type of matching.
# [true/false]
compare_to_foundation_hosts = false

# If you are looking up hostnames in Foundation, you have a choice of how to
# make those comparisons.  If you have carefully controlled the lettercase
# composition of your hostnames to be consistent throughout your infrastructure
# (a wise choice), then you should set match_case_insensitive_foundation_hosts
# to be false, since there is no advantage then to case-insensitive matching.
# If there is some variety of lettercase structure in your infrastructure, you
# might need to set this value to be true instead.  But think carefully before
# you do so; there is a *very* serious performance penalty for doing this type
# of lookup.  You will be much better off by squashing the variety of different
# capitalizations of hostnames at your site, and leaving this as false.
# [true/false]
match_case_insensitive_foundation_hosts = false

# Historically, we had auto-registration force hostnames to an all-lowercase
# format to provide simple consistency with the same behavior observed within
# the GDMA clients.  Such a rule guarantees that we get proper hostname
# matching in most contexts without having to do extra work to make that
# happen.  At some customer sites, that specific case-squashing choice may
# cause difficulty because of pre-existing host-naming conventions followed
# elsewhere in the infrastructure.  So this rule is now configurable at the
# customer site using the following two options.  Supported option values are:
#
# "lower":  Always lowercase the name component sent to the client machine.
# "upper":  Always uppercase the name component sent to the client machine.
# "as-is":  Do not modify the lettercase of the submitted/discovered client
#           machine name component.
#
# Be aware that if you disable forcing hostnames to a particular case both in
# GDMA clients and here in auto-registration, there may be unexpected side
# effects since it is possible that not all the system components are yet
# prepared to perform case-insensitive matching when that would then be the
# appropriate thing to do.
force_hostname_case = "lower"
force_domainname_case = "lower"

# When client-side DNS is not reliable, some hosts cannot make a correct
# determination of what their real IP address is.  In particular, the
# client DNS might return the same IP address for multiple different
# hostnames, especially if the hosts are not actually resolvable.  The
# ultimate and sensible fix is to get the desired DNS records properly
# adjusted, and to ensure that DNS is accessible from the client.  But
# sometimes that might not be possible, at least not in the short term.
# The use_hostname_as_key directive provides one kind of workaround for
# this situation.  This directive, if set true, uses the hostname for the
# Nagios host's "Address" field, thus avoiding the duplication across
# different hosts that can occur if the IP address is used in this field
# (the usual practice).  This can overcome some common duplicate-IP issues,
# mainly a misidentification of separate hosts as "matching" (because they
# seem to share an IP address) when they really don't match.  If your
# hostnames are not unique, either, you may want to consider using MAC
# addresses instead for this purpose (the use_mac_as_key option, below).
# [true/false]
use_hostname_as_key = false

# This directive uses the MAC address as the canonical address for the
# host.  It's not pingable, but in GDMA that is not always a requirement.
# In the presence of an unreliable DNS setup, which might map multiple
# hostnames to the same IP address, you are more likely to have a unique ID
# this way.
# [true/false]
use_mac_as_key = false

# This directive specifies the data and order in which address information
# supplied by the auto-discovery processing will be used to determine the
# address assigned to a new host.  The value specified here consists of some
# number of space-separated values of these forms, where CIDR_BLOCK stands
# for some arbitrary actual IPv4 or IPv6 CIDR block, and the other options
# are just literal strings as shown here:
#
#     CIDR_BLOCK    use a discovered IP address if it matches this CIDR block
#     mac_address   use the first discovered MAC address as the host address
#     hostname      use the chosen hostname as the host address
#     custom        invoke custom logic to analyze the discovery data
#
# Evaluation of discovered addresses will occur in the following manner.
# Each element specified in the host_address_selection will be evaluated in
# turn against the incoming data, and the first match will be taken as the
# address for the host.  If all elements are considered and no address is
# determined, application of the discovery results will fail for that host.
#
# (*) A CIDR block will, if matched by an incoming IP address, accept that
#     address as the host address.
# (*) "mac_address" will select the first discovered MAC address as the host
#     address.
# (*) "hostname" will select the chosen hostname as the host address; this
#     choice will always succeed.
# (*) "custom" will invoke customer-supplied logic to analyze the data and
#     come up with its own determination of the host address.
#
# To simply accept the first IP address of a certain address type returned
# by auto-discovery, use a CIDR block of "0.0.0.0/0" or "::/0", which will
# naturally match any IPv4 or IPv6 address, respectively.
#
# Example:  Suppose your GDMA clients are dual-homed, having IP addresses
# of 172.24.x.x for application interactions, and 172.23.x.x on most of the
# machines for management interactions (which would include monitoring).
# A very few machines don't have a 172.23.x.x address for management,
# but have an appropriate address in the 172.25.10.0/28 range instead.
# You could ensure that the management IP address is preferred as the
# configured address for each machine by specifying the corresponding CIDR
# blocks first, and then specifying a CIDR block for the application IP
# address as a fallback.  The matching for a given host would compare all
# the discovered IP addresses against the first CIDR block, and if no match
# is found, it would compare them all against the second CIDR block, and so
# forth.  The first match found would used as the host's assigned address.
#
#     host_address_selection = "172.23.0.0/16 172.25.10.0/28 172.24.0.0/16"
#
host_address_selection = "0.0.0.0/0 ::/0"

# ----------------------------------------------------------------
# Options for extracting host data from Foundation via the
# Foundation REST API.
# ----------------------------------------------------------------

# The application name by which the registerAgentByDiscovery.pl process
# will be known to the Foundation REST API.
rest_api_requestor = "agent auto-setup"

# Where to find credentials for accessing the Foundation REST API.
ws_client_config_file = "/usr/local/groundwork/config/ws_client.properties"

# There are six predefined log levels within the Log4perl package:  FATAL,
# ERROR, WARN, INFO, DEBUG, and TRACE (in descending priority).  We define
# two custom levels at the application level to form the full useful set:
# FATAL, ERROR, WARN, NOTICE, STATS, INFO, DEBUG, and TRACE.  To see an
# individual message appear, your configured logging level here has to at
# least match the priority of that logging message in the code.
#
# WARNING:  Setting this value any higher than "INFO" will generate HUGELY
# voluminous amounts of data, which will slow down your system and soon fill
# your disk.  DO NOT DO SO in production for any significant length of time.
GW_RAPID_log_level = "WARN"

# Application-level logging configuration, for that portion of the logging
# which is currently handled by the Log4perl package.
#
# As recommended in the Log4perl documentation, we DO NOT try to mirror Perl
# package names here as logging category names.  A more sensible classification
# of categories provides more intelligent control across applications.
log4perl_config = <<EOF

# Use this to send everything from FATAL through ${GW_RAPID_log_level} to the logfile.
# log4perl.category.Automated.Agent.Setup.GW.RAPID = ${GW_RAPID_log_level}, Logfile

# Use this to send everything from FATAL through ${GW_RAPID_log_level} to the buffer,
# to be flushed out to the logfile only when the program wants that to happen.
# log4perl.category.Automated.Agent.Setup.GW.RAPID = ${GW_RAPID_log_level}, Buffer
log4perl.category = ${GW_RAPID_log_level}, Buffer

# Send all Log4perl lines to the same log file as the rest of this application.
log4perl.appender.Logfile          = Log::Log4perl::Appender::File
log4perl.appender.Logfile.filename = ${logfile}
log4perl.appender.Logfile.utf8     = 0
log4perl.appender.Logfile.layout   = Log::Log4perl::Layout::PatternLayout
log4perl.appender.Logfile.layout.ConversionPattern = [%d{EEE MMM dd HH:mm:ss yyyy}] %m%n

log4perl.appender.Buffer               = Log::Log4perl::Appender::Buffer
log4perl.appender.Buffer.appender      = Logfile
# log4perl.appender.Buffer.trigger_level = ERROR

EOF

