#!/usr/local/groundwork/perl/bin/perl -w --
# MonArch - Groundwork Monitor Architect
# delete_services
#
############################################################################
# Release 4.0
# December 2011
############################################################################
#
# Copyright 2011 GroundWork Open Source, Inc. (GroundWork)
# All rights reserved. This program is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#

# use diagnostics;
use strict;

use Getopt::Long qw(:config no_ignore_case auto_version);
use DBI;

# We use "our" instead of "my" so Getopt::Long auto_version processing can access this value.
our $VERSION = '1.0.0';

sub print_usage {
print
"usage:  delete_services [-f] service_id ...
   or:  delete_services -h
where:  no options means check to see if all the specified services exist,
	    and if so, delete them all
	-f means force deletions:  delete all the specified services that
	    do exist, even if some of them do not exist
	-h means show this help message
	service_id is a primary key value in the monarch.services table;
	    for convenience, any commas appended to or interspersed within
	    the sequence of service_id values will be ignored
";
}

my $all_is_done  = 0;
my $monarch_home = '';
my $sqlstmt      = '';
my $sth          = undef;

my $show_help = 0;
my $force     = 0;

eval {
    my $result = GetOptions (
	'h' => \$show_help,
	'f' => \$force
    );
    if (!$result) {
	print_usage();
	exit 1;
    }
};
if ($@) {
    chomp $@;
    print "FATAL:  Internal error:  $@\n";
    exit 1;
}

$show_help = 1 if not @ARGV;

if ($show_help) {
    print_usage();
    exit 1;
}

my ( $dbhost, $database, $user, $passwd ) = undef;
if ( -e "/usr/local/groundwork/config/db.properties" ) {
    open( FILE, '<', '/usr/local/groundwork/config/db.properties' )
      or die "\n\tCannot open the db.properties file ($!); aborting!\n";
    while ( my $line = <FILE> ) {
	if ( $line =~ /\s*monarch\.dbhost\s*=\s*(\S+)/ )   { $dbhost   = $1 }
	if ( $line =~ /\s*monarch\.database\s*=\s*(\S+)/ ) { $database = $1 }
	if ( $line =~ /\s*monarch\.username\s*=\s*(\S+)/ ) { $user     = $1 }
	if ( $line =~ /\s*monarch\.password\s*=\s*(\S+)/ ) { $passwd   = $1 }
    }
    close(FILE);
    $monarch_home = '/usr/local/groundwork/core/monarch';
}
else {
    print "\n\tMonarch Service Deletion";
    print "\n=============================================================\n";
    print "\n\tReading configuration file ...\n";

    until ($monarch_home) {
	if ( -e "/usr/local/groundwork/core/monarch/lib/MonarchConf.pm" ) {
	    $monarch_home = "/usr/local/groundwork/core/monarch";
	    print "\n\tPlease enter the Monarch installation path [ $monarch_home ] : ";
	    my $input = <STDIN>;
	    chomp $input;
	    if ($input) { $monarch_home = $input }
	    my $monarch_test = $monarch_home . '/lib/MonarchConf.pm';
	    unless ( -e $monarch_test ) {
		print "\n\tError: Cannot locate MonarchConf.pm in path $monarch_home [/lib] ...\n";
		$monarch_home = '';
	    }
	}
	else {
	    print "\n\tPlease enter the Monarch installation path : ";
	    my $input = <STDIN>;
	    chomp $input;
	    if ($input) { $monarch_home = $input }
	    my $monarch_test = $monarch_home . '/lib/MonarchConf.pm';
	    unless ( -e $monarch_test ) {
		print "\n\tError: Cannot locate MonarchConf.pm in path $monarch_home [/lib] ...\n";
		$monarch_home = '';
	    }
	}
    }
    open( FILE, '<', "$monarch_home/lib/MonarchConf.pm" );
    while ( my $line = <FILE> ) {
	$line =~ s/\'|\"|;//g;
	if ( $line =~ /\s*\$dbhost\s*=\s*(\S+)/ )   { $dbhost   = $1 }
	if ( $line =~ /\s*\$database\s*=\s*(\S+)/ ) { $database = $1 }
	if ( $line =~ /\s*\$dbuser\s*=\s*(\S+)/ )   { $user     = $1 }
	if ( $line =~ /\s*\$dbpass\s*=\s*(\S+)/ )   { $passwd   = $1 }
    }
    close(FILE);
}

##############################################################################
# Connect to DB
##############################################################################

print "\n\tConnecting to $database database with user $user ...\n";

my $dsn = "DBI:mysql:database=$database;host=$dbhost";
my $dbh = undef;

# We turn AutoCommit off because we want to make changes roll back automatically as much as
# possible if we don't get successfully through the entire script.  This is not perfect (i.e.,
# we don't necessarily have all the changes made in a single huge transaction) because some of
# the transformations may implicitly commit previous changes, and there is nothing we can do
# about that.  Still, we do the best we can.
#
# We turn PrintError off because RaiseError is on and we don't want duplicate messages printed.

eval { $dbh = DBI->connect( $dsn, $user, $passwd, { 'AutoCommit' => 0, 'RaiseError' => 1, 'PrintError' => 0 } ) };
if ($@) {
    print "\nError: connect failed ($@)\n";
    die;
}
$dbh->do( "set session transaction isolation level serializable" );

##############################################################################
# Execution
##############################################################################

#-----------------------------------------------------------------------------
# First, verify that all the specified services exist.
#-----------------------------------------------------------------------------

my $all_service_ids_exist = 1;
my $got_duplicates = 0;
my @quoted_service_ids = ();
my $ignored_service_count = 0;

print "\n";

# For convenience in processing lists of services gathered from other tools, we
# preprocess the command-line arguments to allow comma-separated values without complaint.
foreach my $arg (@ARGV) {
    foreach my $service_id (split /,/, $arg) {
	$service_id =~ s/^\s+//;
	$service_id =~ s/\s+$//;
	next if $service_id eq '';
	if ($service_id !~ /^\d+$/) {
	    print "\tFATAL:  '$service_id' is not a valid service_id value!\n";
	    exit 1;
	}
	my $quoted_service_id = $dbh->quote($service_id);
	$sqlstmt = "select count(*) from services where service_id=$quoted_service_id";
	my @values = $dbh->selectrow_array($sqlstmt);
	if ($values[0]) {
	    push @quoted_service_ids, $quoted_service_id;
	}
	else {
	    $all_service_ids_exist = 0;
	    ++$ignored_service_count;
	    print "\tError:  service_id $quoted_service_id does not exist.\n";
	}
    }
}

#-----------------------------------------------------------------------------
# Then, delete whatever is appropriate.
#-----------------------------------------------------------------------------

if ($all_service_ids_exist || $force) {
    if (@quoted_service_ids) {
	$sqlstmt = 'delete from services where service_id=' . join(' or service_id=', @quoted_service_ids);
	$dbh->do($sqlstmt);
    }
    print "\n\tDeleted " . (scalar @quoted_service_ids) . " service" . (@quoted_service_ids == 1 ? '' : 's' ) .
	($ignored_service_count ? ", ignored $ignored_service_count service" . ($ignored_service_count == 1 ? '' : 's') : '') . ".\n\n";
}
else {
    print "\n\tWARNING:  No deletions were done, because of errors above.\n\n";
}

##############################################################################
# Committing Changes 
##############################################################################

# Commit all previous changes.
my $rc = $dbh->commit();

##############################################################################
# Done.
##############################################################################

$all_is_done = 1;

END {
    if ($dbh) {
	# Roll back any uncommitted transaction.
	eval {
	    my $rc = $dbh->rollback();
	};
	if ($@) {
	    print "\n\tError:  rollback failed: ", $dbh->errstr, "\n";
	}
	$dbh->disconnect();
    }
    if (!$show_help && !$all_is_done) {
	print "\n";
	print "\t====================================================================\n";
	print "\t    WARNING:  service deletions did not fully complete!\n";
	print "\t====================================================================\n";
	print "\n";
	exit 1;
    }
}

# FIX MAJOR:  this is just wrong
exit ( ($all_service_ids_exist || $force) && $all_is_done );

__END__

