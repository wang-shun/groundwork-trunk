#!/usr/local/groundwork/perl/bin/perl -w --

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use dassmonarch;

my $VERSION = "1.0.0";
( my $program = $0 ) =~ s{.*/}{};

use vars qw($opt_d $opt_V $opt_h $opt_s $opt_t $opt_man);

# Parse Command Line Opts
Getopt::Long::Configure('bundling');
GetOptions(
    "V"                => \$opt_V,
    "version"          => \$opt_V,
    "h"                => \$opt_h,
    "help"             => \$opt_h,
    "m"                => \$opt_man,
    "man"              => \$opt_man,
    "d=s"              => \$opt_d,
    "debuglevel=s"     => \$opt_d,
    "s=s"              => \$opt_s,
    "sourcetemplate=s" => \$opt_s,
    "t=s"              => \$opt_t,
    "targettemplate=s" => \$opt_t,
);

# GetOptions('-h' => \$opt_h, --man => \$opt_man) or pod2usage(2);
pod2usage( -verbose => 1 ) if $opt_h;
pod2usage( -exitval => 0, -verbose => 2 ) if $opt_man;

if ($opt_V) {
    print "$program version $VERSION.\n";
    exit 0;
}

if ( not $opt_s ) {
    print "$program:  source servicetemplate is not set; use -s to specify a servicetemplate to clone\n";
    exit 1;
}

if ( not $opt_t ) {
    print "$program:  target servicetemplate name is not set; use -t to specify a target servicetemplate name\n";
    exit 1;
}

my $dm = dassmonarch->new();

$dm->set_debuglevel( $opt_d || 'warning' );

if ( $dm->clone_service_template( $opt_s, $opt_t ) ) {
    $dm->debug( 'info', "$program:  service template $opt_s successully cloned to new service template $opt_t" );
}
else {
    $dm->debug( 'error', "$program:  could not clone service template $opt_s to $opt_t" );
}

__END__

=head1 NAME

monarch_clone_servicetemplate

=head1 SYNOPSIS

monarch_clone_servicetemplate -s sourcetemplate -t targettemplate

=head1 DESCRIPTION

Clones an existing service template.

=head1 OPTIONS

-d [error,warning,info,verbose]

=head1 ORIGINAL AUTHOR

dass IT GmbH maik.aussendorf@dass-it.de

=cut

# vim: tabstop=8 shiftwidth=4 softtabstop=4 smarttab noexpandtab
