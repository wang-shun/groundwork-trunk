*** noma_2.0.3/notifier/lib/database.pm.orig	Mon Nov 21 03:25:24 2011
--- noma_2.0.3/notifier/lib/database.pm	Thu Jan 29 15:31:27 2015
***************
*** 18,23 ****
--- 18,41 ----
  # TODO: implement cacheing
  # TODO: graceful recovery on SQL errors
  
+ # FIX MINOR:  This is something of a hack.  It doesn't handle embedded quote characters
+ # (not that we have any in the cases where this will be called); it's here mostly because
+ # we sometimes have table columns which are named using words that are keywords for some
+ # database engine, and we need identifier quoting to prevent confusion.  It should really
+ # be calling $dbh->quote_identifier($name); instead, which would fully solve the problem
+ # across all databases.  We're not currently doing that only because we don't have an open
+ # $dbh handle to reference.
+ #
+ # We might get 'table.column' sent to this function, not just a bare column name.
+ #
+ # Do not further quote the result of this function.
+ sub quoteIdentifier
+ {
+     my $identifier = shift;
+     my $id_quote = $conf->{db}->{type} eq 'mysql' ? '`' : '"';
+     return $id_quote . join( "$id_quote.$id_quote", split( /\./, $identifier ) ) . $id_quote;
+ }
+ 
  
  sub queryDB
  {
***************
*** 39,44 ****
--- 57,73 ----
  	        $conf->{db}->{mysql}->{user}, 		# MySQL Username
  		$conf->{db}->{mysql}->{password}	# MySQL Password
  	    ) or debug($DBI::errstr,1);
+     } elsif ($database_type eq 'postgresql'){
+             debug('Going to use PostgreSQL as backend...',3) unless defined($nolog);
+ 	    $dbh = DBI->connect(
+ 	        'DBI:Pg:host='
+ 	          . $conf->{db}->{postgresql}->{host}	# PostgreSQL NoMa Host
+ 	          . ';dbname='
+ 	          . $conf->{db}->{postgresql}->{database},	# PostgreSQL NoMa DB
+ 	        $conf->{db}->{postgresql}->{user}, 		# PostgreSQL Username
+ 		$conf->{db}->{postgresql}->{password},	# PostgreSQL Password
+         { 'AutoCommit' => 1 }
+ 	    ) or debug($DBI::errstr,1);
      } elsif ($database_type eq 'sqlite3'){
              debug('Going to use SQLite3 as backend...',3) unless defined($nolog);
  	    $dbh = DBI->connect(
***************
*** 48,58 ****
      }
  
      debug("QUERY: " . $queryStr, 2) if (defined($debug_queries) and ($debug_queries != 0) and not defined($nolog));
!     my $query = $dbh->prepare($queryStr) or return undef;
!     $query->execute or return undef;
  
      my $cnt = 0;
  
      if ( $dbh->rows && $queryStr =~ m/^\s*select/i )
      {
          if ( defined($array) )
--- 77,123 ----
      }
  
      debug("QUERY: " . $queryStr, 2) if (defined($debug_queries) and ($debug_queries != 0) and not defined($nolog));
!     my $query = $dbh->prepare($queryStr) or do {
! 	## Force out the query if it hasn't already been logged, so we always have something useful to debug.
! 	debug( "QUERY: " . $queryStr, 1 )
! 	  if $conf->{debug}->{logging} < 2 || not( defined($debug_queries) and ( $debug_queries != 0 ) and not defined($nolog) );
! 	debug('DB statement prepare error: '.$dbh->errstr,1);
! 	## FIX MAJOR:  See notes at the end of this routine.
! 	return undef;
!     };
!     $query->execute or do {
! 	## Force out the query if it hasn't already been logged, so we always have something useful to debug.
! 	debug( "QUERY: " . $queryStr, 1 )
! 	  if $conf->{debug}->{logging} < 2 || not( defined($debug_queries) and ( $debug_queries != 0 ) and not defined($nolog) );
! 	debug('DB statement execute error: '.$query->errstr,1);
! 	## FIX MAJOR:  See notes at the end of this routine.
! 	return undef;
!     };
  
      my $cnt = 0;
  
+     # FIX MINOR:  The use of $dbh->rows here is highly suspect, both by itself and
+     # especially in conjunction with a SELECT statement.  First of all, the DBI doc
+     # mentions no such routine for the $dbh handle; is $DBI::rows meant instead?
+     # And the DBI doc says about Statement Handle Methods:
+     #
+     #     rows
+     #
+     #     $rv = $sth->rows;
+     #
+     #     Returns the number of rows affected by the last row affecting command, or
+     #     -1 if the number of rows is not known or not available.
+     #
+     #     Generally, you can only rely on a row count after a non-SELECT execute
+     #     (for some specific operations like UPDATE and DELETE), or after fetching
+     #     all the rows of a SELECT statement.
+     #
+     #     For SELECT statements, it is generally not possible to know how
+     #     many rows will be returned except by fetching them all. Some drivers
+     #     will return the number of rows the application has fetched so far, but
+     #     others may return -1 until all rows have been fetched. So use of the
+     #     rows method or $DBI::rows with SELECT statements is not recommended.
+     #
      if ( $dbh->rows && $queryStr =~ m/^\s*select/i )
      {
          if ( defined($array) )
***************
*** 66,71 ****
--- 131,138 ----
              return @dbResult;
          } else
          {
+ 	    ## FIX MINOR:  This is strange design.  Why use the row number
+ 	    ## as a hash key instead of just returning an array??
              my %dbResult;
              while ( my $row = $query->fetchrow_hashref )
              {
***************
*** 77,82 ****
--- 144,160 ----
      }
      $dbh->disconnect();
  
+     # FIX MAJOR:  Returning a numeric zero when the caller is expecting an array or hash
+     # is a terrible idea.  You're mixing types in a manner that can get extremely confusing
+     # -- this makes it very difficult to correctly handle the variant possible return values
+     # in the calling code.  Perhaps better would be to return undef, but even then it's hard
+     # to know how to capture the routine results in a robust manner in the calling code.
+     # Perhaps the code should not try to collapse the execution of SELECT statements and
+     # other statement types into the same routine, but even for a SELECT, we still need to
+     # have some means of distinguishing an error return from a successful return.  Probably
+     # the best way to do so would be to return an arrayref, hashref, or undef -- all of them
+     # being scalar values.  That would make it easier for the calling code to test the result
+     # before attempting to use it.
      return 0;
  
  }
***************
*** 111,118 ****
  
          debug(' Checking DB schema version ',2);
  	# Create if not exists.
! #	my $query = 'CREATE TABLE if not exists information (id INTEGER  NOT NULL PRIMARY KEY AUTOINCREMENT,type varchar(20) NOT NULL,content varchar(20)  NOT NULL);';
! 	my $query = 'CREATE TABLE IF NOT EXISTS information (id int(11) NOT NULL,  `type` varchar(20)   NOT NULL,  content varchar(20)   NOT NULL)';
  	my $dbResult = queryDB($query);
  	# Select, if empty, should detect that the rest is empty/mismatch
          $query = 'select content from information where type=\'dbversion\'';
--- 189,202 ----
  
          debug(' Checking DB schema version ',2);
  	# Create if not exists.
! 	my $query;
! 	if ( $database_type eq 'sqlite3' || $database_type eq 'mysql' ) {
! 	    ## $query = 'CREATE TABLE if not exists information (id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, type varchar(20) NOT NULL, content varchar(20) NOT NULL);';
! 	    $query = 'CREATE TABLE IF NOT EXISTS information (id int(11) NOT NULL,  `type` varchar(20)   NOT NULL,  content varchar(20)   NOT NULL)';
! 	}
! 	elsif ( $database_type eq 'postgresql' ) {
! 	    $query = 'CREATE TABLE IF NOT EXISTS information (id integer NOT NULL, type character varying(20) NOT NULL, content character varying(20) NOT NULL)';
! 	}
  	my $dbResult = queryDB($query);
  	# Select, if empty, should detect that the rest is empty/mismatch
          $query = 'select content from information where type=\'dbversion\'';
***************
*** 161,167 ****
  					$dbversion=dbVersion($expecteddbversion,$loopstopper);
  				}
  			}
! 			elsif($database_type eq 'mysql'){
                                  # CHECK IF THERE IS ANYTHING THERE, LIKE AN OLDER VERSION
                                  if ($expecteddbversion < $dbversion){
                                          debug('The expected dbversion is lower than the actual db version, script mismatched to database?',1);
--- 245,251 ----
  					$dbversion=dbVersion($expecteddbversion,$loopstopper);
  				}
  			}
! 			elsif($database_type eq 'mysql' or $database_type eq 'postgresql'){
                                  # CHECK IF THERE IS ANYTHING THERE, LIKE AN OLDER VERSION
                                  if ($expecteddbversion < $dbversion){
                                          debug('The expected dbversion is lower than the actual db version, script mismatched to database?',1);
***************
*** 195,201 ****
  	my %dbSchemaFiles = (
                  'sqlite_new_install_structure'  => 'sqlite3/install/default_schema.sql',
                  'sqlite_new_install_data'	=> 'sqlite3/install/default_data.sql',
! 		'mysql_upgrade_200'		=> ''
   	);
  
  	if ($database_upgrade eq 'no'){ debug('Automatic upgrade is turned off, no automatic schema update!',1);return 1;}; # Its NO to automatic in configuration, this a safety measure.
--- 279,286 ----
  	my %dbSchemaFiles = (
                  'sqlite_new_install_structure'  => 'sqlite3/install/default_schema.sql',
                  'sqlite_new_install_data'	=> 'sqlite3/install/default_data.sql',
! 		'mysql_upgrade_200'		=> '',
! 		'postgresql_upgrade_200'		=> ''
   	);
  
  	if ($database_upgrade eq 'no'){ debug('Automatic upgrade is turned off, no automatic schema update!',1);return 1;}; # Its NO to automatic in configuration, this a safety measure.
***************
*** 266,272 ****
  			#}
  		}
  	}
! 	elsif($database_type eq 'mysql'){
  		# NO UPDATES FOR YOU (-:
  	} else {
  		debug('Unknown backend to create/update!',1);
--- 351,357 ----
  			#}
  		}
  	}
! 	elsif($database_type eq 'mysql' or $database_type eq 'postgresql'){
  		# NO UPDATES FOR YOU (-:
  	} else {
  		debug('Unknown backend to create/update!',1);
