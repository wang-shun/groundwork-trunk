# Configuration file for the fping_process script.

#######################################################
#
#   General Program Execution Options
#
#######################################################

# Spawn and process fpings?  If not, just sleep forever.
# This option is turned off (the value "no", but without quotes) in the default
# configuration file simply so the script can be safely installed before it is
# locally configured.  To get the software to run, it must be turned on here
# (the value "yes", but without quotes) once the rest of the setup is correct
# for your site.
enable_processing = no

# Auto-flush the logging output.
#  no = normal processing, for efficiency
# yes = autoflush the log output on every single write, for debugging mysterious failures
autoflush_log_output = no

# Where to log debug messages.
logfile = "/usr/local/groundwork/foundation/container/logs/fping.log"

# Global Debug Level Flag.
# 0 = no debug output
# 1 = Normal debug output
# 2 = Detailed debug output
debug_level = 0

# Debug dump detail:  control how much host/service info to list in the logfile;
# can generate very large log files; really only useful during initial setup.
# Only effective if debug_level > 1; otherwise, all this output is suppressed.
# 0 => no detail printed
# 1 => print IP addresses
# 2 => also print hosts
# 3 => also print host parents
# 4 => also print services
debug_list_detail = 0

# Where to find the list of hosts to ping.  If you're installing this on a child
# server, the proper host will likely be the parent server rathar than localhost.
Database_Name = "monarch"
Database_Host = "localhost"
Database_User = "monarch"
Database_Pass = "gwrk"

# The hostname for which the fping_process service result is to be reported;
# that is, the host on which this copy of the script runs.
fping_host = "localhost"

# What subset of hosts to ping.  This must be either a single Monarch group name,
# to fping only the hosts associated with that group (generally associated with a
# particular child server), or an empty string, to fping all hosts in Monarch.
fping_group = ""

# How often to repeat the entire set of pings (seconds between starts of successive passes).
# 300 seconds (5 minutes) is typical.
# Simple arithmetic (e.g., 5*60) is allowed in this expression.
cycle_time = 5*60

# The maximum number of hosts to fping at one time (i.e., in one call to fping).
# Such calls to fping will repeat until all hosts are pinged.
max_hosts_per_fping = 100

# How many seconds to wait between successive calls to fping.
# A non-zero value is recommended here to prevent huge spawning storms,
# though in the current implementation (version 4.1) none of the results will be
# gathered up until all of the subsidiary fping processes are spawned, you may
# therefore still have all the fping processes outstanding at the same time, and
# the accumulated pause times will add to the overall result latency.
# You may specify fractional-seconds of sleep time by using a simple expression
# here, such as "pause_time = (4/10)" for 0.4 seconds.
pause_time = (1/10)

# Send host checks?
# [yes/no]
send_host_check = yes

# Send service checks?
# [yes/no]
send_service_check = yes

# List of services to submit passive results for.
# Specify a comma-separated list of service names (with no embedded spaces).
# The standard value is just "icmp_ping".  Setting this to an empty string
# will default it to "Host_alive,icmp_ping".
services_list = "icmp_ping"

# <negated_services> is a list of services whose sensed results are to be
# negated before being sent out.  Negation in this sense implements the
# following mapping of possible service states:
#     okay     => critical
#     warning  => warning
#     critical => okay
#     unknown  => unknown
# Note that there is no remapping of a Pending service state, since that
# just means that no service result has ever been received from here.
#
# Each of the services you wish to actively negate must also be listed in
# services_list above, else the definition here for that service will be
# ignored.  If you have no services whose result you wish to negate, you
# can simply comment out all the <service>...</service> blocks here.
#
# For each service whose result is to be negated, you may optionally
# specify alternate text to be used along with each possible negated
# result.  This can help to reverse the sense of the text to correspond
# to the revised numeric result.  Note that in practice, the current
# fping script only ever generates okay and critical states for services,
# so while specifying alternate text for warning and unknown states is
# allowed, it won't have any effect.
#
# An example of where service result negation might be useful is for a
# backup interface, which should ordinarily be down (which is good) while
# the primary interface is operational, but which will be up in a failover
# situation (which is bad).
<negated_services>

#    <service my_negated_service_name>
#	okay     = "state to report if the negated result is okay"
#	warning  = "state to report if the negated result is warning"
#	critical = "state to report if the negated result is critical"
#	unknown  = "state to report if the negated result is unknown"
#    </service> 

    <service icmp_ping_ISDN>
	okay     = "ISDN interface is down"
	critical = "failover is active; ISDN interface is up"
    </service> 

# You may add as many other <service>...</service> blocks here as needed.

</negated_services>

# Use NSCA to send results to a (generally remote) Nagios command pipe?
#  no = write directly to a local Nagios command pipe
# yes = use send_nsca to write to a (generally remote) Nagios command pipe
use_nsca = yes

# Absolute pathname of the local Nagios command pipe.
nagios_cmd_pipe = "/usr/local/groundwork/nagios/var/spool/nagios.cmd"

# The maximum time in seconds to wait for any single write to the Nagios
# command pipe to complete.
max_command_pipe_wait_time = 3*60

# The maximum size in bytes for any single write operation to the Nagios
# command pipe.  The value chosen here must be no larger than PIPE_BUF
# (getconf -a | fgrep PIPE_BUF) on your platform, unless you have an absolute
# guarantee that no other process will ever write to the command pipe.
max_command_pipe_write_size = 4096

# Default elapsed time threshold for one cycle time, beyond which we declare
# the fping_process service to be in a CRITICAL state.  This value may be
# overridden on the command line.  Zero means we don't apply a threshold.
default_elapsed_time_threshold = 60

#######################################################
#
#   NSCA Options
#
#######################################################

# The maximum number of hosts for which check results will be passed to
# one call of send_nsca.
max_hosts_per_send_nsca = 250

# The number of seconds to delay between successive calls to send_nsca.
# This is used to spread out sending of results over some period of time,
# to reduce the chances of the receiver being overloaded with a sudden
# inrush of results, and thereby also to reduce the chances that this
# script will not be able to successfully send the results.  It will,
# however, directly introduce a corresponding amount of latency between
# the sensing and reporting of status.  Set to 0 if no such delay is
# desired, though then watch out for possible send failures.
#
# You should calculate the total time this delay will introduce into
# the sending of results at your site, given the total number of hosts
# being processed, and make sure it fits within the cycle_time specified
# earlier in this file.
delay_between_sends = 6

# Host of target (generally remote) NSCA.
nsca_host = "127.0.0.1"

# NSCA port to send_nsca results to (usually port 5667).
nsca_port = 5667

# The number of seconds before send_nsca times out.
nsca_timeout = 10

# Whether to also send a copy of the fping data to a secondary server.
send_to_secondary_NSCA = no

# Host of secondary target NSCA.
secondary_nsca_host = "127.0.0.1"

# Secondary-host NSCA port to send_nsca results to (usually port 5667).
secondary_nsca_port = 5667

# The number of seconds before secondary-host send_nsca times out.
secondary_nsca_timeout = 10
