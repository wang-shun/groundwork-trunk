#!/bin/bash

# Copyright 2011 GroundWork Open Source, Inc. ("GroundWork").  All rights
# reserved.  Use is subject to GroundWork commercial license terms.

# ================================================================

# Daemon script control for the Webmetrics Integration.

# This is a script to start and stop an application daemon script.  Note that
# if this script is used interactively to shut down the daemon, but a cron job
# periodically invoking this script is in play, it is likely that the script
# will not stay down for very long.

# To adapt this script to control some new program,
# just modify the items in this section.

# This particular version of the script is special in that it manages multiple
# daemon scripts, that differ only by their respective command-line arguments.
# Each invocation affirmatively requires the operating mode to be selected via
# command-line argument, so the purpose of each running copy can be identified
# from outside the script.

# For safety's sake:
PATH=/bin:/usr/bin

# What to call the target program, in human-readable messages.
program_name="Webmetrics Integration"

# The actual name of the file that contains the program or script to control.
program_file="query_webmetrics.pl"

# The ordinary use of this control script is as a cron job to start the program
# and to periodically re-start it should it fail.  For example, you could use:
#
#     */5 * * * * /usr/local/groundwork/webmetrics/bin/control_webmetrics_integration start
#
# to run this control script every 5 minutes.  This script is smart enough to
# detect if the target program is already running, and not try to start it again
# if that is so.

# The full absolute pathname to the program_file.
program_path="/usr/local/groundwork/webmetrics/bin/$program_file"

# Arguments to pass to the program upon startup.
# We lied above.  This control script is indeed equipped to control more than one
# daemon, but in fact for this integration we currently only run one of them.
program_part[0]="Status"
# program_part[1]="Metrics"
program_args[0]="-a"
# program_args[1]="-m"

# We need to define a command that will yield the PIDs of interest.
# If we are using a compiled program, or a script that uses the system
# copy of Perl, this kind of simple definition is appropriate:
#
#     find_pids="/bin/ps --no-headers -o pid -C $program_file"
#
# However, if we are controlling a script that uses the GroundWork copy of Perl,
# the situation is more complicated.  In that case, we need a command like:
#
#     find_pids="eval /bin/ps --no-headers -o pid,args -C .perl.bin \
#         | /bin/egrep '/usr/local/groundwork/perl/bin/\.perl\.bin (-I[^ ]+ )*-w -- /*([^ ]+/)*$program_file' \
#         | /bin/awk '{print \$1}'"
#
# In the present case, we are controlling multiple similar daemons which are
# distinguished only by their command arguments, so our construction is even
# more complex.  This version has been revised to use this command definition
# in conjunction with a shell function (find_program_pids(), below) that will
# run ps(1) only once and then reprocess the results as needed to extract the
# PIDs for separate daemon instances.  See Revision 18079 of this script in
# Subversion for a version that is appropriate for a single-instance program,
# though that copy needs a correction as we have implemented below to ensure
# that the controlled program runs as the nagios user instead of as root.
#
find_processes="eval /bin/ps --no-headers -o pid,args -C .perl.bin \
    | /bin/egrep '/usr/local/groundwork/perl/bin/\.perl\.bin (-I[^ ]+ )*-w -- /*([^ ]+/)*$program_file'"

# We allow a brief time for a graceful shutdown before we try to restart the
# program, so (hopefully) we don't confuse the prior copy of the process with
# a new copy.  This period should be slightly longer than any time it may take
# for the program to wind down whatever resources it is actively using when it
# receives the shutdown request, along with any sleep interval built into the
# program when it shuts down.
#
# Currently, this configured period is just used to implement a fixed wait
# time.  In a future release of this script, we might be more sophisticated,
# polling occasionally to ensure that the process really does go down within the
# specified time, and possibly issuing a hard kill if not.  We're only satisfied
# with the current algorithm because the restart option is rarely used.
termination_sleep=25

# ================================================================

find_program_pids() {
    processes=`$find_processes`
    for i in ${!program_args[*]} ; do
        # For the sake of efficiency, we use awk's own pattern matching instead of egrep.
        # This construction is complicated by awk's use of "/" as a regex delimiter, since
	# in the general case we cannot rule out this character in our program arguments.
	# Here's the equivalent egrep construction, for comparison:
	# program_pids[$i]=`echo "$processes" | /bin/egrep "$program_file( .+)* ${program_args[$i]}( .+)*\$" | /bin/awk '{print $1}'`
	pattern="$program_file( .+)* ${program_args[$i]}( .+)*\$"
	program_pids[$i]=`echo "$processes" | /bin/awk "/${pattern//\//\\/}/{print \\$1}"`
    done
}

# The adjustments here are to fix a problem with PATH in the GW6.1.X nagios crontab.
# The complexity here is to avoid altering $PATH if it already contains the path
# component of interest.
if [ `/usr/bin/expr match ":${PATH}:" ".*:/bin:" || /bin/true` -eq 0 ]; then
    export PATH=$PATH:/bin
fi
if [ `/usr/bin/expr match ":${PATH}:" ".*:/usr/bin:" || /bin/true` -eq 0 ]; then
    export PATH=$PATH:/usr/bin
fi

script_name=`basename $0`

print_usage() {
    echo "usage:  $script_name [start|restart|stop|status|help]"
}

if [ $# != 1 ]; then
    print_usage
    exit 1
fi

action="$1"
newline='
'

# Note:  The man page for test says the -t option defaults the
# file descriptor to 1, but actual testing shows otherwise.
if test -t 1; then
    stdout_is_tty=1
    log_to_stderr=-s
else
    stdout_is_tty=0
    log_to_stderr=
fi

start() {
    find_program_pids
    for i in ${!program_args[*]} ; do
	if [ -z "${program_pids[$i]}" ]; then
	    # We emit this log message before attempting to start the program, because
	    # if we wait until afterward, it might have started and then died before
	    # we have a chance to emit a similar message, making it appear out of order.
	    logger $log_to_stderr -p user.notice -- "$script_name:  Starting the $program_name ${program_part[$i]} processing."

	    # This construction assumes the program will go into daemon mode on its own, so we don't
	    # need to put it in the background.  That allows us to test whether the program can be
	    # started, not just whether we can fork() before attempting to start the program.
	    if [ `id | sed -e 's/uid=//g' -e 's/(.*//g'` -eq 0 ]; then
		su nagios -c "$program_path ${program_args[$i]}"
	    else
		$program_path ${program_args[$i]}
	    fi
	    if [ $? -ne 0 ]; then
		logger $log_to_stderr -p user.warning -- "$script_name:  Cannot start the $program_name ${program_part[$i]} processing."
	    fi
	else
	    # Convert newlines to spaces, so we can easily test for multiple processes and
	    # print all the PIDs on one line.  Note that any process that spawns other
	    # processes as part of its operation may temporarily appear to have more than one
	    # copy of itself running, if ps(1) catches it between the fork() and the exec().
	    allpids="${program_pids[$i]//$newline/ }"
	    if [ `expr index "$allpids" ' '` -ne 0 ]; then
		processes="processes: $allpids"
	    else
		processes="process $allpids"
	    fi
	    if [ $stdout_is_tty -ne 0 ]; then
		echo "The $program_name ${program_part[$i]} processing is already up ($processes)."
	    fi
	fi
    done
}

stop() {
    find_program_pids
    SAVED_IFS="$IFS"
    IFS=
    crammedpids="${program_pids[*]}"
    IFS="$SAVED_IFS"
    if [ -z "$crammedpids" ]; then
	echo "The $program_name is already down."
    else
	# I don't like killing a possibly-transient process simply by its process ID,
	# for fear we will be subject to a race condition and will end up signalling
	# some other process that immediately re-uses its PID.  But that's a danger
	# we will have to live with for now.  The basic alternative is to precisely
	# identify the top-level process in a parentage hierarchy, and ensure that it
	# always lives in its own process group which is inherited by any processes
	# it spawns.  Then we could just signal the process group (if we are assured
	# that the top process has already become its own process group leader).
	# Such a strategy would reduce but not entirely eliminate the danger.
	echo "Stopping the $program_name ..."
	kill -TERM ${program_pids[*]}
	if [ $? -ne 0 ]; then
	    logger $log_to_stderr -p user.warning -- "$script_name:  Cannot kill the $program_name."
	else
	    logger $log_to_stderr -p user.notice -- "$script_name:  The $program_name has been told to stop."
	fi
    fi
}

status() {
    find_program_pids
    SAVED_IFS="$IFS"
    IFS=
    crammedpids="${program_pids[*]}"
    IFS="$SAVED_IFS"
    if [ -z "$crammedpids" ]; then
	if [ $stdout_is_tty -ne 0 ]; then
	    echo "The $program_name is down."
	fi
    else
	for i in ${!program_args[*]} ; do
	    if [ -z "${program_pids[$i]}" ]; then
		echo "The $program_name ${program_part[$i]} processing is down."
	    else
		allpids="${program_pids[$i]//$newline/ }"
		if [ `expr index "$allpids" ' '` -ne 0 ]; then
		    processes="processes: $allpids"
		else
		    processes="process $allpids"
		fi
		if [ $stdout_is_tty -ne 0 ]; then
		    echo "The $program_name ${program_part[$i]} processing is up ($processes)."
		fi
	    fi
	done
    fi
}

case "$action" in
    start)
	start
	;;
    restart)
	stop
	# Allow a brief time for a graceful shutdown before we try to start.
	# so (hopefully) we don't confuse the prior process with the one we
	# want to start now.  See the configuration notes above.
	sleep $termination_sleep
	start
	;;
    stop)
	stop
	;;
    status)
	status
	;;
    help)
	print_usage
	;;
    *)
	print_usage
	exit 1
	;;
esac
