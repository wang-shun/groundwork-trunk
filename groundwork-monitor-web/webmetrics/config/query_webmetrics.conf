# ================================================================
# Configuration file for the query_webmetrics.pl script.
# ================================================================

# Note:  Certain configuration settings here ("[possible future feature]")
# must be present, but are ignored in the current release, as they represent
# scaffolding for possible future extension.

# Whether to process anything.  Turn this off if you want to disable this
# process completely in case it gets run some time when you're not expecting
# it to.  This option is turned off in the default configuration file simply
# so the script can be safely installed before it is locally configured.
# To get the software to run, it must be turned on here once the rest of
# the setup is correct for your installation.
# [yes/no]
enable_processing = no

# Global Debug Level Flag;
# No debug = 0, Statistics = 5, Normal debug = 6, Detail debug = 7.
# More precisely, specify one of the following numbers:
# NONE    = 0; turn off all debug info
# FATAL   = 1; the application is about to die
# ERROR   = 2; the application has found a serious problem, but will attempt to recover
# WARNING = 3; the application has found an anomaly, but will try to handle it
# NOTICE  = 4; the application wants to inform you of a significant event
# STATS   = 5; the application wants to log statistical data for later analysis
# INFO    = 6; the application wants to log a potentially interesting event
# DEBUG   = 7; the application wants to log detailed debugging data
# Note that DEBUG level is not recommended for ongoing production use, because
# it generates a tremendous amount of output that is written synchronously to
# the log file.  This will slow down the daemon tremendously, and the extra
# i/o load will interfere with other processes trying to use the disk.
debug_level = 4

# Where to log ordinary operational messages for status data processing,
# especially for debugging.  A relative pathname specified here will be
# interpreted relative to the directory in which the query_webmetrics.pl
# script lives.
status_logfile = "/usr/local/groundwork/webmetrics/logs/query_webmetrics_status.log"

# Where to log ordinary operational messages for metrics data processing,
# especially for debugging.  A relative pathname specified here will be
# interpreted relative to the directory in which the query_webmetrics.pl
# script lives.
# [possible future feature]
metrics_logfile = "/usr/local/groundwork/webmetrics/logs/query_webmetrics_metrics.log"

# How large (in MBytes) the logfile is allowed to get before it is
# automatically rotated at the end of a processing cycle.
max_logfile_size = 10

# How many total logfiles will be retained when the logfile is rotated.
# Set this to 1 to just truncate the existing file and not retain any
# additional copies.  Otherwise, set it to some larger small integer.
max_logfiles_to_retain = 5

# How often to probe the Webmetrics server for new status data, in seconds.
# This period represents the desired start-to-start timing of successive
# cycles.
status_cycle_time = 300

# How often to probe the Webmetrics server for new metrics data, in seconds.
# This period represents the desired start-to-start timing of successive
# cycles.
# [possible future feature]
metrics_cycle_time = 1500

# A minimum period to wait between successive cycles, even if one cycle has
# run so long as to bump into the start time for the next cycle.  Like the
# status_cycle_time and metrics_cycle_time, this period is expressed in
# seconds, and it must be specified as a positive integer greater than 1.
minimum_wait_between_cycles = 10

# How long we allow Webmetrics to complete the metrics gathering for a given
# nominal probe timestamp and post those metric results in their database
# after the device/location probe is made, before we can reasonably ask for
# this data to be available for our querying.  Presuming that the reported
# timestamp is taken at the start of each probe, the value we specify here
# must be somewhat longer than the longest monitoring timeout configured
# within Webmetrics, plus a bit of time to allow the data to appear in their
# database.  This period is expressed in seconds, and it must be specified
# as a positive integer greater than 1.
#
# Note:  This parameter is only a reasonable guess for this latency, and
# does not in any way represent the possible worst-case situation.  It only
# provides reasonable protection against latency that arises during normal
# operation of the Webmetrics system, not under situations that may obtain
# during adverse operating conditions.
expected_metrics_latency = 90

# The name of the Nagios service on each host for which Webmetrics results
# will be posted.  Those hosts correspond to what Webmetrics calls services,
# and the Nagios service name (which will be uniform across all those hosts)
# is specified here.
standardized_service_name = "webmetrics"

# The host profile which will be applied to all customer resources being
# monitored by Webmetrics, when such resources are created as hosts within
# Monarch.
# [possible future feature]
webmetrics_resource_host_profile = "host-profile-webmetrics-resource"

# The service template which will be applied to all locations from which
# Webmetrics monitors customer resources, when such locations are created
# as services within Monarch.
# [possible future feature]
webmetrics_location_service_template = "webmetrics-location"

# The hostname and servicenames for the Webmetrics integration monitoring
# daemons, so trouble in fetching and processing data from Webmetrics can
# be reported to GroundWork Monitor.
webmetrics_monitoring_host = "localhost"
webmetrics_status_service  = "Webmetrics_Status"
# [possible future feature]
webmetrics_metrics_service = "Webmetrics_Metrics"

# "webmetrics" database access credentials.
# Set these (probably just the user/pass) according to your local setup.
# [possible future feature]
webmetrics_db_host = "localhost"
webmetrics_db_name = "webmetrics"
webmetrics_db_user = "webmonitor"
webmetrics_db_pass = "gwrk"

# Webmetrics server web-access credentials.
# The server name is probably fixed, but you must set the username
# and password to whatever strings Webmetrics has given you.
webmetrics_server   = "api.webmetrics.com"
webmetrics_username = "my_webmetrics_username"
webmetrics_password = "my_webmetrics_password"

# Max time (seconds) to wait for network server activity.  This will be
# used to time out any long-running queries to Webmetrics.
network_server_timeout = 60

# The timezone in which all timestamps from Webmetrics are expressed.
# This is set by Webmetrics on a per-account basis, and that setup must
# be mirrored here.  The canonical settings in the United States are:
#
# Eastern:  "America/New_York"    or "US/Eastern"
# Central:  "America/Chicago"     or "US/Central"
# Mountain: "America/Denver"      or "US/Mountain"
# Pacific:  "America/Los_Angeles" or "US/Pacific"
#
# though many other U.S. and world timezones are available, since
# they are set by political decisions rather than simply by
# geographic/astronomic calculations.
master_timezone = "US/Pacific"

# Mapping from customer resources to corresponding (probably virtual)
# host names within GroundWork Monitor.
#
# For convenience, to disable a given entry you need only comment out
# its host definition, not the entire <resource ...></resource> block.
#
# It is not necessary to define any mappings here; the supporting code
# contains a reasonable default transformation.  This part of the setup
# is only needed if you want to override the default resource->host
# transform for some particular resources.
<host_map>

    <resource "World-Cricket-Rankings">
	# host = "CRICKET-RANKINGS"
    </resource>
    <resource "Oracle-Web-Access.Security-Hole">
	# host = "Security-Nightmare"
    </resource>
    <resource "">
	# host = ""
    </resource>

</host_map>

# Mapping from Webmetrics locations to corresponding service names within
# GroundWork Monitor.
#
# For convenience, to disable a given entry you need only comment out
# its service definition, not the entire <location ...></location> block.
#
# It is not necessary to define any mappings here; the supporting code
# contains a reasonable default transformation.  This part of the setup
# is only needed if you want to override the default location->service
# transform for some particular locations.
<service_map>

    <location "Atlantis, Spain - Nlayer">
	# service = "Atlantis_Spain_Nlayer"
    </location>
    <location "Valhalla, Norway">
	# service = ""
    </location>
    <location "Mount Olympus, Greece">
	# service = ""
    </location>

</service_map>

# Whether to send Nagios host and service checks based on Webmetrics device
# metric data (yes) or based on Webmetrics device status data (no).  In this
# release, only derivation from status data is supported.
# [yes/no]
generate_nagios_checks_from_metrics = no

# How to combine Nagios service-check results into Nagios host-check results.
# This specifies how Webmetrics location probe results discovered within a given
# processing cycle will be merged into Customer resource status results sent to
# Nagios.  This may be set to either "worst-case" or "most-recent" to enable the
# rollup of these results, or to "none" to disable the rollup so that no host
# check result is generated.  When the rollup is enabled, the usual setting is
# "worst-case", to make sure that trouble does not get masked, even if a later
# probe from some other Webmetrics location sees the Customer resource in a
# better light.
# ["worst-case"/"most-recent"/"none"]
nagios_check_result_rollup_algorithm = "none"

# The maximum number of Nagios host and service check messages to queue before
# sending them to Nagios, if processing might impose a significant delay while
# checks are being accumulated.  This controls a tradeoff between efficiency
# (queueing more is better) and low latency (sending quickly is better).
max_nagios_checks_to_queue = 10

# The directory in which RRD files created and updated by the daemon script
# shall live.  This must be an absolute pathname to the directory, and the
# directory must already exist.
rrd_base_directory = "/usr/local/groundwork/rrd"

# ----------------------------------------------------------------
# Options for sending messages to Foundation.
# ----------------------------------------------------------------

# Where to contact Foundation, to send messages to the Event Console
# and to update information on where to find RRD graphs.
foundation_host = "localhost"
foundation_port = 4913

# The name of the monitoring server on which this Webmetrics Integration is
# running.  This will be used to tag log messages that appear in the Event
# Console.  It is usually just specified as "localhost", unless you have
# multiple monitoring servers in your deployment.
monitor_server_hostname = "localhost"

# The IP address of the monitoring server on which this Webmetrics Integration
# is running.  This will be used to tag log messages that appear in the Event
# Console.  For simple use, where monitor_server_hostname is "localhost", it
# can be left as "127.0.0.1".  For complex setups, you will probably want to
# specify a non-default IP address here.  In particular, if you have multiple
# monitoring servers and you don't use "localhost" for monitor_server_hostname,
# you will want to set this value to represent the network address used on this
# monitoring server to talk to Foundation.  We don't derive this automatically
# from monitor_server_hostname because the server might be multi-homed, and we
# have no obvious way to choose automatically among multiple network addresses.
monitor_server_ip_address = "127.0.0.1"

# Socket timeout (in seconds), to address GWMON-7407.  Typical value
# is 60.  Set to 0 to disable.
#
# This timeout is here only for use in emergencies, when Foundation
# has completely frozen up and is no longer reading (will never read)
# a socket we have open.  We don't want to set this value so low that
# it will interfere with normal communication, even given the fact that
# Foundation may wait a rather long time between sips from this straw
# as it processes a large bundle of messages that we sent it, or is
# otherwise busy and just cannot get back around to reading the socket
# in a reasonably short time.
socket_send_timeout = 60

# This is the actual SO_SNDBUF value, as set by setsockopt().  This is
# therefore the actual size of the data buffer available for writing,
# irrespective of additional kernel bookkeeping overhead.  This will
# have no effect without the companion as-yet-undocumented patch to
# IO::Socket::INET.  Set this to 0 to use the system default socket send
# buffer size.  A typical value to set here is 262144.  (Note that the
# value specified here is likely to be limited to something like 131071
# by the sysctl net.core.wmem_max parameter.)
#
# This value is not currently used by the GW::Foundation package we call,
# so we just let it default for future compatibility.
send_buffer_size = 0

# A limit on the number of command XML items sent to Foundation in a single
# packet.  This bound has two purposes:
# * to ensure that an entire packet can fit within a single buffer of the
#   socket's send buffer size, for efficient and more-reliable data transfer;
# * to break up a large volume of messages into smaller segments, to
#   potentially take advantage of multi-threading when those messages
#   are processed within Foundation.
max_command_xml_bundle_size = 20

# ----------------------------------------------------------------
# Options for sending messages to Nagios.
# ----------------------------------------------------------------

# Send the passive service check results to Nagios?
# In normal production operation, you want this to happen, but during a
# debugging session you might want to disable it so as not to create
# confusing results on the production monitoring screens.
# [yes/no]
send_to_nagios = yes

# Use NSCA to send results to a (generally remote) Nagios command pipe?
#  no = write directly to a local Nagios command pipe
# yes = use send_nsca to write to a (generally remote) Nagios command pipe
# [yes/no]
# FIX LATER:  Using NSCA here is not yet supported in this application.
use_nsca = no

# Absolute pathname of the Nagios command pipe.
nagios_command_pipe = "/usr/local/groundwork/nagios/var/spool/nagios.cmd"

# The maximum size in bytes for any single write operation to the Nagios
# command pipe.  The value chosen here must be no larger than PIPE_BUF
# (getconf -a | fgrep PIPE_BUF) on your platform, unless you have an absolute
# guarantee that no other process will ever write to the command pipe.
max_command_pipe_write_size = 4096

# The maximum time in seconds to wait for any single write to the Nagios
# command pipe to complete.
max_command_pipe_wait_time = 180

#
#   NSCA Options
#

# The maximum number of messages that will be passed to one call of send_nsca.
max_messages_per_send_nsca = 500

# The number of seconds to delay between successive calls to send_nsca.
# This is used to spread out sending of results over some period of time,
# to reduce the chances of the receiver being overloaded with a sudden
# inrush of results, and thereby also to reduce the chances that this
# script will not be able to successfully send the results.  It will,
# however, directly introduce a corresponding amount of latency between
# the sensing and reporting of status.  Set to 0 if no such delay is
# desired, though then watch out for possible send failures.
#
# You should calculate the total time this delay will introduce into
# the sending of results at your site, given the total number of hosts
# being processed, and make sure it fits within the cycle_time specified
# earlier in this file.
delay_between_sends = 6

# Host of target (generally remote) NSCA.
nsca_host = "127.0.0.1"

# NSCA port to send_nsca results to (usually port 5667).
nsca_port = 5667

# The number of seconds before send_nsca times out.
nsca_timeout = 10

# Whether to also send a copy of the data to a secondary server.
# [yes/no]
send_to_secondary_NSCA = no

# Host of secondary target NSCA.
secondary_nsca_host = "127.0.0.1"

# Secondary-host NSCA port to send_nsca results to (usually port 5667).
secondary_nsca_port = 5667

# The number of seconds before secondary-host send_nsca times out.
secondary_nsca_timeout = 10

